{"backend_state":"running","connection_file":"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/share/jupyter/runtime/kernel-79be1f93-b807-4d9b-a07d-3dc2d4d807d6.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1657215634321,"exec_count":1,"id":"67c416","input":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport seaborn as sns\nimport sklearn\nfrom sklearn.model_selection import train_test_split","kernel":"python3-ubuntu","pos":0,"start":1657215633167,"state":"done","type":"cell"}
{"cell_type":"code","end":1657215635421,"exec_count":2,"id":"682198","input":"airline_df = pd.read_csv('./Data/airline_data.csv')","kernel":"python3-ubuntu","pos":1,"start":1657215634941,"state":"done","type":"cell"}
{"cell_type":"code","end":1657215636500,"exec_count":3,"id":"8352f4","input":"airline_df.dropna(inplace = True)\nairline_df.reset_index(drop=True, inplace=True)\nairline_df = pd.get_dummies(airline_df, prefix = None, prefix_sep = '_', dummy_na = False, columns = ['Gender', 'Customer Type', 'Type of Travel', 'Class','satisfaction'], sparse = False, drop_first = False, dtype = None)","kernel":"python3-ubuntu","pos":2,"start":1657215636229,"state":"done","type":"cell"}
{"cell_type":"code","end":1657215647525,"exec_count":4,"id":"5b7e7a","input":"airline_df.columns\ncolumns_drop = ['id', 'Unnamed: 0.1', 'Unnamed: 0','satisfaction_neutral or dissatisfied', 'Gender_Female','Customer Type_disloyal Customer', 'Type of Travel_Business travel']\nairline_df.drop(columns_drop, axis=1, inplace = True)","kernel":"python3-ubuntu","pos":3,"start":1657215647513,"state":"done","type":"cell"}
{"cell_type":"code","end":1657215662068,"exec_count":5,"id":"b91c6e","input":"sns.set(rc = {'figure.figsize':(30,30)})\nsns.heatmap(airline_df.corr(), annot=True)","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f4e93fa63d0>"},"exec_count":5},"1":{"data":{"image/png":"5b37bd7ee384ac9d79b9cc2ea08d877b747740b7","text/plain":"<Figure size 2160x2160 with 2 Axes>"},"metadata":{"image/png":{"height":1847,"width":1760}}}},"pos":4,"scrolled":true,"start":1657215654728,"state":"done","type":"cell"}
{"cell_type":"code","end":1657215667771,"exec_count":6,"id":"65bd97","input":"target = airline_df[\"satisfaction_satisfied\"]\ninput_columns = airline_df.loc[:, airline_df.columns != \"satisfaction_satisfied\"]\nx_train, x_test, y_train, y_test = train_test_split(input_columns, target, train_size=0.8)","kernel":"python3-ubuntu","pos":5,"start":1657215667691,"state":"done","type":"cell"}
{"cell_type":"code","end":1657215694055,"exec_count":7,"id":"52dcb6","input":"from sklearn.ensemble import AdaBoostClassifier\nAda_model = AdaBoostClassifier(n_estimators=100)\n\nAda_model.fit(x_train, y_train)\n\nAda_hat = Ada_model.predict(x_test)\n\nrecall = sklearn.metrics.recall_score(y_test, Ada_hat)\nprecision = sklearn.metrics.precision_score(y_test, Ada_hat)\naccuracy = sklearn.metrics.accuracy_score(y_test, Ada_hat)\nf_measure = sklearn.metrics.f1_score(y_test, Ada_hat)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, Ada_hat), annot=True, fmt='g')","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"R:  0.9130980111091203\nP:  0.9241929633659776\nA:  0.9302648853193297\nF:  0.9186119873817035\n"},"1":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f4e8fa6d940>"},"exec_count":7},"2":{"data":{"image/png":"c6582d9869d3f3375ffe3a5962141fe1cea69bf4","text/plain":"<Figure size 2160x2160 with 2 Axes>"},"metadata":{"image/png":{"height":1664,"width":1582}}}},"pos":6,"scrolled":true,"start":1657215674958,"state":"done","type":"cell"}
{"cell_type":"code","end":1657216119535,"exec_count":9,"id":"1a689c","input":"from sklearn.neighbors import KNeighborsClassifier\nKNN_model = KNeighborsClassifier(n_neighbors=15)\n\nKNN_model.fit(x_train, y_train)\n\nKNN_hat = KNN_model.predict(x_test)\n\nrecall = sklearn.metrics.recall_score(y_test, KNN_hat)\nprecision = sklearn.metrics.precision_score(y_test, KNN_hat)\naccuracy = sklearn.metrics.accuracy_score(y_test, KNN_hat)\nf_measure = sklearn.metrics.f1_score(y_test, KNN_hat)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, KNN_hat), annot=True, fmt='g')","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"R:  0.6534671205877083\nP:  0.7358014728134773\nA:  0.7495173372461194\nF:  0.6921945432977462\n"},"1":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f4e8f899250>"},"exec_count":9},"2":{"data":{"image/png":"2948f0dba61b790c7aaffc44d8bcca1cb66c8b56","text/plain":"<Figure size 2160x2160 with 2 Axes>"},"metadata":{"image/png":{"height":1664,"width":1582}}}},"pos":7,"start":1657215998913,"state":"done","type":"cell"}
{"cell_type":"code","end":1657216624542,"exec_count":10,"id":"1c6926","input":"from sklearn.ensemble import RandomForestClassifier\nRF_model = RandomForestClassifier(n_estimators=10)\n\nRF_model.fit(x_train, y_train)\n\nRF_hat = RF_model.predict(x_test)\n\nrecall = sklearn.metrics.recall_score(y_test, RF_hat)\nprecision = sklearn.metrics.precision_score(y_test, RF_hat)\naccuracy = sklearn.metrics.accuracy_score(y_test, RF_hat)\nf_measure = sklearn.metrics.f1_score(y_test, RF_hat)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, RF_hat), annot=True, fmt='g')","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"R:  0.9263572836409245\nP:  0.9694355897243577\nA:  0.9556722526836049\nF:  0.9474070001832509\n"},"1":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f4e8f7b2dc0>"},"exec_count":10},"2":{"data":{"image/png":"d62e010e4e15a83782d78da43c4f76013d6ce30a","text/plain":"<Figure size 2160x2160 with 2 Axes>"},"metadata":{"image/png":{"height":1664,"width":1582}}}},"pos":9,"start":1657216621348,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"619fbd","input":"from sklearn.svm import SVC\nSVC_model = SVC(kernel='rbf')\n\nSVC_model.fit(x_train, y_train)\n\nSVC_hat = SVC_model.predict(x_test)\n\nrecall = sklearn.metrics.recall_score(y_test, SVC_hat)\nprecision = sklearn.metrics.precision_score(y_test, SVC_hat)\naccuracy = sklearn.metrics.accuracy_score(y_test, SVC_hat)\nf_measure = sklearn.metrics.f1_score(y_test, SVC_hat)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, SVC_hat), annot=True, fmt='g')","pos":8,"type":"cell"}
{"end":1657219586603,"exec_count":22,"id":"f9a80c","input":"from sklearn.neural_network import MLPClassifier\nNeural_model = MLPClassifier(solver='lbfgs', alpha=0.1, hidden_layer_sizes=(10, 10), random_state=1)\n\nNeural_model.fit(x_train, y_train)\n\nNeural_hat = Neural_model.predict(x_test)\n\nrecall = sklearn.metrics.recall_score(y_test, Neural_hat)\nprecision = sklearn.metrics.precision_score(y_test, Neural_hat)\naccuracy = sklearn.metrics.accuracy_score(y_test, Neural_hat)\nf_measure = sklearn.metrics.f1_score(y_test, Neural_hat)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, Neural_hat), annot=True, fmt='g')","kernel":"python3-ubuntu","output":{"0":{"name":"stderr","text":"/usr/local/lib/python3.8/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\n  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n"},"1":{"name":"stdout","text":"R:  0.42779071850922773\nP:  0.6828256828256828\nA:  0.667734960228589\nF:  0.5260258881850729\n"},"2":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f4e8f114190>"},"exec_count":22},"3":{"data":{"image/png":"14f672db9c8291e9c2ec0ce81438874ee63e661e","text/plain":"<Figure size 2160x2160 with 2 Axes>"},"metadata":{"image/png":{"height":1664,"width":1582}}}},"pos":10,"start":1657219554137,"state":"done","type":"cell"}
{"exec_count":27,"id":"14d7df","input":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import CategoricalNB\n\nNB_model = CategoricalNB()\n\nNB_model.fit(x_train, y_train)\n\nNB_hat = NB_model.predict(x_test)\n\nrecall = sklearn.metrics.recall_score(y_test,NB_hat)\nprecision = sklearn.metrics.precision_score(y_test, NB_hat)\naccuracy = sklearn.metrics.accuracy_score(y_test, NB_hat)\nf_measure = sklearn.metrics.f1_score(y_test, NB_hat)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, NB_hat), annot=True, fmt='g')","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"R:  0.8740369109478588\nP:  0.8846572361262242\nA:  0.8965943316086185\nF:  0.8793150067598018\n"},"1":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f4e8ee0c3d0>"},"exec_count":27},"2":{"data":{"image/png":"4ddf4bdcd1cbd976b7e8a269f866459df4fd4c77","text/plain":"<Figure size 2160x2160 with 2 Axes>"},"metadata":{"image/png":{"height":1664,"width":1582}}}},"pos":11,"state":"done","type":"cell"}
{"id":"0c3cb9","input":"","pos":12,"type":"cell"}
{"id":0,"time":1657215622857,"type":"user"}
{"last_load":1657215622699,"type":"file"}