{"backend_state":"running","connection_file":"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/share/jupyter/runtime/kernel-4415a3be-5eb6-4f84-8c4d-c4b685a377ae.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1657722975075,"exec_count":1,"id":"98ba1f","input":"import pandas as pd\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport seaborn as sns\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport sklearn\nfrom sklearn import tree\nfrom matplotlib import pyplot as plt\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.neighbors import KNeighborsClassifier as KNN\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import AdaBoostClassifier as ADC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.naive_bayes import CategoricalNB\nfrom sklearn.linear_model import LogisticRegression as LR\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.neighbors import BallTree\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.model_selection import GridSearchCV as GSearch\n\nfrom imblearn.under_sampling import RandomUnderSampler ","kernel":"ds_env","pos":0,"start":1657722973390,"state":"done","type":"cell"}
{"cell_type":"code","end":1657722975532,"exec_count":2,"id":"6a663d","input":"airline_df = pd.read_csv('./data/airline_data.csv')\nairline_df.dropna(inplace=True)\nairline_df.reset_index(drop=True, inplace=True)\nairline_df = pd.get_dummies(airline_df, prefix = None, prefix_sep = '_', dummy_na = False, columns = ['satisfaction','Gender', 'Customer Type', 'Type of Travel', 'Class'], sparse = False, drop_first = False, dtype = None)\ncolumns_drop = ['id', 'Unnamed: 0.1', 'Unnamed: 0', 'satisfaction_neutral or dissatisfied']\nairline_df.drop(columns_drop, axis=1, inplace = True)\n","kernel":"ds_env","pos":1,"start":1657722975098,"state":"done","type":"cell"}
{"cell_type":"code","end":1657722975560,"exec_count":3,"id":"0fe4d1","input":"airline_df.isnull().sum()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"Age                                  0\nFlight Distance                      0\nInflight wifi service                0\nDeparture/Arrival time convenient    0\nEase of Online booking               0\nGate location                        0\nFood and drink                       0\nOnline boarding                      0\nSeat comfort                         0\nInflight entertainment               0\nOn-board service                     0\nLeg room service                     0\nBaggage handling                     0\nCheckin service                      0\nInflight service                     0\nCleanliness                          0\nDeparture Delay in Minutes           0\nArrival Delay in Minutes             0\nsatisfaction_satisfied               0\nGender_Female                        0\nGender_Male                          0\nCustomer Type_Loyal Customer         0\nCustomer Type_disloyal Customer      0\nType of Travel_Business travel       0\nType of Travel_Personal Travel       0\nClass_Business                       0\nClass_Eco                            0\nClass_Eco Plus                       0\ndtype: int64"},"exec_count":3}},"pos":2,"start":1657722975538,"state":"done","type":"cell"}
{"cell_type":"code","end":1657722975569,"exec_count":4,"id":"6c6158","input":"airline_df.columns","kernel":"ds_env","output":{"0":{"data":{"text/plain":"Index(['Age', 'Flight Distance', 'Inflight wifi service',\n       'Departure/Arrival time convenient', 'Ease of Online booking',\n       'Gate location', 'Food and drink', 'Online boarding', 'Seat comfort',\n       'Inflight entertainment', 'On-board service', 'Leg room service',\n       'Baggage handling', 'Checkin service', 'Inflight service',\n       'Cleanliness', 'Departure Delay in Minutes', 'Arrival Delay in Minutes',\n       'satisfaction_satisfied', 'Gender_Female', 'Gender_Male',\n       'Customer Type_Loyal Customer', 'Customer Type_disloyal Customer',\n       'Type of Travel_Business travel', 'Type of Travel_Personal Travel',\n       'Class_Business', 'Class_Eco', 'Class_Eco Plus'],\n      dtype='object')"},"exec_count":4}},"pos":3,"start":1657722975566,"state":"done","type":"cell"}
{"cell_type":"code","end":1657722975622,"exec_count":5,"id":"2616e8","input":"airline_df.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Flight Distance</th>\n      <th>Inflight wifi service</th>\n      <th>Departure/Arrival time convenient</th>\n      <th>Ease of Online booking</th>\n      <th>Gate location</th>\n      <th>Food and drink</th>\n      <th>Online boarding</th>\n      <th>Seat comfort</th>\n      <th>Inflight entertainment</th>\n      <th>...</th>\n      <th>satisfaction_satisfied</th>\n      <th>Gender_Female</th>\n      <th>Gender_Male</th>\n      <th>Customer Type_Loyal Customer</th>\n      <th>Customer Type_disloyal Customer</th>\n      <th>Type of Travel_Business travel</th>\n      <th>Type of Travel_Personal Travel</th>\n      <th>Class_Business</th>\n      <th>Class_Eco</th>\n      <th>Class_Eco Plus</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>13</td>\n      <td>460</td>\n      <td>3</td>\n      <td>4</td>\n      <td>3</td>\n      <td>1</td>\n      <td>5</td>\n      <td>3</td>\n      <td>5</td>\n      <td>5</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>25</td>\n      <td>235</td>\n      <td>3</td>\n      <td>2</td>\n      <td>3</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>26</td>\n      <td>1142</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>...</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>25</td>\n      <td>562</td>\n      <td>2</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>61</td>\n      <td>214</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>4</td>\n      <td>5</td>\n      <td>5</td>\n      <td>3</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 28 columns</p>\n</div>","text/plain":"   Age  Flight Distance  Inflight wifi service  \\\n0   13              460                      3   \n1   25              235                      3   \n2   26             1142                      2   \n3   25              562                      2   \n4   61              214                      3   \n\n   Departure/Arrival time convenient  Ease of Online booking  Gate location  \\\n0                                  4                       3              1   \n1                                  2                       3              3   \n2                                  2                       2              2   \n3                                  5                       5              5   \n4                                  3                       3              3   \n\n   Food and drink  Online boarding  Seat comfort  Inflight entertainment  ...  \\\n0               5                3             5                       5  ...   \n1               1                3             1                       1  ...   \n2               5                5             5                       5  ...   \n3               2                2             2                       2  ...   \n4               4                5             5                       3  ...   \n\n   satisfaction_satisfied  Gender_Female  Gender_Male  \\\n0                       0              0            1   \n1                       0              0            1   \n2                       1              1            0   \n3                       0              1            0   \n4                       1              0            1   \n\n   Customer Type_Loyal Customer  Customer Type_disloyal Customer  \\\n0                             1                                0   \n1                             0                                1   \n2                             1                                0   \n3                             1                                0   \n4                             1                                0   \n\n   Type of Travel_Business travel  Type of Travel_Personal Travel  \\\n0                               0                               1   \n1                               1                               0   \n2                               1                               0   \n3                               1                               0   \n4                               1                               0   \n\n   Class_Business  Class_Eco  Class_Eco Plus  \n0               0          0               1  \n1               1          0               0  \n2               1          0               0  \n3               1          0               0  \n4               1          0               0  \n\n[5 rows x 28 columns]"},"exec_count":5}},"pos":4,"start":1657722975575,"state":"done","type":"cell"}
{"cell_type":"code","end":1657722975718,"exec_count":6,"id":"96f91b","input":"\nairline_df.dropna(inplace=True)\nairline_df.reset_index(drop=True, inplace=True)","kernel":"ds_env","pos":5,"start":1657722975668,"state":"done","type":"cell"}
{"cell_type":"code","end":1657722975747,"exec_count":7,"id":"4272fa","input":"reduced_df = airline_df.sample(frac=0.10, random_state=42)\nreduced_df.shape","kernel":"ds_env","output":{"0":{"data":{"text/plain":"(12949, 28)"},"exec_count":7}},"pos":6,"start":1657722975735,"state":"done","type":"cell"}
{"cell_type":"code","end":1657722975759,"exec_count":8,"id":"802ae3","input":"reduced_df.satisfaction_satisfied.value_counts()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0    7323\n1    5626\nName: satisfaction_satisfied, dtype: int64"},"exec_count":8}},"pos":7,"start":1657722975751,"state":"done","type":"cell"}
{"cell_type":"code","end":1657722975768,"exec_count":9,"id":"469a0a","input":"target = reduced_df['satisfaction_satisfied']","kernel":"ds_env","pos":8,"start":1657722975766,"state":"done","type":"cell"}
{"cell_type":"code","end":1657722975778,"exec_count":10,"id":"752ae3","input":"input_columns = reduced_df.loc[:, airline_df.columns != \"satisfaction_satisfied\"]","kernel":"ds_env","pos":9,"start":1657722975771,"state":"done","type":"cell"}
{"cell_type":"code","end":1657722975786,"exec_count":11,"id":"339596","input":"input_columns.shape","kernel":"ds_env","output":{"0":{"data":{"text/plain":"(12949, 27)"},"exec_count":11}},"pos":10,"start":1657722975780,"state":"done","type":"cell"}
{"cell_type":"code","end":1657722975807,"exec_count":12,"id":"da00d9","input":"x_train, x_test, y_train, y_test = train_test_split(input_columns, target, stratify=target, train_size=0.8)","kernel":"ds_env","pos":11,"start":1657722975794,"state":"done","type":"cell"}
{"cell_type":"code","end":1657723324631,"exec_count":15,"id":"dedda0","input":"sgd_model = SGDClassifier()\nsgd_model.fit(x_train, y_train)\ny_pred_sgd = sgd_model.predict(x_test)\nacc = accuracy_score(y_test, y_pred_sgd)\nprec = precision_score(y_test, y_pred_sgd)\nrecall = recall_score(y_test, y_pred_sgd)\nf1 = f1_score(y_test, y_pred_sgd)\nscores['sgd'] = {'accuracy': acc, 'precision':prec, 'recall':recall, 'f1_score':f1}\n\nparam_grid = {'loss': [\"hinge\", \"log_loss\", \"modified_huber\", \"squared_hinge\", \"perceptron\"],  \n              'penalty': [\"l2\", \"l1\", \"elasticnet\"], \n              'max_iter':[1000, 10000, 30000],\n              'alpha': [0.0001, 0.001, 0.01, 0.1, 1.0]}  \n   \ngrid = GridSearchCV(SGDClassifier(), param_grid, refit = True, verbose = 3,n_jobs=-1) \n   \ngrid.fit(x_train, y_train) \n \nprint(grid.best_params_) \n\nbest_estimator = grid.best_estimator_\ny_pred_sgd = best_estimator.predict(x_test)\nacc = accuracy_score(y_test, y_pred_sgd)\nprec = precision_score(y_test, y_pred_sgd)\nrecall = recall_score(y_test, y_pred_sgd)\nf1 = f1_score(y_test, y_pred_sgd)\nscores['sgd grid'] = {'accuracy': acc, 'precision':prec, 'recall':recall, 'f1_score':f1}","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Fitting 5 folds for each of 225 candidates, totalling 1125 fits\n"},"1":{"name":"stdout","text":"[CV 2/5] END alpha=0.0001, loss=hinge, max_iter=1000, penalty=l2;, score=0.571 total time=   0.2s\n[CV 4/5] END alpha=0.0001, loss=hinge, max_iter=1000, penalty=l2;, score=0.602 total time=   0.2s\n[CV 5/5] END alpha=0.0001, loss=hinge, max_iter=1000, penalty=l2;, score=0.592 total time=   0.2s\n[CV 2/5] END alpha=0.0001, loss=hinge, max_iter=1000, penalty=l1;, score=0.803 total time=   0.3s\n[CV 4/5] END alpha=0.0001, loss=hinge, max_iter=1000, penalty=l1;, score=0.766 total time=   0.5s\n[CV 5/5] END alpha=0.0001, loss=hinge, max_iter=1000, penalty=l1;, score=0.798 total time=   0.3s\n[CV 2/5] END alpha=0.0001, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.757 total time=   0.4s\n[CV 4/5] END alpha=0.0001, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.810 total time=   0.5s\n[CV 1/5] END alpha=0.0001, loss=hinge, max_iter=10000, penalty=l2;, score=0.625 total time=   0.2s\n[CV 3/5] END alpha=0.0001, loss=hinge, max_iter=10000, penalty=l2;, score=0.573 total time=   0.2s\n[CV 1/5] END alpha=0.0001, loss=hinge, max_iter=10000, penalty=l1;, score=0.775 total time=   0.3s\n[CV 3/5] END alpha=0.0001, loss=hinge, max_iter=10000, penalty=l1;, score=0.758 total time=   0.3s\n[CV 1/5] END alpha=0.0001, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.556 total time=   0.4s\n[CV 3/5] END alpha=0.0001, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.511 total time=   0.4s\n[CV 4/5] END alpha=0.0001, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.824 total time=   0.4s\n[CV 3/5] END alpha=0.0001, loss=hinge, max_iter=30000, penalty=l2;, score=0.568 total time=   0.3s\n[CV 4/5] END alpha=0.0001, loss=hinge, max_iter=30000, penalty=l2;, score=0.488 total time=   0.2s\n[CV 1/5] END alpha=0.0001, loss=hinge, max_iter=30000, penalty=l1;, score=0.728 total time=   0.3s\n[CV 3/5] END alpha=0.0001, loss=hinge, max_iter=30000, penalty=l1;, score=0.788 total time=   0.2s\n[CV 5/5] END alpha=0.0001, loss=hinge, max_iter=30000, penalty=l1;, score=0.782 total time=   0.4s\n[CV 3/5] END alpha=0.0001, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.826 total time=   0.5s\n[CV 5/5] END alpha=0.0001, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.573 total time=   0.5s\n[CV 2/5] END alpha=0.0001, loss=log_loss, max_iter=1000, penalty=l2;, score=0.580 total time=   0.2s\n[CV 4/5] END alpha=0.0001, loss=log_loss, max_iter=1000, penalty=l2;, score=0.750 total time=   0.2s\n[CV 5/5] END alpha=0.0001, loss=log_loss, max_iter=1000, penalty=l2;, score=0.467 total time=   0.2s\n[CV 2/5] END alpha=0.0001, loss=log_loss, max_iter=1000, penalty=l1;, score=0.804 total time=   0.3s\n[CV 4/5] END alpha=0.0001, loss=log_loss, max_iter=1000, penalty=l1;, score=0.782 total time=   0.4s\n[CV 1/5] END alpha=0.0001, loss=log_loss, max_iter=1000, penalty=elasticnet;, score=0.557 total time=   0.6s\n[CV 3/5] END alpha=0.0001, loss=log_loss, max_iter=1000, penalty=elasticnet;, score=0.825 total time=   0.5s\n[CV 5/5] END alpha=0.0001, loss=log_loss, max_iter=1000, penalty=elasticnet;, score=0.656 total time=   0.4s\n[CV 3/5] END alpha=0.0001, loss=log_loss, max_iter=10000, penalty=l2;, score=0.542 total time=   0.2s\n[CV 5/5] END alpha=0.0001, loss=log_loss, max_iter=10000, penalty=l2;, score=0.521 total time=   0.2s\n[CV 2/5] END alpha=0.0001, loss=log_loss, max_iter=10000, penalty=l1;, score=0.809 total time=   0.4s\n[CV 4/5] END alpha=0.0001, loss=log_loss, max_iter=10000, penalty=l1;, score=0.710 total time=   0.5s\n[CV 1/5] END alpha=0.0001, loss=log_loss, max_iter=10000, penalty=elasticnet;, score=0.786 total time=   0.4s\n[CV 3/5] END alpha=0.0001, loss=log_loss, max_iter=10000, penalty=elasticnet;, score=0.518 total time=   0.5s\n[CV 5/5] END alpha=0.0001, loss=log_loss, max_iter=10000, penalty=elasticnet;, score=0.786 total time=   0.4s\n[CV 2/5] END alpha=0.0001, loss=log_loss, max_iter=30000, penalty=l2;, score=0.575 total time=   0.2s\n[CV 5/5] END alpha=0.0001, loss=log_loss, max_iter=30000, penalty=l2;, score=0.573 total time=   0.2s\n[CV 2/5] END alpha=0.0001, loss=log_loss, max_iter=30000, penalty=l1;, score=0.675 total time=   0.3s\n[CV 3/5] END alpha=0.0001, loss=log_loss, max_iter=30000, penalty=l1;, score=0.794 total time=   0.6s\n[CV 1/5] END alpha=0.0001, loss=log_loss, max_iter=30000, penalty=elasticnet;, score=0.508 total time=   0.5s\n[CV 3/5] END alpha=0.0001, loss=log_loss, max_iter=30000, penalty=elasticnet;, score=0.801 total time=   0.4s\n[CV 4/5] END alpha=0.0001, loss=log_loss, max_iter=30000, penalty=elasticnet;, score=0.491 total time=   0.4s\n[CV 1/5] END alpha=0.0001, loss=modified_huber, max_iter=1000, penalty=l2;, score=0.573 total time=   0.2s\n[CV 2/5] END alpha=0.0001, loss=modified_huber, max_iter=1000, penalty=l2;, score=0.604 total time=   0.2s\n[CV 3/5] END alpha=0.0001, loss=modified_huber, max_iter=1000, penalty=l2;, score=0.568 total time=   0.2s\n[CV 5/5] END alpha=0.0001, loss=modified_huber, max_iter=1000, penalty=l2;, score=0.484 total time=   0.2s\n[CV 2/5] END alpha=0.0001, loss=modified_huber, max_iter=1000, penalty=l1;, score=0.760 total time=   0.3s\n[CV 4/5] END alpha=0.0001, loss=modified_huber, max_iter=1000, penalty=l1;, score=0.778 total time=   0.4s\n[CV 1/5] END alpha=0.0001, loss=modified_huber, max_iter=1000, penalty=elasticnet;, score=0.474 total time=   0.4s\n[CV 3/5] END alpha=0.0001, loss=modified_huber, max_iter=1000, penalty=elasticnet;, score=0.573 total time=   0.4s\n[CV 5/5] END alpha=0.0001, loss=modified_huber, max_iter=1000, penalty=elasticnet;, score=0.714 total time=   0.3s\n[CV 2/5] END alpha=0.0001, loss=modified_huber, max_iter=10000, penalty=l2;, score=0.683 total time=   0.1s\n[CV 4/5] END alpha=0.0001, loss=modified_huber, max_iter=10000, penalty=l2;, score=0.495 total time=   0.1s\n[CV 1/5] END alpha=0.0001, loss=modified_huber, max_iter=10000, penalty=l1;, score=0.718 total time=   0.3s\n[CV 3/5] END alpha=0.0001, loss=modified_huber, max_iter=10000, penalty=l1;, score=0.792 total time=   0.3s\n[CV 4/5] END alpha=0.0001, loss=modified_huber, max_iter=10000, penalty=l1;, score=0.773 total time=   0.3s\n[CV 1/5] END alpha=0.0001, loss=modified_huber, max_iter=10000, penalty=elasticnet;, score=0.568 total time=   0.3s\n[CV 3/5] END alpha=0.0001, loss=modified_huber, max_iter=10000, penalty=elasticnet;, score=0.696 total time=   0.4s\n[CV 5/5] END alpha=0.0001, loss=modified_huber, max_iter=10000, penalty=elasticnet;, score=0.484 total time=   0.2s\n[CV 3/5] END alpha=0.0001, loss=modified_huber, max_iter=30000, penalty=l2;, score=0.803 total time=   0.2s\n[CV 5/5] END alpha=0.0001, loss=modified_huber, max_iter=30000, penalty=l2;, score=0.552 total time=   0.2s\n[CV 2/5] END alpha=0.0001, loss=modified_huber, max_iter=30000, penalty=l1;, score=0.795 total time=   0.4s\n[CV 4/5] END alpha=0.0001, loss=modified_huber, max_iter=30000, penalty=l1;, score=0.773 total time=   0.2s\n[CV 5/5] END alpha=0.0001, loss=modified_huber, max_iter=30000, penalty=l1;, score=0.773 total time=   0.5s\n[CV 2/5] END alpha=0.0001, loss=modified_huber, max_iter=30000, penalty=elasticnet;, score=0.727 total time=   0.4s\n[CV 5/5] END alpha=0.0001, loss=modified_huber, max_iter=30000, penalty=elasticnet;, score=0.569 total time=   0.3s\n[CV 1/5] END alpha=0.0001, loss=squared_hinge, max_iter=1000, penalty=l2;, score=0.769 total time=   0.1s\n[CV 3/5] END alpha=0.0001, loss=squared_hinge, max_iter=1000, penalty=l2;, score=0.575 total time=   0.2s\n[CV 5/5] END alpha=0.0001, loss=squared_hinge, max_iter=1000, penalty=l2;, score=0.730 total time=   0.3s\n[CV 2/5] END alpha=0.0001, loss=squared_hinge, max_iter=1000, penalty=l1;, score=0.754 total time=   0.3s\n[CV 4/5] END alpha=0.0001, loss=squared_hinge, max_iter=1000, penalty=l1;, score=0.780 total time=   0.3s\n[CV 1/5] END alpha=0.0001, loss=squared_hinge, max_iter=1000, penalty=elasticnet;, score=0.709 total time=   0.3s\n[CV 2/5] END alpha=0.0001, loss=squared_hinge, max_iter=1000, penalty=elasticnet;, score=0.602 total time=   0.5s\n[CV 5/5] END alpha=0.0001, loss=squared_hinge, max_iter=1000, penalty=elasticnet;, score=0.574 total time=   0.6s\n[CV 2/5] END alpha=0.0001, loss=squared_hinge, max_iter=10000, penalty=l2;, score=0.669 total time=   0.2s\n"},"10":{"name":"stdout","text":"[CV 2/5] END alpha=0.01, loss=squared_hinge, max_iter=30000, penalty=elasticnet;, score=0.733 total time=   0.4s\n[CV 4/5] END alpha=0.01, loss=squared_hinge, max_iter=30000, penalty=elasticnet;, score=0.828 total time=   0.5s\n[CV 1/5] END alpha=0.01, loss=perceptron, max_iter=1000, penalty=l2;, score=0.472 total time=   0.2s\n[CV 3/5] END alpha=0.01, loss=perceptron, max_iter=1000, penalty=l2;, score=0.600 total time=   0.1s\n[CV 5/5] END alpha=0.01, loss=perceptron, max_iter=1000, penalty=l2;, score=0.591 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=perceptron, max_iter=1000, penalty=l1;, score=0.798 total time=   0.1s\n[CV 5/5] END alpha=0.01, loss=perceptron, max_iter=1000, penalty=l1;, score=0.784 total time=   0.1s\n[CV 2/5] END alpha=0.01, loss=perceptron, max_iter=1000, penalty=elasticnet;, score=0.817 total time=   0.1s\n[CV 4/5] END alpha=0.01, loss=perceptron, max_iter=1000, penalty=elasticnet;, score=0.552 total time=   0.1s\n[CV 1/5] END alpha=0.01, loss=perceptron, max_iter=10000, penalty=l2;, score=0.656 total time=   0.2s\n[CV 3/5] END alpha=0.01, loss=perceptron, max_iter=10000, penalty=l2;, score=0.569 total time=   0.2s\n[CV 5/5] END alpha=0.01, loss=perceptron, max_iter=10000, penalty=l2;, score=0.568 total time=   0.3s\n[CV 3/5] END alpha=0.01, loss=perceptron, max_iter=10000, penalty=l1;, score=0.789 total time=   0.1s\n[CV 4/5] END alpha=0.01, loss=perceptron, max_iter=10000, penalty=l1;, score=0.765 total time=   0.1s\n[CV 1/5] END alpha=0.01, loss=perceptron, max_iter=10000, penalty=elasticnet;, score=0.850 total time=   0.2s\n[CV 3/5] END alpha=0.01, loss=perceptron, max_iter=10000, penalty=elasticnet;, score=0.731 total time=   0.1s\n[CV 5/5] END alpha=0.01, loss=perceptron, max_iter=10000, penalty=elasticnet;, score=0.851 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=perceptron, max_iter=30000, penalty=l2;, score=0.589 total time=   0.2s\n[CV 4/5] END alpha=0.01, loss=perceptron, max_iter=30000, penalty=l2;, score=0.806 total time=   0.2s\n[CV 1/5] END alpha=0.01, loss=perceptron, max_iter=30000, penalty=l1;, score=0.793 total time=   0.1s\n[CV 3/5] END alpha=0.01, loss=perceptron, max_iter=30000, penalty=l1;, score=0.791 total time=   0.2s\n[CV 5/5] END alpha=0.01, loss=perceptron, max_iter=30000, penalty=l1;, score=0.792 total time=   0.1s\n[CV 2/5] END alpha=0.01, loss=perceptron, max_iter=30000, penalty=elasticnet;, score=0.643 total time=   0.2s\n[CV 4/5] END alpha=0.01, loss=perceptron, max_iter=30000, penalty=elasticnet;, score=0.723 total time=   0.1s\n[CV 1/5] END alpha=0.1, loss=hinge, max_iter=1000, penalty=l2;, score=0.786 total time=   0.3s\n[CV 3/5] END alpha=0.1, loss=hinge, max_iter=1000, penalty=l2;, score=0.827 total time=   0.4s\n[CV 5/5] END alpha=0.1, loss=hinge, max_iter=1000, penalty=l2;, score=0.630 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=hinge, max_iter=1000, penalty=l1;, score=0.599 total time=   0.1s\n[CV 3/5] END alpha=0.1, loss=hinge, max_iter=1000, penalty=l1;, score=0.744 total time=   0.1s\n[CV 5/5] END alpha=0.1, loss=hinge, max_iter=1000, penalty=l1;, score=0.750 total time=   0.2s\n[CV 1/5] END alpha=0.1, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.733 total time=   0.2s\n[CV 3/5] END alpha=0.1, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.698 total time=   0.2s\n[CV 5/5] END alpha=0.1, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.693 total time=   0.4s\n[CV 2/5] END alpha=0.1, loss=hinge, max_iter=10000, penalty=l2;, score=0.496 total time=   0.3s\n[CV 5/5] END alpha=0.1, loss=hinge, max_iter=10000, penalty=l2;, score=0.757 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=hinge, max_iter=10000, penalty=l1;, score=0.674 total time=   0.2s\n[CV 5/5] END alpha=0.1, loss=hinge, max_iter=10000, penalty=l1;, score=0.558 total time=   0.3s\n[CV 1/5] END alpha=0.1, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.801 total time=   0.2s\n[CV 3/5] END alpha=0.1, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.749 total time=   0.2s\n[CV 5/5] END alpha=0.1, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.790 total time=   0.3s\n[CV 2/5] END alpha=0.1, loss=hinge, max_iter=30000, penalty=l2;, score=0.650 total time=   0.2s\n[CV 5/5] END alpha=0.1, loss=hinge, max_iter=30000, penalty=l2;, score=0.620 total time=   0.1s\n[CV 2/5] END alpha=0.1, loss=hinge, max_iter=30000, penalty=l1;, score=0.704 total time=   0.2s\n[CV 4/5] END alpha=0.1, loss=hinge, max_iter=30000, penalty=l1;, score=0.665 total time=   0.3s\n[CV 1/5] END alpha=0.1, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.526 total time=   0.2s\n[CV 3/5] END alpha=0.1, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.729 total time=   0.2s\n[CV 5/5] END alpha=0.1, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.637 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=log_loss, max_iter=1000, penalty=l2;, score=0.810 total time=   0.3s\n[CV 4/5] END alpha=0.1, loss=log_loss, max_iter=1000, penalty=l2;, score=0.638 total time=   0.5s\n[CV 1/5] END alpha=0.1, loss=log_loss, max_iter=1000, penalty=l1;, score=0.770 total time=   0.5s\n[CV 3/5] END alpha=0.1, loss=log_loss, max_iter=1000, penalty=l1;, score=0.762 total time=   0.3s\n[CV 5/5] END alpha=0.1, loss=log_loss, max_iter=1000, penalty=l1;, score=0.743 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=log_loss, max_iter=1000, penalty=elasticnet;, score=0.602 total time=   0.3s\n[CV 4/5] END alpha=0.1, loss=log_loss, max_iter=1000, penalty=elasticnet;, score=0.550 total time=   0.2s\n[CV 1/5] END alpha=0.1, loss=log_loss, max_iter=10000, penalty=l2;, score=0.597 total time=   0.3s\n[CV 3/5] END alpha=0.1, loss=log_loss, max_iter=10000, penalty=l2;, score=0.649 total time=   0.2s\n[CV 5/5] END alpha=0.1, loss=log_loss, max_iter=10000, penalty=l2;, score=0.581 total time=   0.3s\n[CV 1/5] END alpha=0.1, loss=log_loss, max_iter=10000, penalty=l1;, score=0.712 total time=   0.1s\n[CV 2/5] END alpha=0.1, loss=log_loss, max_iter=10000, penalty=l1;, score=0.720 total time=   0.1s\n[CV 4/5] END alpha=0.1, loss=log_loss, max_iter=10000, penalty=l1;, score=0.707 total time=   0.3s\n[CV 2/5] END alpha=0.1, loss=log_loss, max_iter=10000, penalty=elasticnet;, score=0.654 total time=   0.2s\n[CV 3/5] END alpha=0.1, loss=log_loss, max_iter=10000, penalty=elasticnet;, score=0.521 total time=   0.3s\n[CV 5/5] END alpha=0.1, loss=log_loss, max_iter=10000, penalty=elasticnet;, score=0.764 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=log_loss, max_iter=30000, penalty=l2;, score=0.521 total time=   0.2s\n[CV 3/5] END alpha=0.1, loss=log_loss, max_iter=30000, penalty=l2;, score=0.567 total time=   0.2s\n[CV 5/5] END alpha=0.1, loss=log_loss, max_iter=30000, penalty=l2;, score=0.811 total time=   0.3s\n[CV 3/5] END alpha=0.1, loss=log_loss, max_iter=30000, penalty=l1;, score=0.719 total time=   0.2s\n[CV 4/5] END alpha=0.1, loss=log_loss, max_iter=30000, penalty=l1;, score=0.775 total time=   0.3s\n[CV 2/5] END alpha=0.1, loss=log_loss, max_iter=30000, penalty=elasticnet;, score=0.489 total time=   0.2s\n[CV 4/5] END alpha=0.1, loss=log_loss, max_iter=30000, penalty=elasticnet;, score=0.787 total time=   0.2s\n[CV 1/5] END alpha=0.1, loss=modified_huber, max_iter=1000, penalty=l2;, score=0.708 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=modified_huber, max_iter=1000, penalty=l2;, score=0.573 total time=   0.3s\n[CV 5/5] END alpha=0.1, loss=modified_huber, max_iter=1000, penalty=l2;, score=0.746 total time=   0.1s\n[CV 2/5] END alpha=0.1, loss=modified_huber, max_iter=1000, penalty=l1;, score=0.788 total time=   0.1s\n[CV 3/5] END alpha=0.1, loss=modified_huber, max_iter=1000, penalty=l1;, score=0.752 total time=   0.1s\n[CV 4/5] END alpha=0.1, loss=modified_huber, max_iter=1000, penalty=l1;, score=0.747 total time=   0.1s\n[CV 1/5] END alpha=0.1, loss=modified_huber, max_iter=1000, penalty=elasticnet;, score=0.851 total time=   0.2s\n[CV 3/5] END alpha=0.1, loss=modified_huber, max_iter=1000, penalty=elasticnet;, score=0.646 total time=   0.1s\n[CV 5/5] END alpha=0.1, loss=modified_huber, max_iter=1000, penalty=elasticnet;, score=0.437 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=modified_huber, max_iter=10000, penalty=l2;, score=0.638 total time=   0.2s\n"},"11":{"name":"stdout","text":"[CV 5/5] END alpha=0.1, loss=modified_huber, max_iter=1000, penalty=l1;, score=0.756 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=modified_huber, max_iter=1000, penalty=elasticnet;, score=0.673 total time=   0.1s\n[CV 4/5] END alpha=0.1, loss=modified_huber, max_iter=1000, penalty=elasticnet;, score=0.773 total time=   0.1s\n[CV 1/5] END alpha=0.1, loss=modified_huber, max_iter=10000, penalty=l2;, score=0.573 total time=   0.2s\n[CV 3/5] END alpha=0.1, loss=modified_huber, max_iter=10000, penalty=l2;, score=0.506 total time=   0.2s\n[CV 1/5] END alpha=0.1, loss=modified_huber, max_iter=10000, penalty=l1;, score=0.771 total time=   0.5s\n[CV 4/5] END alpha=0.1, loss=modified_huber, max_iter=10000, penalty=l1;, score=0.760 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=modified_huber, max_iter=10000, penalty=elasticnet;, score=0.857 total time=   0.2s\n[CV 4/5] END alpha=0.1, loss=modified_huber, max_iter=10000, penalty=elasticnet;, score=0.825 total time=   0.2s\n[CV 1/5] END alpha=0.1, loss=modified_huber, max_iter=30000, penalty=l2;, score=0.663 total time=   0.2s\n[CV 3/5] END alpha=0.1, loss=modified_huber, max_iter=30000, penalty=l2;, score=0.568 total time=   0.2s\n[CV 5/5] END alpha=0.1, loss=modified_huber, max_iter=30000, penalty=l2;, score=0.729 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=modified_huber, max_iter=30000, penalty=l1;, score=0.783 total time=   0.3s\n[CV 4/5] END alpha=0.1, loss=modified_huber, max_iter=30000, penalty=l1;, score=0.729 total time=   0.5s\n[CV 5/5] END alpha=0.1, loss=modified_huber, max_iter=30000, penalty=l1;, score=0.782 total time=   0.6s\n[CV 1/5] END alpha=0.1, loss=modified_huber, max_iter=30000, penalty=elasticnet;, score=0.495 total time=   0.1s\n[CV 3/5] END alpha=0.1, loss=modified_huber, max_iter=30000, penalty=elasticnet;, score=0.676 total time=   0.1s\n[CV 5/5] END alpha=0.1, loss=modified_huber, max_iter=30000, penalty=elasticnet;, score=0.728 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=squared_hinge, max_iter=1000, penalty=l2;, score=0.574 total time=   0.2s\n[CV 4/5] END alpha=0.1, loss=squared_hinge, max_iter=1000, penalty=l2;, score=0.643 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=squared_hinge, max_iter=1000, penalty=l1;, score=0.771 total time=   0.4s\n[CV 4/5] END alpha=0.1, loss=squared_hinge, max_iter=1000, penalty=l1;, score=0.766 total time=   0.4s\n[CV 5/5] END alpha=0.1, loss=squared_hinge, max_iter=1000, penalty=l1;, score=0.776 total time=   0.3s\n[CV 2/5] END alpha=0.1, loss=squared_hinge, max_iter=1000, penalty=elasticnet;, score=0.613 total time=   0.3s\n[CV 4/5] END alpha=0.1, loss=squared_hinge, max_iter=1000, penalty=elasticnet;, score=0.811 total time=   0.4s\n[CV 1/5] END alpha=0.1, loss=squared_hinge, max_iter=10000, penalty=l2;, score=0.699 total time=   0.1s\n[CV 2/5] END alpha=0.1, loss=squared_hinge, max_iter=10000, penalty=l2;, score=0.503 total time=   0.2s\n[CV 3/5] END alpha=0.1, loss=squared_hinge, max_iter=10000, penalty=l2;, score=0.606 total time=   0.2s\n[CV 5/5] END alpha=0.1, loss=squared_hinge, max_iter=10000, penalty=l2;, score=0.676 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=squared_hinge, max_iter=10000, penalty=l1;, score=0.795 total time=   0.3s\n[CV 3/5] END alpha=0.1, loss=squared_hinge, max_iter=10000, penalty=l1;, score=0.694 total time=   0.3s\n[CV 5/5] END alpha=0.1, loss=squared_hinge, max_iter=10000, penalty=l1;, score=0.780 total time=   0.4s\n[CV 1/5] END alpha=0.1, loss=squared_hinge, max_iter=10000, penalty=elasticnet;, score=0.496 total time=   0.3s\n[CV 2/5] END alpha=0.1, loss=squared_hinge, max_iter=10000, penalty=elasticnet;, score=0.682 total time=   0.3s\n[CV 3/5] END alpha=0.1, loss=squared_hinge, max_iter=10000, penalty=elasticnet;, score=0.531 total time=   0.3s\n[CV 4/5] END alpha=0.1, loss=squared_hinge, max_iter=10000, penalty=elasticnet;, score=0.653 total time=   0.6s\n[CV 1/5] END alpha=0.1, loss=squared_hinge, max_iter=30000, penalty=l2;, score=0.612 total time=   0.2s\n[CV 3/5] END alpha=0.1, loss=squared_hinge, max_iter=30000, penalty=l2;, score=0.715 total time=   0.2s\n[CV 5/5] END alpha=0.1, loss=squared_hinge, max_iter=30000, penalty=l2;, score=0.545 total time=   0.1s\n[CV 2/5] END alpha=0.1, loss=squared_hinge, max_iter=30000, penalty=l1;, score=0.771 total time=   0.4s\n[CV 4/5] END alpha=0.1, loss=squared_hinge, max_iter=30000, penalty=l1;, score=0.732 total time=   0.2s\n[CV 1/5] END alpha=0.1, loss=squared_hinge, max_iter=30000, penalty=elasticnet;, score=0.568 total time=   0.3s\n[CV 3/5] END alpha=0.1, loss=squared_hinge, max_iter=30000, penalty=elasticnet;, score=0.613 total time=   0.3s\n[CV 5/5] END alpha=0.1, loss=squared_hinge, max_iter=30000, penalty=elasticnet;, score=0.812 total time=   0.4s\n[CV 2/5] END alpha=0.1, loss=perceptron, max_iter=1000, penalty=l2;, score=0.569 total time=   0.2s\n[CV 4/5] END alpha=0.1, loss=perceptron, max_iter=1000, penalty=l2;, score=0.576 total time=   0.1s\n[CV 1/5] END alpha=0.1, loss=perceptron, max_iter=1000, penalty=l1;, score=0.453 total time=   0.1s\n[CV 2/5] END alpha=0.1, loss=perceptron, max_iter=1000, penalty=l1;, score=0.711 total time=   0.3s\n[CV 5/5] END alpha=0.1, loss=perceptron, max_iter=1000, penalty=l1;, score=0.560 total time=   0.1s\n[CV 2/5] END alpha=0.1, loss=perceptron, max_iter=1000, penalty=elasticnet;, score=0.494 total time=   0.1s\n[CV 3/5] END alpha=0.1, loss=perceptron, max_iter=1000, penalty=elasticnet;, score=0.578 total time=   0.1s\n[CV 5/5] END alpha=0.1, loss=perceptron, max_iter=1000, penalty=elasticnet;, score=0.671 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=perceptron, max_iter=10000, penalty=l2;, score=0.568 total time=   0.2s\n[CV 4/5] END alpha=0.1, loss=perceptron, max_iter=10000, penalty=l2;, score=0.711 total time=   0.2s\n[CV 1/5] END alpha=0.1, loss=perceptron, max_iter=10000, penalty=l1;, score=0.719 total time=   0.3s\n[CV 3/5] END alpha=0.1, loss=perceptron, max_iter=10000, penalty=l1;, score=0.658 total time=   0.1s\n[CV 4/5] END alpha=0.1, loss=perceptron, max_iter=10000, penalty=l1;, score=0.572 total time=   0.3s\n[CV 2/5] END alpha=0.1, loss=perceptron, max_iter=10000, penalty=elasticnet;, score=0.467 total time=   0.2s\n[CV 4/5] END alpha=0.1, loss=perceptron, max_iter=10000, penalty=elasticnet;, score=0.818 total time=   0.2s\n[CV 1/5] END alpha=0.1, loss=perceptron, max_iter=30000, penalty=l2;, score=0.776 total time=   0.1s\n[CV 3/5] END alpha=0.1, loss=perceptron, max_iter=30000, penalty=l2;, score=0.760 total time=   0.2s\n[CV 5/5] END alpha=0.1, loss=perceptron, max_iter=30000, penalty=l2;, score=0.637 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=perceptron, max_iter=30000, penalty=l1;, score=0.710 total time=   0.1s\n[CV 3/5] END alpha=0.1, loss=perceptron, max_iter=30000, penalty=l1;, score=0.737 total time=   0.3s\n[CV 5/5] END alpha=0.1, loss=perceptron, max_iter=30000, penalty=l1;, score=0.479 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=perceptron, max_iter=30000, penalty=elasticnet;, score=0.483 total time=   0.2s\n[CV 4/5] END alpha=0.1, loss=perceptron, max_iter=30000, penalty=elasticnet;, score=0.677 total time=   0.2s\n[CV 1/5] END alpha=1.0, loss=hinge, max_iter=1000, penalty=l2;, score=0.696 total time=   0.2s\n[CV 3/5] END alpha=1.0, loss=hinge, max_iter=1000, penalty=l2;, score=0.568 total time=   0.2s\n[CV 5/5] END alpha=1.0, loss=hinge, max_iter=1000, penalty=l2;, score=0.644 total time=   0.1s\n[CV 2/5] END alpha=1.0, loss=hinge, max_iter=1000, penalty=l1;, score=0.577 total time=   2.7s\n[CV 1/5] END alpha=1.0, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.566 total time=   0.2s\n[CV 2/5] END alpha=1.0, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.506 total time=   0.2s\n[CV 3/5] END alpha=1.0, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.566 total time=   0.3s\n[CV 5/5] END alpha=1.0, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.517 total time=   0.1s\n[CV 2/5] END alpha=1.0, loss=hinge, max_iter=10000, penalty=l2;, score=0.581 total time=   0.2s\n[CV 4/5] END alpha=1.0, loss=hinge, max_iter=10000, penalty=l2;, score=0.653 total time=   0.2s\n[CV 1/5] END alpha=1.0, loss=hinge, max_iter=10000, penalty=l1;, score=0.540 total time=   0.2s\n"},"12":{"name":"stdout","text":"[CV 4/5] END alpha=0.1, loss=modified_huber, max_iter=10000, penalty=l2;, score=0.739 total time=   0.1s\n[CV 5/5] END alpha=0.1, loss=modified_huber, max_iter=10000, penalty=l2;, score=0.718 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=modified_huber, max_iter=10000, penalty=l1;, score=0.752 total time=   0.2s\n[CV 3/5] END alpha=0.1, loss=modified_huber, max_iter=10000, penalty=l1;, score=0.792 total time=   0.2s\n[CV 5/5] END alpha=0.1, loss=modified_huber, max_iter=10000, penalty=l1;, score=0.785 total time=   0.2s\n[CV 1/5] END alpha=0.1, loss=modified_huber, max_iter=10000, penalty=elasticnet;, score=0.773 total time=   0.1s\n[CV 3/5] END alpha=0.1, loss=modified_huber, max_iter=10000, penalty=elasticnet;, score=0.556 total time=   0.1s\n[CV 5/5] END alpha=0.1, loss=modified_huber, max_iter=10000, penalty=elasticnet;, score=0.694 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=modified_huber, max_iter=30000, penalty=l2;, score=0.807 total time=   0.2s\n[CV 4/5] END alpha=0.1, loss=modified_huber, max_iter=30000, penalty=l2;, score=0.468 total time=   0.2s\n[CV 1/5] END alpha=0.1, loss=modified_huber, max_iter=30000, penalty=l1;, score=0.789 total time=   0.1s\n[CV 3/5] END alpha=0.1, loss=modified_huber, max_iter=30000, penalty=l1;, score=0.709 total time=   1.3s\n[CV 2/5] END alpha=0.1, loss=modified_huber, max_iter=30000, penalty=elasticnet;, score=0.629 total time=   0.1s\n[CV 4/5] END alpha=0.1, loss=modified_huber, max_iter=30000, penalty=elasticnet;, score=0.793 total time=   0.1s\n[CV 1/5] END alpha=0.1, loss=squared_hinge, max_iter=1000, penalty=l2;, score=0.487 total time=   0.2s\n[CV 3/5] END alpha=0.1, loss=squared_hinge, max_iter=1000, penalty=l2;, score=0.583 total time=   0.2s\n[CV 5/5] END alpha=0.1, loss=squared_hinge, max_iter=1000, penalty=l2;, score=0.514 total time=   0.1s\n[CV 1/5] END alpha=0.1, loss=squared_hinge, max_iter=1000, penalty=l1;, score=0.750 total time=   0.3s\n[CV 3/5] END alpha=0.1, loss=squared_hinge, max_iter=1000, penalty=l1;, score=0.706 total time=   0.5s\n[CV 1/5] END alpha=0.1, loss=squared_hinge, max_iter=1000, penalty=elasticnet;, score=0.827 total time=   0.4s\n[CV 3/5] END alpha=0.1, loss=squared_hinge, max_iter=1000, penalty=elasticnet;, score=0.605 total time=   0.5s\n[CV 5/5] END alpha=0.1, loss=squared_hinge, max_iter=1000, penalty=elasticnet;, score=0.839 total time=   0.5s\n[CV 4/5] END alpha=0.1, loss=squared_hinge, max_iter=10000, penalty=l2;, score=0.752 total time=   0.3s\n[CV 1/5] END alpha=0.1, loss=squared_hinge, max_iter=10000, penalty=l1;, score=0.705 total time=   0.4s\n[CV 4/5] END alpha=0.1, loss=squared_hinge, max_iter=10000, penalty=l1;, score=0.594 total time=   1.8s\n[CV 5/5] END alpha=0.1, loss=squared_hinge, max_iter=10000, penalty=elasticnet;, score=0.582 total time=   0.3s\n[CV 2/5] END alpha=0.1, loss=squared_hinge, max_iter=30000, penalty=l2;, score=0.783 total time=   0.2s\n[CV 4/5] END alpha=0.1, loss=squared_hinge, max_iter=30000, penalty=l2;, score=0.755 total time=   0.2s\n[CV 1/5] END alpha=0.1, loss=squared_hinge, max_iter=30000, penalty=l1;, score=0.734 total time=   0.3s\n[CV 3/5] END alpha=0.1, loss=squared_hinge, max_iter=30000, penalty=l1;, score=0.749 total time=   0.3s\n[CV 5/5] END alpha=0.1, loss=squared_hinge, max_iter=30000, penalty=l1;, score=0.664 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=squared_hinge, max_iter=30000, penalty=elasticnet;, score=0.687 total time=   0.3s\n[CV 4/5] END alpha=0.1, loss=squared_hinge, max_iter=30000, penalty=elasticnet;, score=0.822 total time=   0.4s\n[CV 1/5] END alpha=0.1, loss=perceptron, max_iter=1000, penalty=l2;, score=0.579 total time=   0.3s\n[CV 3/5] END alpha=0.1, loss=perceptron, max_iter=1000, penalty=l2;, score=0.617 total time=   0.2s\n[CV 5/5] END alpha=0.1, loss=perceptron, max_iter=1000, penalty=l2;, score=0.509 total time=   0.2s\n[CV 3/5] END alpha=0.1, loss=perceptron, max_iter=1000, penalty=l1;, score=0.668 total time=   0.2s\n[CV 4/5] END alpha=0.1, loss=perceptron, max_iter=1000, penalty=l1;, score=0.731 total time=   0.2s\n[CV 1/5] END alpha=0.1, loss=perceptron, max_iter=1000, penalty=elasticnet;, score=0.675 total time=   0.2s\n[CV 4/5] END alpha=0.1, loss=perceptron, max_iter=1000, penalty=elasticnet;, score=0.765 total time=   0.1s\n[CV 1/5] END alpha=0.1, loss=perceptron, max_iter=10000, penalty=l2;, score=0.572 total time=   0.3s\n[CV 3/5] END alpha=0.1, loss=perceptron, max_iter=10000, penalty=l2;, score=0.834 total time=   0.2s\n[CV 5/5] END alpha=0.1, loss=perceptron, max_iter=10000, penalty=l2;, score=0.610 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=perceptron, max_iter=10000, penalty=l1;, score=0.720 total time=   0.3s\n[CV 5/5] END alpha=0.1, loss=perceptron, max_iter=10000, penalty=l1;, score=0.740 total time=   0.2s\n[CV 1/5] END alpha=0.1, loss=perceptron, max_iter=10000, penalty=elasticnet;, score=0.486 total time=   0.2s\n[CV 3/5] END alpha=0.1, loss=perceptron, max_iter=10000, penalty=elasticnet;, score=0.653 total time=   0.2s\n[CV 5/5] END alpha=0.1, loss=perceptron, max_iter=10000, penalty=elasticnet;, score=0.693 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=perceptron, max_iter=30000, penalty=l2;, score=0.566 total time=   0.2s\n[CV 4/5] END alpha=0.1, loss=perceptron, max_iter=30000, penalty=l2;, score=0.575 total time=   0.2s\n[CV 1/5] END alpha=0.1, loss=perceptron, max_iter=30000, penalty=l1;, score=0.716 total time=   0.5s\n[CV 4/5] END alpha=0.1, loss=perceptron, max_iter=30000, penalty=l1;, score=0.670 total time=   0.3s\n[CV 1/5] END alpha=0.1, loss=perceptron, max_iter=30000, penalty=elasticnet;, score=0.777 total time=   0.1s\n[CV 3/5] END alpha=0.1, loss=perceptron, max_iter=30000, penalty=elasticnet;, score=0.757 total time=   0.2s\n[CV 5/5] END alpha=0.1, loss=perceptron, max_iter=30000, penalty=elasticnet;, score=0.772 total time=   0.2s\n[CV 2/5] END alpha=1.0, loss=hinge, max_iter=1000, penalty=l2;, score=0.766 total time=   0.2s\n[CV 4/5] END alpha=1.0, loss=hinge, max_iter=1000, penalty=l2;, score=0.655 total time=   0.1s\n[CV 1/5] END alpha=1.0, loss=hinge, max_iter=1000, penalty=l1;, score=0.566 total time=   0.2s\n[CV 3/5] END alpha=1.0, loss=hinge, max_iter=1000, penalty=l1;, score=0.555 total time=   0.4s\n[CV 4/5] END alpha=1.0, loss=hinge, max_iter=1000, penalty=l1;, score=0.565 total time=   0.2s\n[CV 5/5] END alpha=1.0, loss=hinge, max_iter=1000, penalty=l1;, score=0.560 total time=   2.5s\n[CV 4/5] END alpha=1.0, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.567 total time=   0.3s\n[CV 1/5] END alpha=1.0, loss=hinge, max_iter=10000, penalty=l2;, score=0.785 total time=   0.2s\n[CV 3/5] END alpha=1.0, loss=hinge, max_iter=10000, penalty=l2;, score=0.588 total time=   0.1s\n[CV 5/5] END alpha=1.0, loss=hinge, max_iter=10000, penalty=l2;, score=0.692 total time=   0.2s\n[CV 2/5] END alpha=1.0, loss=hinge, max_iter=10000, penalty=l1;, score=0.461 total time=   0.2s\n[CV 4/5] END alpha=1.0, loss=hinge, max_iter=10000, penalty=l1;, score=0.480 total time=   0.3s\n[CV 2/5] END alpha=1.0, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.636 total time=   0.3s\n[CV 4/5] END alpha=1.0, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.461 total time=   0.2s\n[CV 5/5] END alpha=1.0, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.503 total time=   0.3s\n[CV 3/5] END alpha=1.0, loss=hinge, max_iter=30000, penalty=l2;, score=0.674 total time=   0.2s\n[CV 5/5] END alpha=1.0, loss=hinge, max_iter=30000, penalty=l2;, score=0.565 total time=   0.1s\n[CV 1/5] END alpha=1.0, loss=hinge, max_iter=30000, penalty=l1;, score=0.566 total time=   0.2s\n[CV 3/5] END alpha=1.0, loss=hinge, max_iter=30000, penalty=l1;, score=0.566 total time=   0.4s\n[CV 4/5] END alpha=1.0, loss=hinge, max_iter=30000, penalty=l1;, score=0.577 total time=   0.3s\n[CV 5/5] END alpha=1.0, loss=hinge, max_iter=30000, penalty=l1;, score=0.493 total time=   0.2s\n[CV 1/5] END alpha=1.0, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.566 total time=   0.2s\n[CV 2/5] END alpha=1.0, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.566 total time=   0.3s\n[CV 3/5] END alpha=1.0, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.566 total time=   0.2s\n"},"13":{"more_output":true},"2":{"name":"stdout","text":"[CV 1/5] END alpha=0.0001, loss=hinge, max_iter=1000, penalty=l2;, score=0.571 total time=   0.3s\n[CV 3/5] END alpha=0.0001, loss=hinge, max_iter=1000, penalty=l2;, score=0.630 total time=   0.2s\n[CV 1/5] END alpha=0.0001, loss=hinge, max_iter=1000, penalty=l1;, score=0.758 total time=   0.3s\n[CV 3/5] END alpha=0.0001, loss=hinge, max_iter=1000, penalty=l1;, score=0.717 total time=   0.6s\n[CV 1/5] END alpha=0.0001, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.632 total time=   0.4s\n[CV 3/5] END alpha=0.0001, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.572 total time=   0.3s\n[CV 5/5] END alpha=0.0001, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.818 total time=   0.5s\n[CV 2/5] END alpha=0.0001, loss=hinge, max_iter=10000, penalty=l2;, score=0.709 total time=   0.2s\n[CV 4/5] END alpha=0.0001, loss=hinge, max_iter=10000, penalty=l2;, score=0.800 total time=   0.2s\n[CV 5/5] END alpha=0.0001, loss=hinge, max_iter=10000, penalty=l2;, score=0.670 total time=   0.1s\n[CV 2/5] END alpha=0.0001, loss=hinge, max_iter=10000, penalty=l1;, score=0.805 total time=   0.2s\n[CV 4/5] END alpha=0.0001, loss=hinge, max_iter=10000, penalty=l1;, score=0.729 total time=   0.3s\n[CV 5/5] END alpha=0.0001, loss=hinge, max_iter=10000, penalty=l1;, score=0.745 total time=   0.2s\n[CV 2/5] END alpha=0.0001, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.847 total time=   0.5s\n[CV 5/5] END alpha=0.0001, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.494 total time=   0.3s\n[CV 1/5] END alpha=0.0001, loss=hinge, max_iter=30000, penalty=l2;, score=0.636 total time=   0.2s\n[CV 2/5] END alpha=0.0001, loss=hinge, max_iter=30000, penalty=l2;, score=0.574 total time=   0.3s\n[CV 5/5] END alpha=0.0001, loss=hinge, max_iter=30000, penalty=l2;, score=0.676 total time=   0.2s\n[CV 2/5] END alpha=0.0001, loss=hinge, max_iter=30000, penalty=l1;, score=0.748 total time=   0.3s\n[CV 4/5] END alpha=0.0001, loss=hinge, max_iter=30000, penalty=l1;, score=0.778 total time=   0.3s\n[CV 1/5] END alpha=0.0001, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.569 total time=   0.3s\n[CV 2/5] END alpha=0.0001, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.785 total time=   0.5s\n[CV 4/5] END alpha=0.0001, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.726 total time=   0.5s\n[CV 1/5] END alpha=0.0001, loss=log_loss, max_iter=1000, penalty=l2;, score=0.600 total time=   0.2s\n[CV 3/5] END alpha=0.0001, loss=log_loss, max_iter=1000, penalty=l2;, score=0.569 total time=   0.3s\n[CV 1/5] END alpha=0.0001, loss=log_loss, max_iter=1000, penalty=l1;, score=0.614 total time=   0.3s\n[CV 3/5] END alpha=0.0001, loss=log_loss, max_iter=1000, penalty=l1;, score=0.795 total time=   0.4s\n[CV 5/5] END alpha=0.0001, loss=log_loss, max_iter=1000, penalty=l1;, score=0.687 total time=   0.6s\n[CV 2/5] END alpha=0.0001, loss=log_loss, max_iter=1000, penalty=elasticnet;, score=0.586 total time=   0.3s\n[CV 4/5] END alpha=0.0001, loss=log_loss, max_iter=1000, penalty=elasticnet;, score=0.812 total time=   0.4s\n[CV 1/5] END alpha=0.0001, loss=log_loss, max_iter=10000, penalty=l2;, score=0.678 total time=   0.2s\n[CV 2/5] END alpha=0.0001, loss=log_loss, max_iter=10000, penalty=l2;, score=0.503 total time=   0.3s\n[CV 4/5] END alpha=0.0001, loss=log_loss, max_iter=10000, penalty=l2;, score=0.523 total time=   0.2s\n[CV 1/5] END alpha=0.0001, loss=log_loss, max_iter=10000, penalty=l1;, score=0.792 total time=   0.3s\n[CV 3/5] END alpha=0.0001, loss=log_loss, max_iter=10000, penalty=l1;, score=0.782 total time=   0.3s\n[CV 5/5] END alpha=0.0001, loss=log_loss, max_iter=10000, penalty=l1;, score=0.803 total time=   0.4s\n[CV 2/5] END alpha=0.0001, loss=log_loss, max_iter=10000, penalty=elasticnet;, score=0.461 total time=   0.4s\n[CV 4/5] END alpha=0.0001, loss=log_loss, max_iter=10000, penalty=elasticnet;, score=0.591 total time=   0.5s\n[CV 1/5] END alpha=0.0001, loss=log_loss, max_iter=30000, penalty=l2;, score=0.536 total time=   0.2s\n[CV 3/5] END alpha=0.0001, loss=log_loss, max_iter=30000, penalty=l2;, score=0.620 total time=   0.2s\n[CV 4/5] END alpha=0.0001, loss=log_loss, max_iter=30000, penalty=l2;, score=0.643 total time=   0.2s\n[CV 1/5] END alpha=0.0001, loss=log_loss, max_iter=30000, penalty=l1;, score=0.798 total time=   0.5s\n[CV 4/5] END alpha=0.0001, loss=log_loss, max_iter=30000, penalty=l1;, score=0.714 total time=   0.4s\n[CV 5/5] END alpha=0.0001, loss=log_loss, max_iter=30000, penalty=l1;, score=0.801 total time=   0.4s\n[CV 2/5] END alpha=0.0001, loss=log_loss, max_iter=30000, penalty=elasticnet;, score=0.569 total time=   0.5s\n[CV 5/5] END alpha=0.0001, loss=log_loss, max_iter=30000, penalty=elasticnet;, score=0.533 total time=   0.9s\n[CV 4/5] END alpha=0.0001, loss=modified_huber, max_iter=1000, penalty=l2;, score=0.566 total time=   0.1s\n[CV 1/5] END alpha=0.0001, loss=modified_huber, max_iter=1000, penalty=l1;, score=0.771 total time=   0.3s\n[CV 3/5] END alpha=0.0001, loss=modified_huber, max_iter=1000, penalty=l1;, score=0.792 total time=   0.4s\n[CV 5/5] END alpha=0.0001, loss=modified_huber, max_iter=1000, penalty=l1;, score=0.781 total time=   0.4s\n[CV 2/5] END alpha=0.0001, loss=modified_huber, max_iter=1000, penalty=elasticnet;, score=0.770 total time=   0.3s\n[CV 4/5] END alpha=0.0001, loss=modified_huber, max_iter=1000, penalty=elasticnet;, score=0.639 total time=   0.4s\n[CV 1/5] END alpha=0.0001, loss=modified_huber, max_iter=10000, penalty=l2;, score=0.819 total time=   0.2s\n[CV 3/5] END alpha=0.0001, loss=modified_huber, max_iter=10000, penalty=l2;, score=0.771 total time=   0.1s\n[CV 5/5] END alpha=0.0001, loss=modified_huber, max_iter=10000, penalty=l2;, score=0.501 total time=   0.2s\n[CV 2/5] END alpha=0.0001, loss=modified_huber, max_iter=10000, penalty=l1;, score=0.808 total time=   0.4s\n[CV 5/5] END alpha=0.0001, loss=modified_huber, max_iter=10000, penalty=l1;, score=0.786 total time=   0.4s\n[CV 2/5] END alpha=0.0001, loss=modified_huber, max_iter=10000, penalty=elasticnet;, score=0.673 total time=   0.3s\n[CV 4/5] END alpha=0.0001, loss=modified_huber, max_iter=10000, penalty=elasticnet;, score=0.726 total time=   0.2s\n[CV 1/5] END alpha=0.0001, loss=modified_huber, max_iter=30000, penalty=l2;, score=0.653 total time=   0.1s\n[CV 2/5] END alpha=0.0001, loss=modified_huber, max_iter=30000, penalty=l2;, score=0.576 total time=   0.2s\n[CV 4/5] END alpha=0.0001, loss=modified_huber, max_iter=30000, penalty=l2;, score=0.743 total time=   0.2s\n[CV 1/5] END alpha=0.0001, loss=modified_huber, max_iter=30000, penalty=l1;, score=0.747 total time=   0.5s\n[CV 3/5] END alpha=0.0001, loss=modified_huber, max_iter=30000, penalty=l1;, score=0.796 total time=   0.4s\n[CV 1/5] END alpha=0.0001, loss=modified_huber, max_iter=30000, penalty=elasticnet;, score=0.496 total time=   0.4s\n[CV 3/5] END alpha=0.0001, loss=modified_huber, max_iter=30000, penalty=elasticnet;, score=0.708 total time=   0.4s\n[CV 4/5] END alpha=0.0001, loss=modified_huber, max_iter=30000, penalty=elasticnet;, score=0.813 total time=   0.4s\n[CV 2/5] END alpha=0.0001, loss=squared_hinge, max_iter=1000, penalty=l2;, score=0.531 total time=   0.2s\n[CV 4/5] END alpha=0.0001, loss=squared_hinge, max_iter=1000, penalty=l2;, score=0.505 total time=   0.3s\n[CV 1/5] END alpha=0.0001, loss=squared_hinge, max_iter=1000, penalty=l1;, score=0.720 total time=   0.3s\n[CV 3/5] END alpha=0.0001, loss=squared_hinge, max_iter=1000, penalty=l1;, score=0.674 total time=   0.3s\n[CV 5/5] END alpha=0.0001, loss=squared_hinge, max_iter=1000, penalty=l1;, score=0.684 total time=   0.4s\n[CV 3/5] END alpha=0.0001, loss=squared_hinge, max_iter=1000, penalty=elasticnet;, score=0.592 total time=   0.5s\n[CV 4/5] END alpha=0.0001, loss=squared_hinge, max_iter=1000, penalty=elasticnet;, score=0.501 total time=   0.5s\n[CV 1/5] END alpha=0.0001, loss=squared_hinge, max_iter=10000, penalty=l2;, score=0.787 total time=   0.2s\n[CV 3/5] END alpha=0.0001, loss=squared_hinge, max_iter=10000, penalty=l2;, score=0.452 total time=   0.2s\n[CV 5/5] END alpha=0.0001, loss=squared_hinge, max_iter=10000, penalty=l2;, score=0.554 total time=   0.2s\n"},"3":{"name":"stdout","text":"[CV 4/5] END alpha=0.0001, loss=squared_hinge, max_iter=10000, penalty=l2;, score=0.611 total time=   0.1s\n[CV 1/5] END alpha=0.0001, loss=squared_hinge, max_iter=10000, penalty=l1;, score=0.734 total time=   0.4s\n[CV 3/5] END alpha=0.0001, loss=squared_hinge, max_iter=10000, penalty=l1;, score=0.783 total time=   0.3s\n[CV 5/5] END alpha=0.0001, loss=squared_hinge, max_iter=10000, penalty=l1;, score=0.777 total time=   0.3s\n[CV 2/5] END alpha=0.0001, loss=squared_hinge, max_iter=10000, penalty=elasticnet;, score=0.468 total time=   0.4s\n[CV 4/5] END alpha=0.0001, loss=squared_hinge, max_iter=10000, penalty=elasticnet;, score=0.792 total time=   0.4s\n[CV 1/5] END alpha=0.0001, loss=squared_hinge, max_iter=30000, penalty=l2;, score=0.717 total time=   0.1s\n[CV 3/5] END alpha=0.0001, loss=squared_hinge, max_iter=30000, penalty=l2;, score=0.588 total time=   0.1s\n[CV 4/5] END alpha=0.0001, loss=squared_hinge, max_iter=30000, penalty=l2;, score=0.656 total time=   0.2s\n[CV 1/5] END alpha=0.0001, loss=squared_hinge, max_iter=30000, penalty=l1;, score=0.785 total time=   0.4s\n[CV 4/5] END alpha=0.0001, loss=squared_hinge, max_iter=30000, penalty=l1;, score=0.767 total time=   0.3s\n[CV 5/5] END alpha=0.0001, loss=squared_hinge, max_iter=30000, penalty=l1;, score=0.727 total time=   0.5s\n[CV 3/5] END alpha=0.0001, loss=squared_hinge, max_iter=30000, penalty=elasticnet;, score=0.741 total time=   0.4s\n[CV 4/5] END alpha=0.0001, loss=squared_hinge, max_iter=30000, penalty=elasticnet;, score=0.523 total time=   0.3s\n[CV 1/5] END alpha=0.0001, loss=perceptron, max_iter=1000, penalty=l2;, score=0.473 total time=   0.2s\n[CV 3/5] END alpha=0.0001, loss=perceptron, max_iter=1000, penalty=l2;, score=0.568 total time=   0.2s\n[CV 5/5] END alpha=0.0001, loss=perceptron, max_iter=1000, penalty=l2;, score=0.612 total time=   0.2s\n[CV 2/5] END alpha=0.0001, loss=perceptron, max_iter=1000, penalty=l1;, score=0.749 total time=   0.6s\n[CV 4/5] END alpha=0.0001, loss=perceptron, max_iter=1000, penalty=l1;, score=0.782 total time=   0.4s\n[CV 1/5] END alpha=0.0001, loss=perceptron, max_iter=1000, penalty=elasticnet;, score=0.612 total time=   0.3s\n[CV 3/5] END alpha=0.0001, loss=perceptron, max_iter=1000, penalty=elasticnet;, score=0.660 total time=   0.4s\n[CV 5/5] END alpha=0.0001, loss=perceptron, max_iter=1000, penalty=elasticnet;, score=0.504 total time=   0.5s\n[CV 3/5] END alpha=0.0001, loss=perceptron, max_iter=10000, penalty=l2;, score=0.530 total time=   0.3s\n[CV 5/5] END alpha=0.0001, loss=perceptron, max_iter=10000, penalty=l2;, score=0.664 total time=   0.2s\n[CV 2/5] END alpha=0.0001, loss=perceptron, max_iter=10000, penalty=l1;, score=0.718 total time=   0.5s\n[CV 4/5] END alpha=0.0001, loss=perceptron, max_iter=10000, penalty=l1;, score=0.716 total time=   0.3s\n[CV 1/5] END alpha=0.0001, loss=perceptron, max_iter=10000, penalty=elasticnet;, score=0.806 total time=   0.3s\n[CV 3/5] END alpha=0.0001, loss=perceptron, max_iter=10000, penalty=elasticnet;, score=0.575 total time=   0.2s\n[CV 5/5] END alpha=0.0001, loss=perceptron, max_iter=10000, penalty=elasticnet;, score=0.568 total time=   0.3s\n[CV 2/5] END alpha=0.0001, loss=perceptron, max_iter=30000, penalty=l2;, score=0.571 total time=   0.1s\n[CV 3/5] END alpha=0.0001, loss=perceptron, max_iter=30000, penalty=l2;, score=0.521 total time=   0.2s\n[CV 5/5] END alpha=0.0001, loss=perceptron, max_iter=30000, penalty=l2;, score=0.809 total time=   0.2s\n[CV 2/5] END alpha=0.0001, loss=perceptron, max_iter=30000, penalty=l1;, score=0.763 total time=   0.4s\n[CV 4/5] END alpha=0.0001, loss=perceptron, max_iter=30000, penalty=l1;, score=0.780 total time=   0.3s\n[CV 1/5] END alpha=0.0001, loss=perceptron, max_iter=30000, penalty=elasticnet;, score=0.534 total time=   0.3s\n[CV 3/5] END alpha=0.0001, loss=perceptron, max_iter=30000, penalty=elasticnet;, score=0.767 total time=   0.6s\n[CV 5/5] END alpha=0.0001, loss=perceptron, max_iter=30000, penalty=elasticnet;, score=0.565 total time=   0.5s\n[CV 3/5] END alpha=0.001, loss=hinge, max_iter=1000, penalty=l2;, score=0.472 total time=   0.3s\n[CV 1/5] END alpha=0.001, loss=hinge, max_iter=1000, penalty=l1;, score=0.795 total time=   0.2s\n[CV 3/5] END alpha=0.001, loss=hinge, max_iter=1000, penalty=l1;, score=0.795 total time=   0.2s\n[CV 5/5] END alpha=0.001, loss=hinge, max_iter=1000, penalty=l1;, score=0.794 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.865 total time=   0.4s\n[CV 4/5] END alpha=0.001, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.501 total time=   0.3s\n[CV 1/5] END alpha=0.001, loss=hinge, max_iter=10000, penalty=l2;, score=0.596 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=hinge, max_iter=10000, penalty=l2;, score=0.763 total time=   0.1s\n[CV 3/5] END alpha=0.001, loss=hinge, max_iter=10000, penalty=l2;, score=0.568 total time=   0.1s\n[CV 5/5] END alpha=0.001, loss=hinge, max_iter=10000, penalty=l2;, score=0.749 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=hinge, max_iter=10000, penalty=l1;, score=0.693 total time=   0.2s\n[CV 5/5] END alpha=0.001, loss=hinge, max_iter=10000, penalty=l1;, score=0.804 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.870 total time=   0.5s\n[CV 4/5] END alpha=0.001, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.856 total time=   0.4s\n[CV 1/5] END alpha=0.001, loss=hinge, max_iter=30000, penalty=l2;, score=0.631 total time=   0.1s\n[CV 2/5] END alpha=0.001, loss=hinge, max_iter=30000, penalty=l2;, score=0.524 total time=   0.2s\n[CV 4/5] END alpha=0.001, loss=hinge, max_iter=30000, penalty=l2;, score=0.734 total time=   0.3s\n[CV 1/5] END alpha=0.001, loss=hinge, max_iter=30000, penalty=l1;, score=0.794 total time=   0.3s\n[CV 3/5] END alpha=0.001, loss=hinge, max_iter=30000, penalty=l1;, score=0.795 total time=   0.2s\n[CV 5/5] END alpha=0.001, loss=hinge, max_iter=30000, penalty=l1;, score=0.805 total time=   0.3s\n[CV 2/5] END alpha=0.001, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.559 total time=   0.2s\n[CV 4/5] END alpha=0.001, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.726 total time=   0.2s\n[CV 1/5] END alpha=0.001, loss=log_loss, max_iter=1000, penalty=l2;, score=0.617 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=log_loss, max_iter=1000, penalty=l2;, score=0.489 total time=   0.2s\n[CV 4/5] END alpha=0.001, loss=log_loss, max_iter=1000, penalty=l2;, score=0.805 total time=   0.2s\n[CV 1/5] END alpha=0.001, loss=log_loss, max_iter=1000, penalty=l1;, score=0.786 total time=   0.5s\n[CV 3/5] END alpha=0.001, loss=log_loss, max_iter=1000, penalty=l1;, score=0.792 total time=   0.4s\n[CV 5/5] END alpha=0.001, loss=log_loss, max_iter=1000, penalty=l1;, score=0.650 total time=   0.2s\n[CV 1/5] END alpha=0.001, loss=log_loss, max_iter=1000, penalty=elasticnet;, score=0.838 total time=   0.3s\n[CV 3/5] END alpha=0.001, loss=log_loss, max_iter=1000, penalty=elasticnet;, score=0.643 total time=   0.3s\n[CV 5/5] END alpha=0.001, loss=log_loss, max_iter=1000, penalty=elasticnet;, score=0.792 total time=   0.3s\n[CV 2/5] END alpha=0.001, loss=log_loss, max_iter=10000, penalty=l2;, score=0.842 total time=   0.4s\n[CV 5/5] END alpha=0.001, loss=log_loss, max_iter=10000, penalty=l2;, score=0.755 total time=   0.3s\n[CV 2/5] END alpha=0.001, loss=log_loss, max_iter=10000, penalty=l1;, score=0.818 total time=   0.5s\n[CV 3/5] END alpha=0.001, loss=log_loss, max_iter=10000, penalty=l1;, score=0.695 total time=   0.2s\n[CV 1/5] END alpha=0.001, loss=log_loss, max_iter=10000, penalty=elasticnet;, score=0.856 total time=   0.5s\n[CV 4/5] END alpha=0.001, loss=log_loss, max_iter=10000, penalty=elasticnet;, score=0.844 total time=   0.4s\n[CV 1/5] END alpha=0.001, loss=log_loss, max_iter=30000, penalty=l2;, score=0.700 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=log_loss, max_iter=30000, penalty=l2;, score=0.482 total time=   0.2s\n[CV 4/5] END alpha=0.001, loss=log_loss, max_iter=30000, penalty=l2;, score=0.569 total time=   0.2s\n[CV 5/5] END alpha=0.001, loss=log_loss, max_iter=30000, penalty=l2;, score=0.623 total time=   0.2s\n"},"4":{"name":"stdout","text":"[CV 2/5] END alpha=0.0001, loss=squared_hinge, max_iter=10000, penalty=l1;, score=0.745 total time=   0.4s\n[CV 4/5] END alpha=0.0001, loss=squared_hinge, max_iter=10000, penalty=l1;, score=0.779 total time=   0.3s\n[CV 1/5] END alpha=0.0001, loss=squared_hinge, max_iter=10000, penalty=elasticnet;, score=0.597 total time=   0.4s\n[CV 3/5] END alpha=0.0001, loss=squared_hinge, max_iter=10000, penalty=elasticnet;, score=0.795 total time=   0.2s\n[CV 5/5] END alpha=0.0001, loss=squared_hinge, max_iter=10000, penalty=elasticnet;, score=0.590 total time=   0.4s\n[CV 2/5] END alpha=0.0001, loss=squared_hinge, max_iter=30000, penalty=l2;, score=0.754 total time=   0.2s\n[CV 5/5] END alpha=0.0001, loss=squared_hinge, max_iter=30000, penalty=l2;, score=0.732 total time=   0.2s\n[CV 2/5] END alpha=0.0001, loss=squared_hinge, max_iter=30000, penalty=l1;, score=0.700 total time=   0.3s\n[CV 3/5] END alpha=0.0001, loss=squared_hinge, max_iter=30000, penalty=l1;, score=0.795 total time=   0.3s\n[CV 1/5] END alpha=0.0001, loss=squared_hinge, max_iter=30000, penalty=elasticnet;, score=0.608 total time=   0.4s\n[CV 2/5] END alpha=0.0001, loss=squared_hinge, max_iter=30000, penalty=elasticnet;, score=0.801 total time=   0.4s\n[CV 5/5] END alpha=0.0001, loss=squared_hinge, max_iter=30000, penalty=elasticnet;, score=0.491 total time=   0.4s\n[CV 2/5] END alpha=0.0001, loss=perceptron, max_iter=1000, penalty=l2;, score=0.587 total time=   0.2s\n[CV 4/5] END alpha=0.0001, loss=perceptron, max_iter=1000, penalty=l2;, score=0.585 total time=   0.1s\n[CV 1/5] END alpha=0.0001, loss=perceptron, max_iter=1000, penalty=l1;, score=0.720 total time=   0.5s\n[CV 3/5] END alpha=0.0001, loss=perceptron, max_iter=1000, penalty=l1;, score=0.796 total time=   0.4s\n[CV 5/5] END alpha=0.0001, loss=perceptron, max_iter=1000, penalty=l1;, score=0.800 total time=   0.5s\n[CV 2/5] END alpha=0.0001, loss=perceptron, max_iter=1000, penalty=elasticnet;, score=0.820 total time=   0.5s\n[CV 4/5] END alpha=0.0001, loss=perceptron, max_iter=1000, penalty=elasticnet;, score=0.780 total time=   0.4s\n[CV 1/5] END alpha=0.0001, loss=perceptron, max_iter=10000, penalty=l2;, score=0.757 total time=   0.2s\n[CV 2/5] END alpha=0.0001, loss=perceptron, max_iter=10000, penalty=l2;, score=0.460 total time=   0.3s\n[CV 4/5] END alpha=0.0001, loss=perceptron, max_iter=10000, penalty=l2;, score=0.501 total time=   0.1s\n[CV 1/5] END alpha=0.0001, loss=perceptron, max_iter=10000, penalty=l1;, score=0.796 total time=   0.3s\n[CV 3/5] END alpha=0.0001, loss=perceptron, max_iter=10000, penalty=l1;, score=0.799 total time=   0.4s\n[CV 5/5] END alpha=0.0001, loss=perceptron, max_iter=10000, penalty=l1;, score=0.796 total time=   0.3s\n[CV 2/5] END alpha=0.0001, loss=perceptron, max_iter=10000, penalty=elasticnet;, score=0.740 total time=   0.3s\n[CV 4/5] END alpha=0.0001, loss=perceptron, max_iter=10000, penalty=elasticnet;, score=0.613 total time=   0.3s\n[CV 1/5] END alpha=0.0001, loss=perceptron, max_iter=30000, penalty=l2;, score=0.547 total time=   0.2s\n[CV 4/5] END alpha=0.0001, loss=perceptron, max_iter=30000, penalty=l2;, score=0.693 total time=   0.2s\n[CV 1/5] END alpha=0.0001, loss=perceptron, max_iter=30000, penalty=l1;, score=0.796 total time=   0.4s\n[CV 3/5] END alpha=0.0001, loss=perceptron, max_iter=30000, penalty=l1;, score=0.774 total time=   0.3s\n[CV 5/5] END alpha=0.0001, loss=perceptron, max_iter=30000, penalty=l1;, score=0.799 total time=   0.5s\n[CV 2/5] END alpha=0.0001, loss=perceptron, max_iter=30000, penalty=elasticnet;, score=0.499 total time=   0.5s\n[CV 4/5] END alpha=0.0001, loss=perceptron, max_iter=30000, penalty=elasticnet;, score=0.681 total time=   0.4s\n[CV 1/5] END alpha=0.001, loss=hinge, max_iter=1000, penalty=l2;, score=0.577 total time=   0.1s\n[CV 2/5] END alpha=0.001, loss=hinge, max_iter=1000, penalty=l2;, score=0.566 total time=   0.1s\n[CV 4/5] END alpha=0.001, loss=hinge, max_iter=1000, penalty=l2;, score=0.749 total time=   0.2s\n[CV 5/5] END alpha=0.001, loss=hinge, max_iter=1000, penalty=l2;, score=0.784 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=hinge, max_iter=1000, penalty=l1;, score=0.805 total time=   0.2s\n[CV 4/5] END alpha=0.001, loss=hinge, max_iter=1000, penalty=l1;, score=0.779 total time=   0.2s\n[CV 1/5] END alpha=0.001, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.855 total time=   0.3s\n[CV 3/5] END alpha=0.001, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.753 total time=   0.5s\n[CV 5/5] END alpha=0.001, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.852 total time=   0.3s\n[CV 4/5] END alpha=0.001, loss=hinge, max_iter=10000, penalty=l2;, score=0.577 total time=   0.2s\n[CV 1/5] END alpha=0.001, loss=hinge, max_iter=10000, penalty=l1;, score=0.778 total time=   0.2s\n[CV 3/5] END alpha=0.001, loss=hinge, max_iter=10000, penalty=l1;, score=0.790 total time=   0.2s\n[CV 4/5] END alpha=0.001, loss=hinge, max_iter=10000, penalty=l1;, score=0.775 total time=   0.2s\n[CV 1/5] END alpha=0.001, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.858 total time=   0.5s\n[CV 3/5] END alpha=0.001, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.724 total time=   0.3s\n[CV 5/5] END alpha=0.001, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.847 total time=   0.4s\n[CV 3/5] END alpha=0.001, loss=hinge, max_iter=30000, penalty=l2;, score=0.823 total time=   0.3s\n[CV 5/5] END alpha=0.001, loss=hinge, max_iter=30000, penalty=l2;, score=0.617 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=hinge, max_iter=30000, penalty=l1;, score=0.820 total time=   0.3s\n[CV 4/5] END alpha=0.001, loss=hinge, max_iter=30000, penalty=l1;, score=0.779 total time=   0.2s\n[CV 1/5] END alpha=0.001, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.851 total time=   0.4s\n[CV 3/5] END alpha=0.001, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.752 total time=   0.2s\n[CV 5/5] END alpha=0.001, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.854 total time=   0.3s\n[CV 3/5] END alpha=0.001, loss=log_loss, max_iter=1000, penalty=l2;, score=0.479 total time=   0.2s\n[CV 5/5] END alpha=0.001, loss=log_loss, max_iter=1000, penalty=l2;, score=0.565 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=log_loss, max_iter=1000, penalty=l1;, score=0.815 total time=   0.7s\n[CV 4/5] END alpha=0.001, loss=log_loss, max_iter=1000, penalty=l1;, score=0.784 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=log_loss, max_iter=1000, penalty=elasticnet;, score=0.859 total time=   0.4s\n[CV 4/5] END alpha=0.001, loss=log_loss, max_iter=1000, penalty=elasticnet;, score=0.843 total time=   0.3s\n[CV 1/5] END alpha=0.001, loss=log_loss, max_iter=10000, penalty=l2;, score=0.570 total time=   0.2s\n[CV 3/5] END alpha=0.001, loss=log_loss, max_iter=10000, penalty=l2;, score=0.590 total time=   0.3s\n[CV 4/5] END alpha=0.001, loss=log_loss, max_iter=10000, penalty=l2;, score=0.817 total time=   0.2s\n[CV 1/5] END alpha=0.001, loss=log_loss, max_iter=10000, penalty=l1;, score=0.802 total time=   0.5s\n[CV 4/5] END alpha=0.001, loss=log_loss, max_iter=10000, penalty=l1;, score=0.663 total time=   0.2s\n[CV 5/5] END alpha=0.001, loss=log_loss, max_iter=10000, penalty=l1;, score=0.797 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=log_loss, max_iter=10000, penalty=elasticnet;, score=0.812 total time=   0.2s\n[CV 3/5] END alpha=0.001, loss=log_loss, max_iter=10000, penalty=elasticnet;, score=0.851 total time=   0.4s\n[CV 5/5] END alpha=0.001, loss=log_loss, max_iter=10000, penalty=elasticnet;, score=0.855 total time=   0.5s\n[CV 3/5] END alpha=0.001, loss=log_loss, max_iter=30000, penalty=l2;, score=0.740 total time=   0.3s\n[CV 1/5] END alpha=0.001, loss=log_loss, max_iter=30000, penalty=l1;, score=0.603 total time=   0.2s\n[CV 3/5] END alpha=0.001, loss=log_loss, max_iter=30000, penalty=l1;, score=0.799 total time=   0.3s\n[CV 5/5] END alpha=0.001, loss=log_loss, max_iter=30000, penalty=l1;, score=0.792 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=log_loss, max_iter=30000, penalty=elasticnet;, score=0.870 total time=   0.5s\n[CV 4/5] END alpha=0.001, loss=log_loss, max_iter=30000, penalty=elasticnet;, score=0.847 total time=   0.4s\n"},"5":{"name":"stdout","text":"[CV 2/5] END alpha=0.001, loss=log_loss, max_iter=30000, penalty=l1;, score=0.817 total time=   0.3s\n[CV 4/5] END alpha=0.001, loss=log_loss, max_iter=30000, penalty=l1;, score=0.794 total time=   0.3s\n[CV 1/5] END alpha=0.001, loss=log_loss, max_iter=30000, penalty=elasticnet;, score=0.667 total time=   0.3s\n[CV 3/5] END alpha=0.001, loss=log_loss, max_iter=30000, penalty=elasticnet;, score=0.849 total time=   0.4s\n[CV 5/5] END alpha=0.001, loss=log_loss, max_iter=30000, penalty=elasticnet;, score=0.854 total time=   0.5s\n[CV 2/5] END alpha=0.001, loss=modified_huber, max_iter=1000, penalty=l2;, score=0.837 total time=   0.2s\n[CV 5/5] END alpha=0.001, loss=modified_huber, max_iter=1000, penalty=l2;, score=0.803 total time=   0.2s\n[CV 1/5] END alpha=0.001, loss=modified_huber, max_iter=1000, penalty=l1;, score=0.785 total time=   0.3s\n[CV 3/5] END alpha=0.001, loss=modified_huber, max_iter=1000, penalty=l1;, score=0.788 total time=   0.2s\n[CV 5/5] END alpha=0.001, loss=modified_huber, max_iter=1000, penalty=l1;, score=0.786 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=modified_huber, max_iter=1000, penalty=elasticnet;, score=0.841 total time=   0.4s\n[CV 4/5] END alpha=0.001, loss=modified_huber, max_iter=1000, penalty=elasticnet;, score=0.589 total time=   0.5s\n[CV 1/5] END alpha=0.001, loss=modified_huber, max_iter=10000, penalty=l2;, score=0.794 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=modified_huber, max_iter=10000, penalty=l2;, score=0.686 total time=   0.1s\n[CV 4/5] END alpha=0.001, loss=modified_huber, max_iter=10000, penalty=l2;, score=0.594 total time=   0.2s\n[CV 1/5] END alpha=0.001, loss=modified_huber, max_iter=10000, penalty=l1;, score=0.711 total time=   0.2s\n[CV 3/5] END alpha=0.001, loss=modified_huber, max_iter=10000, penalty=l1;, score=0.789 total time=   0.2s\n[CV 4/5] END alpha=0.001, loss=modified_huber, max_iter=10000, penalty=l1;, score=0.778 total time=   0.3s\n[CV 2/5] END alpha=0.001, loss=modified_huber, max_iter=10000, penalty=elasticnet;, score=0.752 total time=   0.3s\n[CV 3/5] END alpha=0.001, loss=modified_huber, max_iter=10000, penalty=elasticnet;, score=0.684 total time=   0.6s\n[CV 5/5] END alpha=0.001, loss=modified_huber, max_iter=10000, penalty=elasticnet;, score=0.807 total time=   0.3s\n[CV 2/5] END alpha=0.001, loss=modified_huber, max_iter=30000, penalty=l2;, score=0.485 total time=   0.2s\n[CV 4/5] END alpha=0.001, loss=modified_huber, max_iter=30000, penalty=l2;, score=0.801 total time=   0.2s\n[CV 1/5] END alpha=0.001, loss=modified_huber, max_iter=30000, penalty=l1;, score=0.785 total time=   0.3s\n[CV 3/5] END alpha=0.001, loss=modified_huber, max_iter=30000, penalty=l1;, score=0.785 total time=   0.3s\n[CV 5/5] END alpha=0.001, loss=modified_huber, max_iter=30000, penalty=l1;, score=0.777 total time=   0.3s\n[CV 2/5] END alpha=0.001, loss=modified_huber, max_iter=30000, penalty=elasticnet;, score=0.808 total time=   0.3s\n[CV 4/5] END alpha=0.001, loss=modified_huber, max_iter=30000, penalty=elasticnet;, score=0.834 total time=   0.4s\n[CV 1/5] END alpha=0.001, loss=squared_hinge, max_iter=1000, penalty=l2;, score=0.762 total time=   0.1s\n[CV 2/5] END alpha=0.001, loss=squared_hinge, max_iter=1000, penalty=l2;, score=0.716 total time=   0.2s\n[CV 3/5] END alpha=0.001, loss=squared_hinge, max_iter=1000, penalty=l2;, score=0.693 total time=   0.2s\n[CV 1/5] END alpha=0.001, loss=squared_hinge, max_iter=1000, penalty=l1;, score=0.781 total time=   0.4s\n[CV 3/5] END alpha=0.001, loss=squared_hinge, max_iter=1000, penalty=l1;, score=0.765 total time=   0.4s\n[CV 5/5] END alpha=0.001, loss=squared_hinge, max_iter=1000, penalty=l1;, score=0.788 total time=   0.3s\n[CV 2/5] END alpha=0.001, loss=squared_hinge, max_iter=1000, penalty=elasticnet;, score=0.580 total time=   0.3s\n[CV 5/5] END alpha=0.001, loss=squared_hinge, max_iter=1000, penalty=elasticnet;, score=0.823 total time=   0.4s\n[CV 2/5] END alpha=0.001, loss=squared_hinge, max_iter=10000, penalty=l2;, score=0.603 total time=   0.1s\n[CV 4/5] END alpha=0.001, loss=squared_hinge, max_iter=10000, penalty=l2;, score=0.578 total time=   0.1s\n[CV 1/5] END alpha=0.001, loss=squared_hinge, max_iter=10000, penalty=l1;, score=0.689 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=squared_hinge, max_iter=10000, penalty=l1;, score=0.777 total time=   0.3s\n[CV 5/5] END alpha=0.001, loss=squared_hinge, max_iter=10000, penalty=l1;, score=0.760 total time=   0.3s\n[CV 1/5] END alpha=0.001, loss=squared_hinge, max_iter=10000, penalty=elasticnet;, score=0.821 total time=   0.5s\n[CV 4/5] END alpha=0.001, loss=squared_hinge, max_iter=10000, penalty=elasticnet;, score=0.749 total time=   0.2s\n[CV 5/5] END alpha=0.001, loss=squared_hinge, max_iter=10000, penalty=elasticnet;, score=0.514 total time=   0.3s\n[CV 3/5] END alpha=0.001, loss=squared_hinge, max_iter=30000, penalty=l2;, score=0.583 total time=   0.1s\n[CV 4/5] END alpha=0.001, loss=squared_hinge, max_iter=30000, penalty=l2;, score=0.578 total time=   0.1s\n[CV 1/5] END alpha=0.001, loss=squared_hinge, max_iter=30000, penalty=l1;, score=0.756 total time=   0.4s\n[CV 3/5] END alpha=0.001, loss=squared_hinge, max_iter=30000, penalty=l1;, score=0.662 total time=   0.2s\n[CV 5/5] END alpha=0.001, loss=squared_hinge, max_iter=30000, penalty=l1;, score=0.711 total time=   0.3s\n[CV 2/5] END alpha=0.001, loss=squared_hinge, max_iter=30000, penalty=elasticnet;, score=0.489 total time=   0.2s\n[CV 3/5] END alpha=0.001, loss=squared_hinge, max_iter=30000, penalty=elasticnet;, score=0.473 total time=   0.3s\n[CV 5/5] END alpha=0.001, loss=squared_hinge, max_iter=30000, penalty=elasticnet;, score=0.611 total time=   0.4s\n[CV 2/5] END alpha=0.001, loss=perceptron, max_iter=1000, penalty=l2;, score=0.608 total time=   0.2s\n[CV 5/5] END alpha=0.001, loss=perceptron, max_iter=1000, penalty=l2;, score=0.578 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=perceptron, max_iter=1000, penalty=l1;, score=0.796 total time=   0.2s\n[CV 3/5] END alpha=0.001, loss=perceptron, max_iter=1000, penalty=l1;, score=0.791 total time=   0.2s\n[CV 5/5] END alpha=0.001, loss=perceptron, max_iter=1000, penalty=l1;, score=0.797 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=perceptron, max_iter=1000, penalty=elasticnet;, score=0.853 total time=   0.3s\n[CV 4/5] END alpha=0.001, loss=perceptron, max_iter=1000, penalty=elasticnet;, score=0.832 total time=   0.2s\n[CV 1/5] END alpha=0.001, loss=perceptron, max_iter=10000, penalty=l2;, score=0.484 total time=   0.2s\n[CV 3/5] END alpha=0.001, loss=perceptron, max_iter=10000, penalty=l2;, score=0.817 total time=   0.2s\n[CV 5/5] END alpha=0.001, loss=perceptron, max_iter=10000, penalty=l2;, score=0.784 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=perceptron, max_iter=10000, penalty=l1;, score=0.664 total time=   0.3s\n[CV 4/5] END alpha=0.001, loss=perceptron, max_iter=10000, penalty=l1;, score=0.793 total time=   0.2s\n[CV 1/5] END alpha=0.001, loss=perceptron, max_iter=10000, penalty=elasticnet;, score=0.756 total time=   0.3s\n[CV 3/5] END alpha=0.001, loss=perceptron, max_iter=10000, penalty=elasticnet;, score=0.799 total time=   0.4s\n[CV 1/5] END alpha=0.001, loss=perceptron, max_iter=30000, penalty=l2;, score=0.615 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=perceptron, max_iter=30000, penalty=l2;, score=0.634 total time=   0.1s\n[CV 3/5] END alpha=0.001, loss=perceptron, max_iter=30000, penalty=l2;, score=0.548 total time=   0.2s\n[CV 5/5] END alpha=0.001, loss=perceptron, max_iter=30000, penalty=l2;, score=0.778 total time=   0.1s\n[CV 2/5] END alpha=0.001, loss=perceptron, max_iter=30000, penalty=l1;, score=0.809 total time=   0.2s\n[CV 4/5] END alpha=0.001, loss=perceptron, max_iter=30000, penalty=l1;, score=0.779 total time=   0.2s\n[CV 1/5] END alpha=0.001, loss=perceptron, max_iter=30000, penalty=elasticnet;, score=0.861 total time=   0.4s\n[CV 3/5] END alpha=0.001, loss=perceptron, max_iter=30000, penalty=elasticnet;, score=0.705 total time=   0.3s\n[CV 5/5] END alpha=0.001, loss=perceptron, max_iter=30000, penalty=elasticnet;, score=0.634 total time=   0.3s\n[CV 3/5] END alpha=0.01, loss=hinge, max_iter=1000, penalty=l2;, score=0.568 total time=   0.2s\n"},"6":{"name":"stdout","text":"[CV 1/5] END alpha=0.001, loss=modified_huber, max_iter=1000, penalty=l2;, score=0.636 total time=   0.3s\n[CV 3/5] END alpha=0.001, loss=modified_huber, max_iter=1000, penalty=l2;, score=0.610 total time=   0.1s\n[CV 4/5] END alpha=0.001, loss=modified_huber, max_iter=1000, penalty=l2;, score=0.474 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=modified_huber, max_iter=1000, penalty=l1;, score=0.819 total time=   0.4s\n[CV 4/5] END alpha=0.001, loss=modified_huber, max_iter=1000, penalty=l1;, score=0.778 total time=   0.3s\n[CV 1/5] END alpha=0.001, loss=modified_huber, max_iter=1000, penalty=elasticnet;, score=0.523 total time=   0.4s\n[CV 3/5] END alpha=0.001, loss=modified_huber, max_iter=1000, penalty=elasticnet;, score=0.826 total time=   0.3s\n[CV 5/5] END alpha=0.001, loss=modified_huber, max_iter=1000, penalty=elasticnet;, score=0.851 total time=   0.5s\n[CV 3/5] END alpha=0.001, loss=modified_huber, max_iter=10000, penalty=l2;, score=0.799 total time=   0.1s\n[CV 5/5] END alpha=0.001, loss=modified_huber, max_iter=10000, penalty=l2;, score=0.673 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=modified_huber, max_iter=10000, penalty=l1;, score=0.727 total time=   0.4s\n[CV 5/5] END alpha=0.001, loss=modified_huber, max_iter=10000, penalty=l1;, score=0.669 total time=   0.3s\n[CV 1/5] END alpha=0.001, loss=modified_huber, max_iter=10000, penalty=elasticnet;, score=0.859 total time=   0.7s\n[CV 4/5] END alpha=0.001, loss=modified_huber, max_iter=10000, penalty=elasticnet;, score=0.567 total time=   0.3s\n[CV 1/5] END alpha=0.001, loss=modified_huber, max_iter=30000, penalty=l2;, score=0.635 total time=   0.1s\n[CV 3/5] END alpha=0.001, loss=modified_huber, max_iter=30000, penalty=l2;, score=0.681 total time=   0.2s\n[CV 5/5] END alpha=0.001, loss=modified_huber, max_iter=30000, penalty=l2;, score=0.525 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=modified_huber, max_iter=30000, penalty=l1;, score=0.697 total time=   0.5s\n[CV 4/5] END alpha=0.001, loss=modified_huber, max_iter=30000, penalty=l1;, score=0.780 total time=   0.3s\n[CV 1/5] END alpha=0.001, loss=modified_huber, max_iter=30000, penalty=elasticnet;, score=0.577 total time=   0.4s\n[CV 3/5] END alpha=0.001, loss=modified_huber, max_iter=30000, penalty=elasticnet;, score=0.569 total time=   0.5s\n[CV 5/5] END alpha=0.001, loss=modified_huber, max_iter=30000, penalty=elasticnet;, score=0.836 total time=   0.4s\n[CV 4/5] END alpha=0.001, loss=squared_hinge, max_iter=1000, penalty=l2;, score=0.688 total time=   0.2s\n[CV 5/5] END alpha=0.001, loss=squared_hinge, max_iter=1000, penalty=l2;, score=0.747 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=squared_hinge, max_iter=1000, penalty=l1;, score=0.734 total time=   0.3s\n[CV 4/5] END alpha=0.001, loss=squared_hinge, max_iter=1000, penalty=l1;, score=0.699 total time=   0.3s\n[CV 1/5] END alpha=0.001, loss=squared_hinge, max_iter=1000, penalty=elasticnet;, score=0.629 total time=   0.3s\n[CV 3/5] END alpha=0.001, loss=squared_hinge, max_iter=1000, penalty=elasticnet;, score=0.569 total time=   0.2s\n[CV 4/5] END alpha=0.001, loss=squared_hinge, max_iter=1000, penalty=elasticnet;, score=0.567 total time=   0.3s\n[CV 1/5] END alpha=0.001, loss=squared_hinge, max_iter=10000, penalty=l2;, score=0.664 total time=   0.2s\n[CV 3/5] END alpha=0.001, loss=squared_hinge, max_iter=10000, penalty=l2;, score=0.647 total time=   0.2s\n[CV 5/5] END alpha=0.001, loss=squared_hinge, max_iter=10000, penalty=l2;, score=0.758 total time=   0.2s\n[CV 3/5] END alpha=0.001, loss=squared_hinge, max_iter=10000, penalty=l1;, score=0.739 total time=   0.3s\n[CV 4/5] END alpha=0.001, loss=squared_hinge, max_iter=10000, penalty=l1;, score=0.738 total time=   0.3s\n[CV 2/5] END alpha=0.001, loss=squared_hinge, max_iter=10000, penalty=elasticnet;, score=0.649 total time=   0.3s\n[CV 3/5] END alpha=0.001, loss=squared_hinge, max_iter=10000, penalty=elasticnet;, score=0.676 total time=   0.5s\n[CV 1/5] END alpha=0.001, loss=squared_hinge, max_iter=30000, penalty=l2;, score=0.747 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=squared_hinge, max_iter=30000, penalty=l2;, score=0.684 total time=   0.2s\n[CV 5/5] END alpha=0.001, loss=squared_hinge, max_iter=30000, penalty=l2;, score=0.741 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=squared_hinge, max_iter=30000, penalty=l1;, score=0.807 total time=   0.4s\n[CV 4/5] END alpha=0.001, loss=squared_hinge, max_iter=30000, penalty=l1;, score=0.776 total time=   0.3s\n[CV 1/5] END alpha=0.001, loss=squared_hinge, max_iter=30000, penalty=elasticnet;, score=0.821 total time=   0.4s\n[CV 4/5] END alpha=0.001, loss=squared_hinge, max_iter=30000, penalty=elasticnet;, score=0.543 total time=   0.5s\n[CV 1/5] END alpha=0.001, loss=perceptron, max_iter=1000, penalty=l2;, score=0.757 total time=   0.2s\n[CV 3/5] END alpha=0.001, loss=perceptron, max_iter=1000, penalty=l2;, score=0.597 total time=   0.1s\n[CV 4/5] END alpha=0.001, loss=perceptron, max_iter=1000, penalty=l2;, score=0.699 total time=   0.2s\n[CV 1/5] END alpha=0.001, loss=perceptron, max_iter=1000, penalty=l1;, score=0.803 total time=   0.2s\n[CV 4/5] END alpha=0.001, loss=perceptron, max_iter=1000, penalty=l1;, score=0.778 total time=   0.2s\n[CV 1/5] END alpha=0.001, loss=perceptron, max_iter=1000, penalty=elasticnet;, score=0.849 total time=   0.3s\n[CV 3/5] END alpha=0.001, loss=perceptron, max_iter=1000, penalty=elasticnet;, score=0.840 total time=   0.3s\n[CV 5/5] END alpha=0.001, loss=perceptron, max_iter=1000, penalty=elasticnet;, score=0.631 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=perceptron, max_iter=10000, penalty=l2;, score=0.668 total time=   0.2s\n[CV 4/5] END alpha=0.001, loss=perceptron, max_iter=10000, penalty=l2;, score=0.807 total time=   0.2s\n[CV 1/5] END alpha=0.001, loss=perceptron, max_iter=10000, penalty=l1;, score=0.794 total time=   0.3s\n[CV 3/5] END alpha=0.001, loss=perceptron, max_iter=10000, penalty=l1;, score=0.792 total time=   0.2s\n[CV 5/5] END alpha=0.001, loss=perceptron, max_iter=10000, penalty=l1;, score=0.797 total time=   0.3s\n[CV 2/5] END alpha=0.001, loss=perceptron, max_iter=10000, penalty=elasticnet;, score=0.772 total time=   0.2s\n[CV 4/5] END alpha=0.001, loss=perceptron, max_iter=10000, penalty=elasticnet;, score=0.843 total time=   0.3s\n[CV 5/5] END alpha=0.001, loss=perceptron, max_iter=10000, penalty=elasticnet;, score=0.535 total time=   0.4s\n[CV 4/5] END alpha=0.001, loss=perceptron, max_iter=30000, penalty=l2;, score=0.605 total time=   0.2s\n[CV 1/5] END alpha=0.001, loss=perceptron, max_iter=30000, penalty=l1;, score=0.694 total time=   0.2s\n[CV 3/5] END alpha=0.001, loss=perceptron, max_iter=30000, penalty=l1;, score=0.797 total time=   0.2s\n[CV 5/5] END alpha=0.001, loss=perceptron, max_iter=30000, penalty=l1;, score=0.782 total time=   0.2s\n[CV 2/5] END alpha=0.001, loss=perceptron, max_iter=30000, penalty=elasticnet;, score=0.865 total time=   0.4s\n[CV 4/5] END alpha=0.001, loss=perceptron, max_iter=30000, penalty=elasticnet;, score=0.845 total time=   0.3s\n[CV 1/5] END alpha=0.01, loss=hinge, max_iter=1000, penalty=l2;, score=0.816 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=hinge, max_iter=1000, penalty=l2;, score=0.608 total time=   0.1s\n[CV 4/5] END alpha=0.01, loss=hinge, max_iter=1000, penalty=l2;, score=0.523 total time=   0.2s\n[CV 1/5] END alpha=0.01, loss=hinge, max_iter=1000, penalty=l1;, score=0.773 total time=   0.1s\n[CV 2/5] END alpha=0.01, loss=hinge, max_iter=1000, penalty=l1;, score=0.820 total time=   0.2s\n[CV 4/5] END alpha=0.01, loss=hinge, max_iter=1000, penalty=l1;, score=0.779 total time=   0.3s\n[CV 1/5] END alpha=0.01, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.827 total time=   0.1s\n[CV 3/5] END alpha=0.01, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.631 total time=   0.1s\n[CV 5/5] END alpha=0.01, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.822 total time=   0.2s\n[CV 3/5] END alpha=0.01, loss=hinge, max_iter=10000, penalty=l2;, score=0.546 total time=   0.1s\n[CV 4/5] END alpha=0.01, loss=hinge, max_iter=10000, penalty=l2;, score=0.621 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=hinge, max_iter=10000, penalty=l1;, score=0.788 total time=   0.1s\n"},"7":{"name":"stdout","text":"[CV 5/5] END alpha=0.01, loss=hinge, max_iter=1000, penalty=l2;, score=0.597 total time=   0.2s\n[CV 3/5] END alpha=0.01, loss=hinge, max_iter=1000, penalty=l1;, score=0.791 total time=   0.3s\n[CV 5/5] END alpha=0.01, loss=hinge, max_iter=1000, penalty=l1;, score=0.763 total time=   0.1s\n[CV 2/5] END alpha=0.01, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.809 total time=   0.2s\n[CV 4/5] END alpha=0.01, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.655 total time=   0.1s\n[CV 1/5] END alpha=0.01, loss=hinge, max_iter=10000, penalty=l2;, score=0.567 total time=   0.1s\n[CV 2/5] END alpha=0.01, loss=hinge, max_iter=10000, penalty=l2;, score=0.800 total time=   0.2s\n[CV 5/5] END alpha=0.01, loss=hinge, max_iter=10000, penalty=l2;, score=0.813 total time=   0.1s\n[CV 1/5] END alpha=0.01, loss=hinge, max_iter=10000, penalty=l1;, score=0.798 total time=   0.1s\n[CV 3/5] END alpha=0.01, loss=hinge, max_iter=10000, penalty=l1;, score=0.790 total time=   0.1s\n[CV 5/5] END alpha=0.01, loss=hinge, max_iter=10000, penalty=l1;, score=0.798 total time=   0.1s\n[CV 2/5] END alpha=0.01, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.862 total time=   0.2s\n[CV 4/5] END alpha=0.01, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.771 total time=   0.2s\n[CV 1/5] END alpha=0.01, loss=hinge, max_iter=30000, penalty=l2;, score=0.822 total time=   0.2s\n[CV 3/5] END alpha=0.01, loss=hinge, max_iter=30000, penalty=l2;, score=0.468 total time=   0.2s\n[CV 5/5] END alpha=0.01, loss=hinge, max_iter=30000, penalty=l2;, score=0.715 total time=   0.1s\n[CV 3/5] END alpha=0.01, loss=hinge, max_iter=30000, penalty=l1;, score=0.791 total time=   0.1s\n[CV 4/5] END alpha=0.01, loss=hinge, max_iter=30000, penalty=l1;, score=0.778 total time=   0.2s\n[CV 1/5] END alpha=0.01, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.805 total time=   0.1s\n[CV 3/5] END alpha=0.01, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.460 total time=   0.1s\n[CV 5/5] END alpha=0.01, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.746 total time=   0.1s\n[CV 2/5] END alpha=0.01, loss=log_loss, max_iter=1000, penalty=l2;, score=0.665 total time=   0.3s\n[CV 4/5] END alpha=0.01, loss=log_loss, max_iter=1000, penalty=l2;, score=0.516 total time=   0.3s\n[CV 1/5] END alpha=0.01, loss=log_loss, max_iter=1000, penalty=l1;, score=0.799 total time=   0.2s\n[CV 3/5] END alpha=0.01, loss=log_loss, max_iter=1000, penalty=l1;, score=0.786 total time=   0.1s\n[CV 5/5] END alpha=0.01, loss=log_loss, max_iter=1000, penalty=l1;, score=0.786 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=log_loss, max_iter=1000, penalty=elasticnet;, score=0.832 total time=   0.2s\n[CV 5/5] END alpha=0.01, loss=log_loss, max_iter=1000, penalty=elasticnet;, score=0.516 total time=   0.1s\n[CV 1/5] END alpha=0.01, loss=log_loss, max_iter=10000, penalty=l2;, score=0.619 total time=   0.2s\n[CV 3/5] END alpha=0.01, loss=log_loss, max_iter=10000, penalty=l2;, score=0.816 total time=   0.3s\n[CV 5/5] END alpha=0.01, loss=log_loss, max_iter=10000, penalty=l2;, score=0.482 total time=   0.3s\n[CV 2/5] END alpha=0.01, loss=log_loss, max_iter=10000, penalty=l1;, score=0.810 total time=   0.5s\n[CV 5/5] END alpha=0.01, loss=log_loss, max_iter=10000, penalty=l1;, score=0.766 total time=   0.1s\n[CV 2/5] END alpha=0.01, loss=log_loss, max_iter=10000, penalty=elasticnet;, score=0.647 total time=   0.2s\n[CV 4/5] END alpha=0.01, loss=log_loss, max_iter=10000, penalty=elasticnet;, score=0.853 total time=   0.4s\n[CV 1/5] END alpha=0.01, loss=log_loss, max_iter=30000, penalty=l2;, score=0.509 total time=   0.2s\n[CV 3/5] END alpha=0.01, loss=log_loss, max_iter=30000, penalty=l2;, score=0.571 total time=   0.2s\n[CV 5/5] END alpha=0.01, loss=log_loss, max_iter=30000, penalty=l2;, score=0.807 total time=   0.3s\n[CV 1/5] END alpha=0.01, loss=log_loss, max_iter=30000, penalty=l1;, score=0.779 total time=   0.1s\n[CV 3/5] END alpha=0.01, loss=log_loss, max_iter=30000, penalty=l1;, score=0.789 total time=   0.3s\n[CV 1/5] END alpha=0.01, loss=log_loss, max_iter=30000, penalty=elasticnet;, score=0.772 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=log_loss, max_iter=30000, penalty=elasticnet;, score=0.719 total time=   0.2s\n[CV 4/5] END alpha=0.01, loss=log_loss, max_iter=30000, penalty=elasticnet;, score=0.706 total time=   0.2s\n[CV 1/5] END alpha=0.01, loss=modified_huber, max_iter=1000, penalty=l2;, score=0.567 total time=   0.2s\n[CV 3/5] END alpha=0.01, loss=modified_huber, max_iter=1000, penalty=l2;, score=0.745 total time=   0.2s\n[CV 5/5] END alpha=0.01, loss=modified_huber, max_iter=1000, penalty=l2;, score=0.478 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=modified_huber, max_iter=1000, penalty=l1;, score=0.809 total time=   0.1s\n[CV 4/5] END alpha=0.01, loss=modified_huber, max_iter=1000, penalty=l1;, score=0.783 total time=   0.2s\n[CV 1/5] END alpha=0.01, loss=modified_huber, max_iter=1000, penalty=elasticnet;, score=0.853 total time=   0.3s\n[CV 4/5] END alpha=0.01, loss=modified_huber, max_iter=1000, penalty=elasticnet;, score=0.782 total time=   0.1s\n[CV 5/5] END alpha=0.01, loss=modified_huber, max_iter=1000, penalty=elasticnet;, score=0.839 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=modified_huber, max_iter=10000, penalty=l2;, score=0.778 total time=   0.3s\n[CV 4/5] END alpha=0.01, loss=modified_huber, max_iter=10000, penalty=l2;, score=0.599 total time=   0.2s\n[CV 1/5] END alpha=0.01, loss=modified_huber, max_iter=10000, penalty=l1;, score=0.725 total time=   0.1s\n[CV 3/5] END alpha=0.01, loss=modified_huber, max_iter=10000, penalty=l1;, score=0.785 total time=   0.2s\n[CV 5/5] END alpha=0.01, loss=modified_huber, max_iter=10000, penalty=l1;, score=0.799 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=modified_huber, max_iter=10000, penalty=elasticnet;, score=0.750 total time=   0.2s\n[CV 4/5] END alpha=0.01, loss=modified_huber, max_iter=10000, penalty=elasticnet;, score=0.658 total time=   0.2s\n[CV 1/5] END alpha=0.01, loss=modified_huber, max_iter=30000, penalty=l2;, score=0.661 total time=   0.1s\n[CV 3/5] END alpha=0.01, loss=modified_huber, max_iter=30000, penalty=l2;, score=0.572 total time=   0.1s\n[CV 5/5] END alpha=0.01, loss=modified_huber, max_iter=30000, penalty=l2;, score=0.729 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=modified_huber, max_iter=30000, penalty=l1;, score=0.814 total time=   0.2s\n[CV 5/5] END alpha=0.01, loss=modified_huber, max_iter=30000, penalty=l1;, score=0.791 total time=   0.2s\n[CV 1/5] END alpha=0.01, loss=modified_huber, max_iter=30000, penalty=elasticnet;, score=0.859 total time=   0.2s\n[CV 3/5] END alpha=0.01, loss=modified_huber, max_iter=30000, penalty=elasticnet;, score=0.681 total time=   0.2s\n[CV 5/5] END alpha=0.01, loss=modified_huber, max_iter=30000, penalty=elasticnet;, score=0.828 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=squared_hinge, max_iter=1000, penalty=l2;, score=0.770 total time=   0.1s\n[CV 4/5] END alpha=0.01, loss=squared_hinge, max_iter=1000, penalty=l2;, score=0.591 total time=   0.2s\n[CV 5/5] END alpha=0.01, loss=squared_hinge, max_iter=1000, penalty=l2;, score=0.572 total time=   0.1s\n[CV 2/5] END alpha=0.01, loss=squared_hinge, max_iter=1000, penalty=l1;, score=0.784 total time=   0.4s\n[CV 4/5] END alpha=0.01, loss=squared_hinge, max_iter=1000, penalty=l1;, score=0.665 total time=   0.3s\n[CV 1/5] END alpha=0.01, loss=squared_hinge, max_iter=1000, penalty=elasticnet;, score=0.568 total time=   0.3s\n[CV 3/5] END alpha=0.01, loss=squared_hinge, max_iter=1000, penalty=elasticnet;, score=0.793 total time=   0.4s\n[CV 5/5] END alpha=0.01, loss=squared_hinge, max_iter=1000, penalty=elasticnet;, score=0.796 total time=   0.4s\n[CV 3/5] END alpha=0.01, loss=squared_hinge, max_iter=10000, penalty=l2;, score=0.765 total time=   0.2s\n[CV 5/5] END alpha=0.01, loss=squared_hinge, max_iter=10000, penalty=l2;, score=0.503 total time=   0.2s\n[CV 1/5] END alpha=0.01, loss=squared_hinge, max_iter=10000, penalty=l1;, score=0.781 total time=   0.4s\n[CV 4/5] END alpha=0.01, loss=squared_hinge, max_iter=10000, penalty=l1;, score=0.761 total time=   0.2s\n"},"8":{"name":"stdout","text":"[CV 4/5] END alpha=0.01, loss=hinge, max_iter=10000, penalty=l1;, score=0.768 total time=   0.2s\n[CV 1/5] END alpha=0.01, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.729 total time=   0.1s\n[CV 3/5] END alpha=0.01, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.730 total time=   0.2s\n[CV 5/5] END alpha=0.01, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.807 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=hinge, max_iter=30000, penalty=l2;, score=0.493 total time=   0.1s\n[CV 4/5] END alpha=0.01, loss=hinge, max_iter=30000, penalty=l2;, score=0.569 total time=   0.2s\n[CV 1/5] END alpha=0.01, loss=hinge, max_iter=30000, penalty=l1;, score=0.791 total time=   0.1s\n[CV 2/5] END alpha=0.01, loss=hinge, max_iter=30000, penalty=l1;, score=0.791 total time=   0.2s\n[CV 5/5] END alpha=0.01, loss=hinge, max_iter=30000, penalty=l1;, score=0.603 total time=   0.1s\n[CV 2/5] END alpha=0.01, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.768 total time=   0.2s\n[CV 4/5] END alpha=0.01, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.449 total time=   0.1s\n[CV 1/5] END alpha=0.01, loss=log_loss, max_iter=1000, penalty=l2;, score=0.785 total time=   0.3s\n[CV 3/5] END alpha=0.01, loss=log_loss, max_iter=1000, penalty=l2;, score=0.467 total time=   0.3s\n[CV 5/5] END alpha=0.01, loss=log_loss, max_iter=1000, penalty=l2;, score=0.604 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=log_loss, max_iter=1000, penalty=l1;, score=0.778 total time=   0.1s\n[CV 4/5] END alpha=0.01, loss=log_loss, max_iter=1000, penalty=l1;, score=0.767 total time=   0.3s\n[CV 1/5] END alpha=0.01, loss=log_loss, max_iter=1000, penalty=elasticnet;, score=0.855 total time=   0.2s\n[CV 3/5] END alpha=0.01, loss=log_loss, max_iter=1000, penalty=elasticnet;, score=0.797 total time=   0.1s\n[CV 4/5] END alpha=0.01, loss=log_loss, max_iter=1000, penalty=elasticnet;, score=0.696 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=log_loss, max_iter=10000, penalty=l2;, score=0.777 total time=   0.3s\n[CV 4/5] END alpha=0.01, loss=log_loss, max_iter=10000, penalty=l2;, score=0.573 total time=   0.4s\n[CV 1/5] END alpha=0.01, loss=log_loss, max_iter=10000, penalty=l1;, score=0.794 total time=   0.3s\n[CV 3/5] END alpha=0.01, loss=log_loss, max_iter=10000, penalty=l1;, score=0.783 total time=   0.1s\n[CV 4/5] END alpha=0.01, loss=log_loss, max_iter=10000, penalty=l1;, score=0.784 total time=   0.3s\n[CV 1/5] END alpha=0.01, loss=log_loss, max_iter=10000, penalty=elasticnet;, score=0.847 total time=   0.3s\n[CV 3/5] END alpha=0.01, loss=log_loss, max_iter=10000, penalty=elasticnet;, score=0.636 total time=   0.2s\n[CV 5/5] END alpha=0.01, loss=log_loss, max_iter=10000, penalty=elasticnet;, score=0.833 total time=   0.3s\n[CV 2/5] END alpha=0.01, loss=log_loss, max_iter=30000, penalty=l2;, score=0.824 total time=   0.2s\n[CV 4/5] END alpha=0.01, loss=log_loss, max_iter=30000, penalty=l2;, score=0.601 total time=   0.3s\n[CV 2/5] END alpha=0.01, loss=log_loss, max_iter=30000, penalty=l1;, score=0.793 total time=   0.1s\n[CV 4/5] END alpha=0.01, loss=log_loss, max_iter=30000, penalty=l1;, score=0.781 total time=   0.1s\n[CV 5/5] END alpha=0.01, loss=log_loss, max_iter=30000, penalty=l1;, score=0.800 total time=   0.3s\n[CV 3/5] END alpha=0.01, loss=log_loss, max_iter=30000, penalty=elasticnet;, score=0.643 total time=   0.1s\n[CV 5/5] END alpha=0.01, loss=log_loss, max_iter=30000, penalty=elasticnet;, score=0.722 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=modified_huber, max_iter=1000, penalty=l2;, score=0.634 total time=   0.2s\n[CV 4/5] END alpha=0.01, loss=modified_huber, max_iter=1000, penalty=l2;, score=0.576 total time=   0.2s\n[CV 1/5] END alpha=0.01, loss=modified_huber, max_iter=1000, penalty=l1;, score=0.622 total time=   0.2s\n[CV 3/5] END alpha=0.01, loss=modified_huber, max_iter=1000, penalty=l1;, score=0.792 total time=   0.2s\n[CV 5/5] END alpha=0.01, loss=modified_huber, max_iter=1000, penalty=l1;, score=0.800 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=modified_huber, max_iter=1000, penalty=elasticnet;, score=0.853 total time=   0.2s\n[CV 3/5] END alpha=0.01, loss=modified_huber, max_iter=1000, penalty=elasticnet;, score=0.851 total time=   0.2s\n[CV 1/5] END alpha=0.01, loss=modified_huber, max_iter=10000, penalty=l2;, score=0.575 total time=   0.3s\n[CV 3/5] END alpha=0.01, loss=modified_huber, max_iter=10000, penalty=l2;, score=0.569 total time=   0.1s\n[CV 5/5] END alpha=0.01, loss=modified_huber, max_iter=10000, penalty=l2;, score=0.831 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=modified_huber, max_iter=10000, penalty=l1;, score=0.795 total time=   0.1s\n[CV 4/5] END alpha=0.01, loss=modified_huber, max_iter=10000, penalty=l1;, score=0.786 total time=   0.2s\n[CV 1/5] END alpha=0.01, loss=modified_huber, max_iter=10000, penalty=elasticnet;, score=0.855 total time=   0.3s\n[CV 3/5] END alpha=0.01, loss=modified_huber, max_iter=10000, penalty=elasticnet;, score=0.838 total time=   0.2s\n[CV 5/5] END alpha=0.01, loss=modified_huber, max_iter=10000, penalty=elasticnet;, score=0.831 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=modified_huber, max_iter=30000, penalty=l2;, score=0.567 total time=   0.2s\n[CV 4/5] END alpha=0.01, loss=modified_huber, max_iter=30000, penalty=l2;, score=0.586 total time=   0.2s\n[CV 1/5] END alpha=0.01, loss=modified_huber, max_iter=30000, penalty=l1;, score=0.796 total time=   0.1s\n[CV 3/5] END alpha=0.01, loss=modified_huber, max_iter=30000, penalty=l1;, score=0.763 total time=   0.1s\n[CV 4/5] END alpha=0.01, loss=modified_huber, max_iter=30000, penalty=l1;, score=0.775 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=modified_huber, max_iter=30000, penalty=elasticnet;, score=0.848 total time=   0.3s\n[CV 4/5] END alpha=0.01, loss=modified_huber, max_iter=30000, penalty=elasticnet;, score=0.853 total time=   0.3s\n[CV 1/5] END alpha=0.01, loss=squared_hinge, max_iter=1000, penalty=l2;, score=0.812 total time=   0.2s\n[CV 3/5] END alpha=0.01, loss=squared_hinge, max_iter=1000, penalty=l2;, score=0.839 total time=   0.3s\n[CV 1/5] END alpha=0.01, loss=squared_hinge, max_iter=1000, penalty=l1;, score=0.766 total time=   0.2s\n[CV 3/5] END alpha=0.01, loss=squared_hinge, max_iter=1000, penalty=l1;, score=0.760 total time=   0.3s\n[CV 5/5] END alpha=0.01, loss=squared_hinge, max_iter=1000, penalty=l1;, score=0.773 total time=   0.3s\n[CV 2/5] END alpha=0.01, loss=squared_hinge, max_iter=1000, penalty=elasticnet;, score=0.743 total time=   0.4s\n[CV 4/5] END alpha=0.01, loss=squared_hinge, max_iter=1000, penalty=elasticnet;, score=0.584 total time=   0.3s\n[CV 1/5] END alpha=0.01, loss=squared_hinge, max_iter=10000, penalty=l2;, score=0.500 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=squared_hinge, max_iter=10000, penalty=l2;, score=0.781 total time=   0.3s\n[CV 4/5] END alpha=0.01, loss=squared_hinge, max_iter=10000, penalty=l2;, score=0.487 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=squared_hinge, max_iter=10000, penalty=l1;, score=0.778 total time=   0.3s\n[CV 3/5] END alpha=0.01, loss=squared_hinge, max_iter=10000, penalty=l1;, score=0.774 total time=   0.4s\n[CV 1/5] END alpha=0.01, loss=squared_hinge, max_iter=10000, penalty=elasticnet;, score=0.567 total time=   0.3s\n[CV 3/5] END alpha=0.01, loss=squared_hinge, max_iter=10000, penalty=elasticnet;, score=0.807 total time=   0.2s\n[CV 5/5] END alpha=0.01, loss=squared_hinge, max_iter=10000, penalty=elasticnet;, score=0.604 total time=   0.4s\n[CV 1/5] END alpha=0.01, loss=squared_hinge, max_iter=30000, penalty=l2;, score=0.583 total time=   0.2s\n[CV 3/5] END alpha=0.01, loss=squared_hinge, max_iter=30000, penalty=l2;, score=0.603 total time=   0.3s\n[CV 4/5] END alpha=0.01, loss=squared_hinge, max_iter=30000, penalty=l2;, score=0.644 total time=   0.2s\n[CV 1/5] END alpha=0.01, loss=squared_hinge, max_iter=30000, penalty=l1;, score=0.758 total time=   0.4s\n[CV 3/5] END alpha=0.01, loss=squared_hinge, max_iter=30000, penalty=l1;, score=0.753 total time=   0.3s\n[CV 5/5] END alpha=0.01, loss=squared_hinge, max_iter=30000, penalty=l1;, score=0.755 total time=   0.2s\n"},"9":{"name":"stdout","text":"[CV 5/5] END alpha=0.01, loss=squared_hinge, max_iter=10000, penalty=l1;, score=0.784 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=squared_hinge, max_iter=10000, penalty=elasticnet;, score=0.579 total time=   0.3s\n[CV 4/5] END alpha=0.01, loss=squared_hinge, max_iter=10000, penalty=elasticnet;, score=0.828 total time=   0.7s\n[CV 2/5] END alpha=0.01, loss=squared_hinge, max_iter=30000, penalty=l2;, score=0.588 total time=   0.4s\n[CV 5/5] END alpha=0.01, loss=squared_hinge, max_iter=30000, penalty=l2;, score=0.592 total time=   0.3s\n[CV 2/5] END alpha=0.01, loss=squared_hinge, max_iter=30000, penalty=l1;, score=0.684 total time=   0.3s\n[CV 4/5] END alpha=0.01, loss=squared_hinge, max_iter=30000, penalty=l1;, score=0.762 total time=   0.3s\n[CV 1/5] END alpha=0.01, loss=squared_hinge, max_iter=30000, penalty=elasticnet;, score=0.796 total time=   0.4s\n[CV 3/5] END alpha=0.01, loss=squared_hinge, max_iter=30000, penalty=elasticnet;, score=0.598 total time=   0.4s\n[CV 5/5] END alpha=0.01, loss=squared_hinge, max_iter=30000, penalty=elasticnet;, score=0.572 total time=   0.4s\n[CV 2/5] END alpha=0.01, loss=perceptron, max_iter=1000, penalty=l2;, score=0.568 total time=   0.1s\n[CV 4/5] END alpha=0.01, loss=perceptron, max_iter=1000, penalty=l2;, score=0.626 total time=   0.2s\n[CV 1/5] END alpha=0.01, loss=perceptron, max_iter=1000, penalty=l1;, score=0.784 total time=   0.1s\n[CV 3/5] END alpha=0.01, loss=perceptron, max_iter=1000, penalty=l1;, score=0.790 total time=   0.1s\n[CV 4/5] END alpha=0.01, loss=perceptron, max_iter=1000, penalty=l1;, score=0.632 total time=   0.1s\n[CV 1/5] END alpha=0.01, loss=perceptron, max_iter=1000, penalty=elasticnet;, score=0.694 total time=   0.1s\n[CV 3/5] END alpha=0.01, loss=perceptron, max_iter=1000, penalty=elasticnet;, score=0.441 total time=   0.1s\n[CV 5/5] END alpha=0.01, loss=perceptron, max_iter=1000, penalty=elasticnet;, score=0.781 total time=   0.1s\n[CV 2/5] END alpha=0.01, loss=perceptron, max_iter=10000, penalty=l2;, score=0.575 total time=   0.2s\n[CV 4/5] END alpha=0.01, loss=perceptron, max_iter=10000, penalty=l2;, score=0.596 total time=   0.2s\n[CV 1/5] END alpha=0.01, loss=perceptron, max_iter=10000, penalty=l1;, score=0.794 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=perceptron, max_iter=10000, penalty=l1;, score=0.798 total time=   0.1s\n[CV 5/5] END alpha=0.01, loss=perceptron, max_iter=10000, penalty=l1;, score=0.785 total time=   0.2s\n[CV 2/5] END alpha=0.01, loss=perceptron, max_iter=10000, penalty=elasticnet;, score=0.849 total time=   0.2s\n[CV 4/5] END alpha=0.01, loss=perceptron, max_iter=10000, penalty=elasticnet;, score=0.850 total time=   0.2s\n[CV 1/5] END alpha=0.01, loss=perceptron, max_iter=30000, penalty=l2;, score=0.600 total time=   0.2s\n[CV 3/5] END alpha=0.01, loss=perceptron, max_iter=30000, penalty=l2;, score=0.597 total time=   0.2s\n[CV 5/5] END alpha=0.01, loss=perceptron, max_iter=30000, penalty=l2;, score=0.568 total time=   0.1s\n[CV 2/5] END alpha=0.01, loss=perceptron, max_iter=30000, penalty=l1;, score=0.796 total time=   0.2s\n[CV 4/5] END alpha=0.01, loss=perceptron, max_iter=30000, penalty=l1;, score=0.766 total time=   0.2s\n[CV 1/5] END alpha=0.01, loss=perceptron, max_iter=30000, penalty=elasticnet;, score=0.853 total time=   0.2s\n[CV 3/5] END alpha=0.01, loss=perceptron, max_iter=30000, penalty=elasticnet;, score=0.705 total time=   0.2s\n[CV 5/5] END alpha=0.01, loss=perceptron, max_iter=30000, penalty=elasticnet;, score=0.467 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=hinge, max_iter=1000, penalty=l2;, score=0.610 total time=   0.4s\n[CV 4/5] END alpha=0.1, loss=hinge, max_iter=1000, penalty=l2;, score=0.506 total time=   0.1s\n[CV 1/5] END alpha=0.1, loss=hinge, max_iter=1000, penalty=l1;, score=0.742 total time=   0.1s\n[CV 4/5] END alpha=0.1, loss=hinge, max_iter=1000, penalty=l1;, score=0.739 total time=   0.3s\n[CV 2/5] END alpha=0.1, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.608 total time=   0.2s\n[CV 4/5] END alpha=0.1, loss=hinge, max_iter=1000, penalty=elasticnet;, score=0.556 total time=   0.2s\n[CV 1/5] END alpha=0.1, loss=hinge, max_iter=10000, penalty=l2;, score=0.826 total time=   0.4s\n[CV 3/5] END alpha=0.1, loss=hinge, max_iter=10000, penalty=l2;, score=0.828 total time=   0.2s\n[CV 4/5] END alpha=0.1, loss=hinge, max_iter=10000, penalty=l2;, score=0.508 total time=   0.1s\n[CV 1/5] END alpha=0.1, loss=hinge, max_iter=10000, penalty=l1;, score=0.771 total time=   0.1s\n[CV 3/5] END alpha=0.1, loss=hinge, max_iter=10000, penalty=l1;, score=0.671 total time=   0.1s\n[CV 4/5] END alpha=0.1, loss=hinge, max_iter=10000, penalty=l1;, score=0.705 total time=   0.4s\n[CV 2/5] END alpha=0.1, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.482 total time=   0.2s\n[CV 4/5] END alpha=0.1, loss=hinge, max_iter=10000, penalty=elasticnet;, score=0.637 total time=   0.2s\n[CV 1/5] END alpha=0.1, loss=hinge, max_iter=30000, penalty=l2;, score=0.835 total time=   0.2s\n[CV 3/5] END alpha=0.1, loss=hinge, max_iter=30000, penalty=l2;, score=0.588 total time=   0.2s\n[CV 4/5] END alpha=0.1, loss=hinge, max_iter=30000, penalty=l2;, score=0.547 total time=   0.2s\n[CV 1/5] END alpha=0.1, loss=hinge, max_iter=30000, penalty=l1;, score=0.740 total time=   0.1s\n[CV 3/5] END alpha=0.1, loss=hinge, max_iter=30000, penalty=l1;, score=0.561 total time=   0.1s\n[CV 5/5] END alpha=0.1, loss=hinge, max_iter=30000, penalty=l1;, score=0.733 total time=   0.2s\n[CV 2/5] END alpha=0.1, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.571 total time=   0.2s\n[CV 4/5] END alpha=0.1, loss=hinge, max_iter=30000, penalty=elasticnet;, score=0.708 total time=   0.2s\n[CV 1/5] END alpha=0.1, loss=log_loss, max_iter=1000, penalty=l2;, score=0.654 total time=   0.3s\n[CV 3/5] END alpha=0.1, loss=log_loss, max_iter=1000, penalty=l2;, score=0.621 total time=   0.3s\n[CV 5/5] END alpha=0.1, loss=log_loss, max_iter=1000, penalty=l2;, score=0.504 total time=   0.4s\n[CV 2/5] END alpha=0.1, loss=log_loss, max_iter=1000, penalty=l1;, score=0.764 total time=   0.4s\n[CV 4/5] END alpha=0.1, loss=log_loss, max_iter=1000, penalty=l1;, score=0.566 total time=   0.3s\n[CV 1/5] END alpha=0.1, loss=log_loss, max_iter=1000, penalty=elasticnet;, score=0.673 total time=   0.2s\n[CV 3/5] END alpha=0.1, loss=log_loss, max_iter=1000, penalty=elasticnet;, score=0.630 total time=   0.2s\n[CV 5/5] END alpha=0.1, loss=log_loss, max_iter=1000, penalty=elasticnet;, score=0.755 total time=   0.3s\n[CV 2/5] END alpha=0.1, loss=log_loss, max_iter=10000, penalty=l2;, score=0.631 total time=   0.3s\n[CV 4/5] END alpha=0.1, loss=log_loss, max_iter=10000, penalty=l2;, score=0.623 total time=   0.5s\n[CV 3/5] END alpha=0.1, loss=log_loss, max_iter=10000, penalty=l1;, score=0.696 total time=   0.2s\n[CV 5/5] END alpha=0.1, loss=log_loss, max_iter=10000, penalty=l1;, score=0.515 total time=   0.2s\n[CV 1/5] END alpha=0.1, loss=log_loss, max_iter=10000, penalty=elasticnet;, score=0.733 total time=   0.3s\n[CV 4/5] END alpha=0.1, loss=log_loss, max_iter=10000, penalty=elasticnet;, score=0.609 total time=   0.3s\n[CV 1/5] END alpha=0.1, loss=log_loss, max_iter=30000, penalty=l2;, score=0.608 total time=   0.5s\n[CV 4/5] END alpha=0.1, loss=log_loss, max_iter=30000, penalty=l2;, score=0.564 total time=   0.2s\n[CV 1/5] END alpha=0.1, loss=log_loss, max_iter=30000, penalty=l1;, score=0.473 total time=   0.1s\n[CV 2/5] END alpha=0.1, loss=log_loss, max_iter=30000, penalty=l1;, score=0.705 total time=   0.3s\n[CV 5/5] END alpha=0.1, loss=log_loss, max_iter=30000, penalty=l1;, score=0.719 total time=   0.2s\n[CV 1/5] END alpha=0.1, loss=log_loss, max_iter=30000, penalty=elasticnet;, score=0.652 total time=   0.2s\n[CV 3/5] END alpha=0.1, loss=log_loss, max_iter=30000, penalty=elasticnet;, score=0.789 total time=   0.3s\n[CV 5/5] END alpha=0.1, loss=log_loss, max_iter=30000, penalty=elasticnet;, score=0.755 total time=   0.2s\n[CV 3/5] END alpha=0.1, loss=modified_huber, max_iter=1000, penalty=l2;, score=0.819 total time=   0.1s\n[CV 4/5] END alpha=0.1, loss=modified_huber, max_iter=1000, penalty=l2;, score=0.718 total time=   0.2s\n[CV 1/5] END alpha=0.1, loss=modified_huber, max_iter=1000, penalty=l1;, score=0.767 total time=   0.2s\n"}},"pos":12,"scrolled":true,"start":1657723067003,"state":"done","type":"cell"}
{"cell_type":"code","end":1657724107096,"exec_count":20,"id":"be6659","input":"NB_model = CategoricalNB(alpha = 3)\n\nNB_model.fit(x_train, y_train)\n\ny_pred_nb = NB_model.predict(x_test)\n\nrecall = sklearn.metrics.recall_score(y_test,y_pred_nb)\nprecision = sklearn.metrics.precision_score(y_test, y_pred_nb)\naccuracy = sklearn.metrics.accuracy_score(y_test, y_pred_nb)\nf_measure = sklearn.metrics.f1_score(y_test, y_pred_nb)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\nsns.heatmap(confusion_matrix(y_test, y_pred_nb), annot=True, fmt='g')\n\nacc = accuracy_score(y_test, y_pred_nb)\nprec = precision_score(y_test, y_pred_nb)\nrecall = recall_score(y_test, y_pred_nb)\nf1 = f1_score(y_test, y_pred_nb)\nscores['nb'] = {'accuracy': acc, 'precision':prec, 'recall':recall, 'f1_score':f1}\n# Ivan","kernel":"ds_env","output":{"0":{"name":"stdout","text":"R:  0.8657777777777778\nP:  0.9018518518518519\nA:  0.9007722007722008\nF:  0.8834467120181406\n"},"1":{"data":{"image/png":"109cbce672aa7ac916691495d256eb209d2c6eba","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":13,"scrolled":true,"start":1657724106928,"state":"done","type":"cell"}
{"cell_type":"code","end":1657725167207,"exec_count":32,"id":"9770c5","input":"RF_model = RandomForestClassifier() # n_estimators=30, criterion=\"entropy\"\n\nRF_model.fit(x_train, y_train)\n\ny_pred_rf = RF_model.predict(x_test)\n\nrecall = sklearn.metrics.recall_score(y_test, y_pred_rf)\nprecision = sklearn.metrics.precision_score(y_test, y_pred_rf)\naccuracy = sklearn.metrics.accuracy_score(y_test, y_pred_rf)\nf_measure = sklearn.metrics.f1_score(y_test, y_pred_rf)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\nsns.heatmap(confusion_matrix(y_test, y_pred_rf), annot=True, fmt='g')\n\n\nacc = accuracy_score(y_test, y_pred_rf)\nprec = precision_score(y_test, y_pred_rf)\nrecall = recall_score(y_test, y_pred_rf)\nf1 = f1_score(y_test, y_pred_rf)\nscores['rf'] = {'accuracy': acc, 'precision':prec, 'recall':recall, 'f1_score':f1}","kernel":"ds_env","output":{"0":{"name":"stdout","text":"R:  0.9422222222222222\nP:  0.9422222222222222\nA:  0.9498069498069498\nF:  0.9422222222222222\n"},"1":{"data":{"image/png":"77a5d7f0a3d2bd95b376e09f44e0a2a0e19df7dd","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":16,"scrolled":false,"start":1657725165898,"state":"done","type":"cell"}
{"cell_type":"code","end":1657725775949,"exec_count":35,"id":"84912c","input":"\n\n\nparams = {'min_samples_split': list(range(1,7)), 'min_samples_leaf': list(range(1,7)), 'min_weight_fraction_leaf': [-3.0,-2.0,-1.0,0.0,1.0,2.0,3.0], 'max_depth': list(range(1,6)), 'ccp_alpha': [0,0,1.0,2.0,3.0]}\ntree_gsearch = GSearch(DecisionTreeClassifier(max_depth=7), params)\ntree_gsearch.fit(x_train, y_train)\nfig = plt.figure(figsize=(25,20))\n_ = tree.plot_tree(tree_clf,\n                   feature_names=input_columns.columns,  \n                   class_names=['Not Satisfied','Satisfied'],\n                   filled=True, fontsize=10)\n\nbest_estimator = tree_gsearch.best_estimator_\ny_pred_tree = best_estimator.predict(x_test)\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred_tree))\nprint(\"Precision:\", precision_score(y_test, y_pred_tree))\nprint(\"Recall:\", recall_score(y_test, y_pred_tree))\nprint(\"F1 Score:\", f1_score(y_test, y_pred_tree))\nacc = accuracy_score(y_test, y_pred_tree)\nprec = precision_score(y_test, y_pred_tree)\nrecall = recall_score(y_test, y_pred_tree)\nf1 = f1_score(y_test, y_pred_tree)\nscores['tree grid'] = {'accuracy': acc, 'precision':prec, 'recall':recall, 'f1_score':f1}","kernel":"ds_env","output":{"0":{"name":"stderr","text":"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:378: FitFailedWarning: \n27750 fits failed out of a total of 31500.\nThe score on these train-test partitions for these parameters will be set to nan.\nIf these failures are not expected, you can try to debug them by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n5250 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 969, in fit\n    super().fit(\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 265, in fit\n    check_scalar(\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/utils/validation.py\", line 1480, in check_scalar\n    raise ValueError(\nValueError: min_samples_split == 1, must be >= 2.\n\n--------------------------------------------------------------------------------\n3750 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 969, in fit\n    super().fit(\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 286, in fit\n    check_scalar(\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/utils/validation.py\", line 1480, in check_scalar\n    raise ValueError(\nValueError: min_weight_fraction_leaf == -3.0, must be >= 0.0.\n\n--------------------------------------------------------------------------------\n3750 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 969, in fit\n    super().fit(\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 286, in fit\n    check_scalar(\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/utils/validation.py\", line 1480, in check_scalar\n    raise ValueError(\nValueError: min_weight_fraction_leaf == -2.0, must be >= 0.0.\n\n--------------------------------------------------------------------------------\n3750 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 969, in fit\n    super().fit(\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 286, in fit\n    check_scalar(\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/utils/validation.py\", line 1480, in check_scalar\n    raise ValueError(\nValueError: min_weight_fraction_leaf == -1.0, must be >= 0.0.\n\n--------------------------------------------------------------------------------\n3750 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 969, in fit\n    super().fit(\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 286, in fit\n    check_scalar(\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/utils/validation.py\", line 1489, in check_scalar\n    raise ValueError(\nValueError: min_weight_fraction_leaf == 1.0, must be <= 0.5.\n\n--------------------------------------------------------------------------------\n3750 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 969, in fit\n    super().fit(\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 286, in fit\n    check_scalar(\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/utils/validation.py\", line 1489, in check_scalar\n    raise ValueError(\nValueError: min_weight_fraction_leaf == 2.0, must be <= 0.5.\n\n--------------------------------------------------------------------------------\n3750 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 969, in fit\n    super().fit(\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 286, in fit\n    check_scalar(\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/utils/validation.py\", line 1489, in check_scalar\n    raise ValueError(\nValueError: min_weight_fraction_leaf == 3.0, must be <= 0.5.\n\n  warnings.warn(some_fits_failed_message, FitFailedWarning)\n/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/model_selection/_search.py:953: UserWarning: One or more of the test scores are non-finite: [nan nan nan ... nan nan nan]\n  warnings.warn(\n"},"1":{"name":"stdout","text":"Accuracy: 0.9158301158301159\nPrecision: 0.9126478616924477\nRecall: 0.8915555555555555\nF1 Score: 0.9019784172661871\n"},"2":{"data":{"image/png":"400328f37c173eb941c41224feab2d37ace2b4e5","text/plain":"<Figure size 1800x1440 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":18,"scrolled":true,"start":1657725557757,"state":"done","type":"cell"}
{"cell_type":"code","end":1657725775967,"exec_count":36,"id":"f98161","input":"print(scores)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"{'sgd': {'accuracy': 0.6791505791505792, 'precision': 0.5888754534461911, 'recall': 0.8657777777777778, 'f1_score': 0.7009715725080965}, 'sgd grid': {'accuracy': 0.8555984555984556, 'precision': 0.8499534016775396, 'recall': 0.8106666666666666, 'f1_score': 0.8298453139217471}, 'nb': {'accuracy': 0.9007722007722008, 'precision': 0.9018518518518519, 'recall': 0.8657777777777778, 'f1_score': 0.8834467120181406}, 'rf': {'accuracy': 0.9498069498069498, 'precision': 0.9422222222222222, 'recall': 0.9422222222222222, 'f1_score': 0.9422222222222222}, 'tree': {'accuracy': 0.9293436293436294, 'precision': 0.9109947643979057, 'recall': 0.928, 'f1_score': 0.9194187582562747}, 'tree grid': {'accuracy': 0.9158301158301159, 'precision': 0.9126478616924477, 'recall': 0.8915555555555555, 'f1_score': 0.9019784172661871}}\n"}},"pos":19,"start":1657725775959,"state":"done","type":"cell"}
{"cell_type":"code","end":1657725879019,"exec_count":37,"id":"c0bce4","input":"\nadc_clf = ADC()\nadc_clf.fit(x_train, y_train)\ny_pred_adc = adc_clf.predict(x_test)\nacc = accuracy_score(y_test, y_pred_adc)\nprec = precision_score(y_test, y_pred_adc)\nrecall = recall_score(y_test, y_pred_adc)\nf1 = f1_score(y_test, y_pred_adc)\nscores['adc'] = {'accuracy': acc, 'precision':prec, 'recall':recall, 'f1_score':f1}","kernel":"ds_env","pos":27,"start":1657725878434,"state":"done","type":"cell"}
{"cell_type":"code","end":1657726491164,"exec_count":39,"id":"780f83","input":"\nlr_clf = LR()\nlr_clf.fit(x_train, y_train)\nlr_pred=lr_clf.predict(x_test)\n\ny_pred_lr = lr_clf.predict(x_test)\nacc = accuracy_score(y_test, y_pred_lr)\nprec = precision_score(y_test, y_pred_lr)\nrecall = recall_score(y_test, y_pred_lr)\nf1 = f1_score(y_test, y_pred_lr)\nscores['lr'] = {'accuracy': acc, 'precision':prec, 'recall':recall, 'f1_score':f1}","kernel":"ds_env","output":{"0":{"name":"stderr","text":"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n"}},"pos":32,"start":1657726491018,"state":"done","type":"cell"}
{"cell_type":"code","end":1657726667168,"exec_count":42,"id":"8652cd","input":"knn_clf = KNN()\nknn_clf.fit(x_train, y_train)\nknn_pred = knn_clf.predict(x_test)\ny_pred_knn = knn_clf.predict(x_test)\n\nax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test, knn_pred), annot=True, fmt='g')\nax.set_xlabel('Predicted labels')\nax.set_ylabel('True labels')\nax.set_title('Confusion Matrix');\nax.xaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied',]); ax.yaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied'])\n\nrecall = sklearn.metrics.recall_score(y_test, knn_pred)\nprecision = sklearn.metrics.precision_score(y_test, knn_pred)\naccuracy = sklearn.metrics.accuracy_score(y_test, knn_pred)\nf_measure = sklearn.metrics.f1_score(y_test, knn_pred)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\ny_pred_lr = knn_clf.predict(x_test)\nacc = accuracy_score(y_test, y_pred_knn)\nprec = precision_score(y_test, y_pred_knn)\nrecall = recall_score(y_test, y_pred_knn)\nf1 = f1_score(y_test, y_pred_knn)\nscores['knn'] = {'accuracy': acc, 'precision':prec, 'recall':recall, 'f1_score':f1}\n# Sebastian ","kernel":"ds_env","output":{"0":{"name":"stdout","text":"R:  0.5751111111111111\nP:  0.6293774319066148\nA:  0.6683397683397684\nF:  0.6010218300046447\n"},"1":{"data":{"image/png":"614c5285da76bdbe130fe38a3b8182243015ab63","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":36,"start":1657726666178,"state":"done","type":"cell"}
{"cell_type":"code","end":1657726854024,"exec_count":44,"id":"f46092","input":"grid_params = {'n_neighbors':[1,2,3,4,5,6,7], 'leaf_size':[45] , 'p' :[4] }\n\ngs = GSearch(KNN(), grid_params)\ngs.fit(x_train, y_train)\n\nbest_estimator = gs.best_estimator_\ny_pred_knn = best_estimator.predict(x_test)\nacc = accuracy_score(y_test, y_pred_knn)\nprec = precision_score(y_test, y_pred_knn)\nrecall = recall_score(y_test, y_pred_knn)\nf1 = f1_score(y_test, y_pred_knn)\nscores['knn_grid'] = {'accuracy': acc, 'precision':prec, 'recall':recall, 'f1_score':f1}\n","kernel":"ds_env","output":{"0":{"ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Input \u001b[0;32mIn [44]\u001b[0m, in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m grid_params \u001b[38;5;241m=\u001b[39m {\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mn_neighbors\u001b[39m\u001b[38;5;124m'\u001b[39m:[\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m2\u001b[39m,\u001b[38;5;241m3\u001b[39m,\u001b[38;5;241m4\u001b[39m,\u001b[38;5;241m5\u001b[39m,\u001b[38;5;241m6\u001b[39m,\u001b[38;5;241m7\u001b[39m], \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mleaf_size\u001b[39m\u001b[38;5;124m'\u001b[39m:[\u001b[38;5;241m45\u001b[39m] , \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mp\u001b[39m\u001b[38;5;124m'\u001b[39m :[\u001b[38;5;241m4\u001b[39m] }\n\u001b[1;32m      3\u001b[0m gs \u001b[38;5;241m=\u001b[39m GSearch(KNN(), grid_params)\n\u001b[0;32m----> 4\u001b[0m \u001b[43mgs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      6\u001b[0m best_estimator \u001b[38;5;241m=\u001b[39m gs\u001b[38;5;241m.\u001b[39mbest_estimator_\n\u001b[1;32m      7\u001b[0m y_pred_knn \u001b[38;5;241m=\u001b[39m best_estimator\u001b[38;5;241m.\u001b[39mpredict(x_test)\n","File \u001b[0;32m~/.local/lib/python3.8/site-packages/sklearn/model_selection/_search.py:875\u001b[0m, in \u001b[0;36mBaseSearchCV.fit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    869\u001b[0m     results \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_format_results(\n\u001b[1;32m    870\u001b[0m         all_candidate_params, n_splits, all_out, all_more_results\n\u001b[1;32m    871\u001b[0m     )\n\u001b[1;32m    873\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m results\n\u001b[0;32m--> 875\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_run_search\u001b[49m\u001b[43m(\u001b[49m\u001b[43mevaluate_candidates\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    877\u001b[0m \u001b[38;5;66;03m# multimetric is determined here because in the case of a callable\u001b[39;00m\n\u001b[1;32m    878\u001b[0m \u001b[38;5;66;03m# self.scoring the return type is only known after calling\u001b[39;00m\n\u001b[1;32m    879\u001b[0m first_test_score \u001b[38;5;241m=\u001b[39m all_out[\u001b[38;5;241m0\u001b[39m][\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtest_scores\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n","File \u001b[0;32m~/.local/lib/python3.8/site-packages/sklearn/model_selection/_search.py:1375\u001b[0m, in \u001b[0;36mGridSearchCV._run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1373\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_run_search\u001b[39m(\u001b[38;5;28mself\u001b[39m, evaluate_candidates):\n\u001b[1;32m   1374\u001b[0m     \u001b[38;5;124;03m\"\"\"Search all candidates in param_grid\"\"\"\u001b[39;00m\n\u001b[0;32m-> 1375\u001b[0m     \u001b[43mevaluate_candidates\u001b[49m\u001b[43m(\u001b[49m\u001b[43mParameterGrid\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mparam_grid\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/.local/lib/python3.8/site-packages/sklearn/model_selection/_search.py:822\u001b[0m, in \u001b[0;36mBaseSearchCV.fit.<locals>.evaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    814\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mverbose \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m    815\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\n\u001b[1;32m    816\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFitting \u001b[39m\u001b[38;5;132;01m{0}\u001b[39;00m\u001b[38;5;124m folds for each of \u001b[39m\u001b[38;5;132;01m{1}\u001b[39;00m\u001b[38;5;124m candidates,\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    817\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m totalling \u001b[39m\u001b[38;5;132;01m{2}\u001b[39;00m\u001b[38;5;124m fits\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(\n\u001b[1;32m    818\u001b[0m             n_splits, n_candidates, n_candidates \u001b[38;5;241m*\u001b[39m n_splits\n\u001b[1;32m    819\u001b[0m         )\n\u001b[1;32m    820\u001b[0m     )\n\u001b[0;32m--> 822\u001b[0m out \u001b[38;5;241m=\u001b[39m \u001b[43mparallel\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    823\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdelayed\u001b[49m\u001b[43m(\u001b[49m\u001b[43m_fit_and_score\u001b[49m\u001b[43m)\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    824\u001b[0m \u001b[43m        \u001b[49m\u001b[43mclone\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbase_estimator\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    825\u001b[0m \u001b[43m        \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    826\u001b[0m \u001b[43m        \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    827\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtrain\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtrain\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    828\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtest\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtest\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    829\u001b[0m \u001b[43m        \u001b[49m\u001b[43mparameters\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparameters\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    830\u001b[0m \u001b[43m        \u001b[49m\u001b[43msplit_progress\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43msplit_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_splits\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    831\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcandidate_progress\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcand_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_candidates\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    832\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mfit_and_score_kwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    833\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    834\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43mcand_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mparameters\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43msplit_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrain\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtest\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mproduct\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    835\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43menumerate\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcandidate_params\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43menumerate\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcv\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msplit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgroups\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    836\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    837\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    839\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(out) \u001b[38;5;241m<\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m    840\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    841\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNo fits were performed. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    842\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWas the CV iterator empty? \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    843\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWere there no candidates?\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    844\u001b[0m     )\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/joblib/parallel.py:1046\u001b[0m, in \u001b[0;36mParallel.__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1043\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdispatch_one_batch(iterator):\n\u001b[1;32m   1044\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_iterating \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_original_iterator \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m-> 1046\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdispatch_one_batch\u001b[49m\u001b[43m(\u001b[49m\u001b[43miterator\u001b[49m\u001b[43m)\u001b[49m:\n\u001b[1;32m   1047\u001b[0m     \u001b[38;5;28;01mpass\u001b[39;00m\n\u001b[1;32m   1049\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m pre_dispatch \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mall\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mor\u001b[39;00m n_jobs \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m   1050\u001b[0m     \u001b[38;5;66;03m# The iterable was consumed all at once by the above for loop.\u001b[39;00m\n\u001b[1;32m   1051\u001b[0m     \u001b[38;5;66;03m# No need to wait for async callbacks to trigger to\u001b[39;00m\n\u001b[1;32m   1052\u001b[0m     \u001b[38;5;66;03m# consumption.\u001b[39;00m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/joblib/parallel.py:861\u001b[0m, in \u001b[0;36mParallel.dispatch_one_batch\u001b[0;34m(self, iterator)\u001b[0m\n\u001b[1;32m    859\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[1;32m    860\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 861\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_dispatch\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtasks\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    862\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mTrue\u001b[39;00m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/joblib/parallel.py:779\u001b[0m, in \u001b[0;36mParallel._dispatch\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    777\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n\u001b[1;32m    778\u001b[0m     job_idx \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jobs)\n\u001b[0;32m--> 779\u001b[0m     job \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_backend\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply_async\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbatch\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcallback\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcb\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    780\u001b[0m     \u001b[38;5;66;03m# A job can complete so quickly than its callback is\u001b[39;00m\n\u001b[1;32m    781\u001b[0m     \u001b[38;5;66;03m# called before we get here, causing self._jobs to\u001b[39;00m\n\u001b[1;32m    782\u001b[0m     \u001b[38;5;66;03m# grow. To ensure correct results ordering, .insert is\u001b[39;00m\n\u001b[1;32m    783\u001b[0m     \u001b[38;5;66;03m# used (rather than .append) in the following line\u001b[39;00m\n\u001b[1;32m    784\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jobs\u001b[38;5;241m.\u001b[39minsert(job_idx, job)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/joblib/_parallel_backends.py:208\u001b[0m, in \u001b[0;36mSequentialBackend.apply_async\u001b[0;34m(self, func, callback)\u001b[0m\n\u001b[1;32m    206\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_async\u001b[39m(\u001b[38;5;28mself\u001b[39m, func, callback\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[1;32m    207\u001b[0m     \u001b[38;5;124;03m\"\"\"Schedule a func to be run\"\"\"\u001b[39;00m\n\u001b[0;32m--> 208\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[43mImmediateResult\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfunc\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    209\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m callback:\n\u001b[1;32m    210\u001b[0m         callback(result)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/joblib/_parallel_backends.py:572\u001b[0m, in \u001b[0;36mImmediateResult.__init__\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    569\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__init__\u001b[39m(\u001b[38;5;28mself\u001b[39m, batch):\n\u001b[1;32m    570\u001b[0m     \u001b[38;5;66;03m# Don't delay the application, to avoid keeping the input\u001b[39;00m\n\u001b[1;32m    571\u001b[0m     \u001b[38;5;66;03m# arguments in memory\u001b[39;00m\n\u001b[0;32m--> 572\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mresults \u001b[38;5;241m=\u001b[39m \u001b[43mbatch\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/joblib/parallel.py:262\u001b[0m, in \u001b[0;36mBatchedCalls.__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    258\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    259\u001b[0m     \u001b[38;5;66;03m# Set the default nested backend to self._backend but do not set the\u001b[39;00m\n\u001b[1;32m    260\u001b[0m     \u001b[38;5;66;03m# change the default number of processes to -1\u001b[39;00m\n\u001b[1;32m    261\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m parallel_backend(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backend, n_jobs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_n_jobs):\n\u001b[0;32m--> 262\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m [func(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m    263\u001b[0m                 \u001b[38;5;28;01mfor\u001b[39;00m func, args, kwargs \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mitems]\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/joblib/parallel.py:262\u001b[0m, in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    258\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    259\u001b[0m     \u001b[38;5;66;03m# Set the default nested backend to self._backend but do not set the\u001b[39;00m\n\u001b[1;32m    260\u001b[0m     \u001b[38;5;66;03m# change the default number of processes to -1\u001b[39;00m\n\u001b[1;32m    261\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m parallel_backend(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backend, n_jobs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_n_jobs):\n\u001b[0;32m--> 262\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m [\u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    263\u001b[0m                 \u001b[38;5;28;01mfor\u001b[39;00m func, args, kwargs \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mitems]\n","File \u001b[0;32m~/.local/lib/python3.8/site-packages/sklearn/utils/fixes.py:117\u001b[0m, in \u001b[0;36m_FuncWrapper.__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    115\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m    116\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m config_context(\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mconfig):\n\u001b[0;32m--> 117\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfunction\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/.local/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:708\u001b[0m, in \u001b[0;36m_fit_and_score\u001b[0;34m(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, return_train_score, return_parameters, return_n_test_samples, return_times, return_estimator, split_progress, candidate_progress, error_score)\u001b[0m\n\u001b[1;32m    705\u001b[0m result[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfit_error\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    707\u001b[0m fit_time \u001b[38;5;241m=\u001b[39m time\u001b[38;5;241m.\u001b[39mtime() \u001b[38;5;241m-\u001b[39m start_time\n\u001b[0;32m--> 708\u001b[0m test_scores \u001b[38;5;241m=\u001b[39m \u001b[43m_score\u001b[49m\u001b[43m(\u001b[49m\u001b[43mestimator\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX_test\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_test\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mscorer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merror_score\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    709\u001b[0m score_time \u001b[38;5;241m=\u001b[39m time\u001b[38;5;241m.\u001b[39mtime() \u001b[38;5;241m-\u001b[39m start_time \u001b[38;5;241m-\u001b[39m fit_time\n\u001b[1;32m    710\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m return_train_score:\n","File \u001b[0;32m~/.local/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:767\u001b[0m, in \u001b[0;36m_score\u001b[0;34m(estimator, X_test, y_test, scorer, error_score)\u001b[0m\n\u001b[1;32m    765\u001b[0m         scores \u001b[38;5;241m=\u001b[39m scorer(estimator, X_test)\n\u001b[1;32m    766\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 767\u001b[0m         scores \u001b[38;5;241m=\u001b[39m \u001b[43mscorer\u001b[49m\u001b[43m(\u001b[49m\u001b[43mestimator\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX_test\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_test\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    768\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m:\n\u001b[1;32m    769\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m error_score \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraise\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n","File \u001b[0;32m~/.local/lib/python3.8/site-packages/sklearn/metrics/_scorer.py:429\u001b[0m, in \u001b[0;36m_passthrough_scorer\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m    427\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_passthrough_scorer\u001b[39m(estimator, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m    428\u001b[0m     \u001b[38;5;124;03m\"\"\"Function that wraps estimator.score\"\"\"\u001b[39;00m\n\u001b[0;32m--> 429\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mestimator\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mscore\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/.local/lib/python3.8/site-packages/sklearn/base.py:666\u001b[0m, in \u001b[0;36mClassifierMixin.score\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    641\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    642\u001b[0m \u001b[38;5;124;03mReturn the mean accuracy on the given test data and labels.\u001b[39;00m\n\u001b[1;32m    643\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    662\u001b[0m \u001b[38;5;124;03m    Mean accuracy of ``self.predict(X)`` wrt. `y`.\u001b[39;00m\n\u001b[1;32m    663\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    664\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mmetrics\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m accuracy_score\n\u001b[0;32m--> 666\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m accuracy_score(y, \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpredict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m)\u001b[49m, sample_weight\u001b[38;5;241m=\u001b[39msample_weight)\n","File \u001b[0;32m~/.local/lib/python3.8/site-packages/sklearn/neighbors/_classification.py:219\u001b[0m, in \u001b[0;36mKNeighborsClassifier.predict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    203\u001b[0m \u001b[38;5;124;03m\"\"\"Predict the class labels for the provided data.\u001b[39;00m\n\u001b[1;32m    204\u001b[0m \n\u001b[1;32m    205\u001b[0m \u001b[38;5;124;03mParameters\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    214\u001b[0m \u001b[38;5;124;03m    Class labels for each data sample.\u001b[39;00m\n\u001b[1;32m    215\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    216\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mweights \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124muniform\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m    217\u001b[0m     \u001b[38;5;66;03m# In that case, we do not need the distances to perform\u001b[39;00m\n\u001b[1;32m    218\u001b[0m     \u001b[38;5;66;03m# the weighting so we do not compute them.\u001b[39;00m\n\u001b[0;32m--> 219\u001b[0m     neigh_ind \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mkneighbors\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreturn_distance\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m    220\u001b[0m     neigh_dist \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    221\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n","File \u001b[0;32m~/.local/lib/python3.8/site-packages/sklearn/neighbors/_base.py:763\u001b[0m, in \u001b[0;36mKNeighborsMixin.kneighbors\u001b[0;34m(self, X, n_neighbors, return_distance)\u001b[0m\n\u001b[1;32m    756\u001b[0m use_pairwise_distances_reductions \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m    757\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fit_method \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mbrute\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    758\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m PairwiseDistancesArgKmin\u001b[38;5;241m.\u001b[39mis_usable_for(\n\u001b[1;32m    759\u001b[0m         X \u001b[38;5;28;01mif\u001b[39;00m X \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fit_X, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fit_X, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39meffective_metric_\n\u001b[1;32m    760\u001b[0m     )\n\u001b[1;32m    761\u001b[0m )\n\u001b[1;32m    762\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m use_pairwise_distances_reductions:\n\u001b[0;32m--> 763\u001b[0m     results \u001b[38;5;241m=\u001b[39m \u001b[43mPairwiseDistancesArgKmin\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcompute\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    764\u001b[0m \u001b[43m        \u001b[49m\u001b[43mX\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    765\u001b[0m \u001b[43m        \u001b[49m\u001b[43mY\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_fit_X\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    766\u001b[0m \u001b[43m        \u001b[49m\u001b[43mk\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mn_neighbors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    767\u001b[0m \u001b[43m        \u001b[49m\u001b[43mmetric\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43meffective_metric_\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    768\u001b[0m \u001b[43m        \u001b[49m\u001b[43mmetric_kwargs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43meffective_metric_params_\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    769\u001b[0m \u001b[43m        \u001b[49m\u001b[43mstrategy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mauto\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m    770\u001b[0m \u001b[43m        \u001b[49m\u001b[43mreturn_distance\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mreturn_distance\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    771\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    773\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m (\n\u001b[1;32m    774\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fit_method \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mbrute\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmetric \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mprecomputed\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m issparse(X)\n\u001b[1;32m    775\u001b[0m ):\n\u001b[1;32m    776\u001b[0m     results \u001b[38;5;241m=\u001b[39m _kneighbors_from_graph(\n\u001b[1;32m    777\u001b[0m         X, n_neighbors\u001b[38;5;241m=\u001b[39mn_neighbors, return_distance\u001b[38;5;241m=\u001b[39mreturn_distance\n\u001b[1;32m    778\u001b[0m     )\n","File \u001b[0;32msklearn/metrics/_pairwise_distances_reduction.pyx:691\u001b[0m, in \u001b[0;36msklearn.metrics._pairwise_distances_reduction.PairwiseDistancesArgKmin.compute\u001b[0;34m()\u001b[0m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/threadpoolctl.py:171\u001b[0m, in \u001b[0;36m_ThreadpoolLimiter.__exit__\u001b[0;34m(self, type, value, traceback)\u001b[0m\n\u001b[1;32m    168\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__enter__\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    169\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\n\u001b[0;32m--> 171\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__exit__\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;28mtype\u001b[39m, value, traceback):\n\u001b[1;32m    172\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mrestore_original_limits()\n\u001b[1;32m    174\u001b[0m \u001b[38;5;129m@classmethod\u001b[39m\n\u001b[1;32m    175\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mwrap\u001b[39m(\u001b[38;5;28mcls\u001b[39m, controller, \u001b[38;5;241m*\u001b[39m, limits\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, user_api\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}},"pos":37,"start":1657726732614,"state":"done","type":"cell"}
{"cell_type":"code","end":1657726872588,"exec_count":46,"id":"162dcf","input":"scores_df = pd.DataFrame(scores)\nscores_df = round(scores_df, 2)\n\ndata = []\nfor column in scores_df.columns:\n    data.append(scores_df[column].tolist())\nfig = go.Figure(data=[go.Table(header=dict(values=list(scores_df.columns)),\n                 cells=dict(values=data))\n                     ])\nfig.show()\n\n","kernel":"ds_env","output":{"0":{"data":{"iframe":"c57a41c64ca6c78901c3c8473ee49b294d3832b0"}}},"pos":41,"start":1657726872485,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1a85c7","input":"scores_df = pd.DataFrame(scores)","pos":38,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"301065","input":"tree_clf = DecisionTreeClassifier()\n","pos":23,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"ead63d","input":"tree_clf.fit(x_train, y_train)","output":{"0":{"data":{"text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div>","text/plain":"DecisionTreeClassifier()"},"execution_count":17,"metadata":{},"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"36c640","input":"","output":{"0":{"data":{"text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>AdaBoostClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">AdaBoostClassifier</label><div class=\"sk-toggleable__content\"><pre>AdaBoostClassifier()</pre></div></div></div></div></div>","text/plain":"AdaBoostClassifier()"},"execution_count":18,"metadata":{},"output_type":"execute_result"}},"pos":25,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"46cf7e","input":"ax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test, adc_pred), annot=True, fmt='g')\nax.set_xlabel('Predicted labels')\nax.set_ylabel('True labels')\nax.set_title('Confusion Matrix');\nax.xaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied',]); ax.yaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied'])\n\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\n\n# Sebastian ","output":{"0":{"name":"stdout","output_type":"stream","text":"P:  0.971309578898658\nA:  0.9582979380647154\n"},"1":{"data":{"image/png":"","text/plain":"<Figure size 432x288 with 2 Axes>"},"execution_count":20,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"24704a","input":"total_squared_error = (np.sum((y_test - adc_pred)**2))\nmean_squared_error = total_squared_error/len(y_test)\nprint(mean_squared_error)","output":{"0":{"name":"stdout","output_type":"stream","text":"0.07375086879295699\n"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"5bbd8d","input":"","pos":30,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"05f4ca","input":"","output":{"0":{"name":"stderr","output_type":"stream","text":"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n"},"1":{"data":{"text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>","text/plain":"LogisticRegression()"},"execution_count":23,"metadata":{},"output_type":"execute_result"}},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"d34cef","input":"ax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test, lr_pred), annot=True, fmt='g')\nax.set_xlabel('Predicted labels')\nax.set_ylabel('True labels')\nax.set_title('Confusion Matrix');\nax.xaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied',]); ax.yaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied'])\n\nrecall = sklearn.metrics.recall_score(y_test, lr_pred)\nprecision = sklearn.metrics.precision_score(y_test, lr_pred)\naccuracy = sklearn.metrics.accuracy_score(y_test, lr_pred)\nf_measure = sklearn.metrics.f1_score(y_test, lr_pred)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\n\n# Sebastian ","output":{"0":{"name":"stdout","output_type":"stream","text":"R:  0.7779849090102086\nP:  0.7825\nA:  0.8093675187273148\nF:  0.7802359225461828\n"},"1":{"data":{"image/png":"","text/plain":"<Figure size 432x288 with 2 Axes>"},"execution_count":25,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"45f3a5","input":"\n","pos":35,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"ed5be9","input":"#svc = SVC(probability=False)","pos":39,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"44dd58","input":"#svc.fit(x_train, y_train)\n#svc_pred = svc.pred(x_test, y_test)","pos":40,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"3be55e","input":"#Neural_model = MLPClassifier(solver='lbfgs', alpha=0.1, hidden_layer_sizes=(20, 20), random_state=1)\n\n#Neural_model.fit(x_train, y_train)\n\n#Neural_hat = Neural_model.predict(x_test)\n\n#precision = sklearn.metrics.precision_score(y_test, Neural_hat)\n#accuracy = sklearn.metrics.accuracy_score(y_test, Neural_hat)\n#print(\"P: \", precision)\n#print(\"A: \", accuracy)\n\n#sns.heatmap(confusion_matrix(y_test, Neural_hat), annot=True, fmt='g')","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":83,"id":"8106a0","input":"ax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test, y_pred_tree), annot=True, fmt='g')\nax.set_xlabel('Predicted labels')\nax.set_ylabel('True labels')\nax.set_title('Confusion Matrix');\nax.xaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied',]); ax.yaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied'])\n\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)","output":{"0":{"name":"stdout","output_type":"stream","text":"P:  0.7256364823277068\nA:  0.7518727314850567\n"},"1":{"data":{"image/png":"","text/plain":"<Figure size 432x288 with 2 Axes>"},"execution_count":83,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":21,"type":"cell"}
{"cell_type":"markdown","id":"0507e6","input":"**Adaboost**\n\nShort for adaptive boosting, Adaboost takes combines models together to create the best model possible. It takes a bunch of weak learners and combines them into strong learners. It takes a number of desicion trees during the data training period. As the first model is made the incorrect values are the input for the next model to be made.\n","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"58bcb0","input":"**Random Forest**\n\nA random forest is a model that makes a given number of randomized decision trees and uses them to make predictions on the data by using averaging functions to combine its results from several decision trees, making a more accurate/realistic prediction. Randomizing decision trees allows the model to individually look for correlations between sections of the dataset, making predictions more intuitive, compared to looking at the entire dataset through one decision tree, where it is harder to find patterns when there are so many variables to consider. It then takes the accuracy of the models it makes and displays them on the heatmap so that we can see how accurate/precise the model is. Through some light hyperparameter tuning, we found that at around 20 decision trees, there was no more improvement in the performance of the model and subsequent additions to the amount of decision trees would just increase the processing time. There were also no differences in accuracy/precision when we tried different criterion such as \"entropy\" and \"log\\_loss\", so we decided that \"gini\", the default criterion, was good enough for the model.\n\n- What are the pros and cons of the random forest\n- [https://towardsdatascience.com/hyperparameter\\-tuning\\-the\\-random\\-forest\\-in\\-python\\-using\\-scikit\\-learn\\-28d2aa77dd74](https://towardsdatascience.com/hyperparameter-tuning-the-random-forest-in-python-using-scikit-learn-28d2aa77dd74)\n\n","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"96b8d7","input":"<u>What is a KNN:</u>\n\nA KNN is a classification model and can be used for both supervised and unsupervised machine learning. KNN works by finding the distance between a query and all the examples in the data. K is then used to select the number of examples closest to the query. the KNN then votes for the most frequent label. \n\n- - [https://towardsdatascience.com/machine\\-learning\\-basics\\-with\\-the\\-k\\-nearest\\-neighbors\\-algorithm\\-6a6e71d01761](https://towardsdatascience.com/machine-learning-basics-with-the-k-nearest-neighbors-algorithm-6a6e71d01761)\n- What does the K mean?\n  - [https://towardsdatascience.com/a\\-simple\\-introduction\\-to\\-k\\-nearest\\-neighbors\\-algorithm\\-b3519ed98e](https://towardsdatascience.com/a-simple-introduction-to-k-nearest-neighbors-algorithm-b3519ed98e)\n  - K means a parameter that shows the number of nearest neighbors. This is necessary for the voting process.\n\nGrid search:\n\n[https://scikit\\-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html](https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html)\n\n[https://medium.com/@erikgreenj/k\\-neighbors\\-classifier\\-with\\-gridsearchcv\\-basics\\-3c445ddeb657](https://medium.com/@erikgreenj/k-neighbors-classifier-with-gridsearchcv-basics-3c445ddeb657)\n\n","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"9a447c","input":"**Decision Tree:**\n\nA decision tree is a graph that classifies items and whether it is true or false to the question in the box. In this example, we use satisfied for true and false for dissatisfied.\n\n","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"b8495a","input":"a Decision Tree Classifier makes various questions to help determine what group a variable falls into. it goes from the top, and depending on how a question is answered it goes down a path to a different leaf in the tree. It goes all the way down and at the end it puts that variable into a group\n\n- What is a splitting criteron\n- What are the pros and cons?\n- \n\n","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"c4c371","input":"**Categorical Naive Bayes**\n\nThe categorical Naive Bayes model works using the Bayes Theorem, which assumes that individual features are independent on each other, which works well with our dataset, as we can see through our correlation matrix that none of our features are very correlated. Applying the Bayes Theorem assigns a probability to each feature in the dataset, then uses those probabilities to predict a whole outcome. The categorical Native Bayes model works best for categorical data, which works well with our dataset, as we have a lot of categorical data in the form of 1\\-5 ratings for the airline's performance.\n\n","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"c80a0b","input":"<u>Models to make:</u>\n\n- knn\n- decision tree\n- Random forest\n- SVC \\(DON'T DO THIS ONE YET\\)\n- Logistic regression \n- Adaboost \n- \n\nScoring me\ntrics:\n\n- f1 score\n- Recall\n- Precision \n- Accuracy\n\n","pos":42,"type":"cell"}
{"end":1657722975820,"exec_count":13,"id":"e50310","input":"scores = {}","kernel":"ds_env","pos":11.5,"start":1657722975811,"state":"done","type":"cell"}
{"end":1657724021109,"exec_count":16,"id":"17f891","input":"scores","kernel":"ds_env","output":{"0":{"data":{"text/plain":"{'sgd': {'accuracy': 0.6791505791505792,\n  'precision': 0.5888754534461911,\n  'recall': 0.8657777777777778,\n  'f1_score': 0.7009715725080965},\n 'sgd grid': {'accuracy': 0.8555984555984556,\n  'precision': 0.8499534016775396,\n  'recall': 0.8106666666666666,\n  'f1_score': 0.8298453139217471}}"},"exec_count":16}},"pos":12.5,"start":1657724021093,"state":"done","type":"cell"}
{"end":1657724614153,"exec_count":28,"id":"1f13f2","input":"import pickle \n\ndef save_obj(obj, name):\n    with open(f'{name}.pkl', 'wb') as outp:\n        pickle.dump(obj, outp)\n        \ndef load_obj(name):\n    with open(f\"{name}.pkl\",'r') as file:\n        object_file = pickle.load(file)\n        return object_file","kernel":"ds_env","pos":13.5,"start":1657724614143,"state":"done","type":"cell"}
{"end":1657724705356,"exec_count":29,"id":"d097f7","input":"save_obj(scores, \"scores\")\ntest = load_obj(\"scores\")\nprint(test)","kernel":"ds_env","output":{"0":{"ename":"UnicodeDecodeError","evalue":"'utf-8' codec can't decode byte 0x80 in position 0: invalid start byte","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mUnicodeDecodeError\u001b[0m                        Traceback (most recent call last)","Input \u001b[0;32mIn [29]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m save_obj(scores, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mscores\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m----> 2\u001b[0m test \u001b[38;5;241m=\u001b[39m \u001b[43mload_obj\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mscores\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(test)\n","Input \u001b[0;32mIn [28]\u001b[0m, in \u001b[0;36mload_obj\u001b[0;34m(name)\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mload_obj\u001b[39m(name):\n\u001b[1;32m      8\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mopen\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mname\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m.pkl\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr\u001b[39m\u001b[38;5;124m'\u001b[39m) \u001b[38;5;28;01mas\u001b[39;00m file:\n\u001b[0;32m----> 9\u001b[0m         object_file \u001b[38;5;241m=\u001b[39m \u001b[43mpickle\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mload\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     10\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m object_file\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/codecs.py:322\u001b[0m, in \u001b[0;36mBufferedIncrementalDecoder.decode\u001b[0;34m(self, input, final)\u001b[0m\n\u001b[1;32m    319\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdecode\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;28minput\u001b[39m, final\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m):\n\u001b[1;32m    320\u001b[0m     \u001b[38;5;66;03m# decode input (taking the buffer into account)\u001b[39;00m\n\u001b[1;32m    321\u001b[0m     data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbuffer \u001b[38;5;241m+\u001b[39m \u001b[38;5;28minput\u001b[39m\n\u001b[0;32m--> 322\u001b[0m     (result, consumed) \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_buffer_decode\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfinal\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    323\u001b[0m     \u001b[38;5;66;03m# keep undecoded input until the next call\u001b[39;00m\n\u001b[1;32m    324\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbuffer \u001b[38;5;241m=\u001b[39m data[consumed:]\n","\u001b[0;31mUnicodeDecodeError\u001b[0m: 'utf-8' codec can't decode byte 0x80 in position 0: invalid start byte"]}},"pos":13.75,"start":1657724705316,"state":"done","type":"cell"}
{"end":1657725176764,"exec_count":33,"id":"cfef09","input":"scores","kernel":"ds_env","output":{"0":{"data":{"text/plain":"{'sgd': {'accuracy': 0.6791505791505792,\n  'precision': 0.5888754534461911,\n  'recall': 0.8657777777777778,\n  'f1_score': 0.7009715725080965},\n 'sgd grid': {'accuracy': 0.8555984555984556,\n  'precision': 0.8499534016775396,\n  'recall': 0.8106666666666666,\n  'f1_score': 0.8298453139217471},\n 'nb': {'accuracy': 0.9007722007722008,\n  'precision': 0.9018518518518519,\n  'recall': 0.8657777777777778,\n  'f1_score': 0.8834467120181406},\n 'rf': {'accuracy': 0.9498069498069498,\n  'precision': 0.9422222222222222,\n  'recall': 0.9422222222222222,\n  'f1_score': 0.9422222222222222}}"},"exec_count":33}},"pos":16.5,"start":1657725176760,"state":"done","type":"cell"}
{"end":1657725264026,"exec_count":34,"id":"afcce2","input":"tree_clf = DecisionTreeClassifier()\ntree_clf = tree_clf.fit(x_train, y_train)\ny_pred_tree = tree_clf.predict(x_test)\n\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred_tree))\nprint(\"Precision:\", precision_score(y_test, y_pred_tree))\nprint(\"Recall:\", recall_score(y_test, y_pred_tree))\nprint(\"F1 Score:\", f1_score(y_test, y_pred_tree))\n\nacc = accuracy_score(y_test, y_pred_tree)\nprec = precision_score(y_test, y_pred_tree)\nrecall = recall_score(y_test, y_pred_tree)\nf1 = f1_score(y_test, y_pred_tree)\nscores['tree'] = {'accuracy': acc, 'precision':prec, 'recall':recall, 'f1_score':f1}","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Accuracy: 0.9293436293436294\nPrecision: 0.9109947643979057\nRecall: 0.928\nF1 Score: 0.9194187582562747\n"}},"pos":17.5,"start":1657725263942,"state":"done","type":"cell"}
{"end":1657726498855,"exec_count":40,"id":"b97c73","input":"scores","kernel":"ds_env","output":{"0":{"data":{"text/plain":"{'sgd': {'accuracy': 0.6791505791505792,\n  'precision': 0.5888754534461911,\n  'recall': 0.8657777777777778,\n  'f1_score': 0.7009715725080965},\n 'sgd grid': {'accuracy': 0.8555984555984556,\n  'precision': 0.8499534016775396,\n  'recall': 0.8106666666666666,\n  'f1_score': 0.8298453139217471},\n 'nb': {'accuracy': 0.9007722007722008,\n  'precision': 0.9018518518518519,\n  'recall': 0.8657777777777778,\n  'f1_score': 0.8834467120181406},\n 'rf': {'accuracy': 0.9498069498069498,\n  'precision': 0.9422222222222222,\n  'recall': 0.9422222222222222,\n  'f1_score': 0.9422222222222222},\n 'tree': {'accuracy': 0.9293436293436294,\n  'precision': 0.9109947643979057,\n  'recall': 0.928,\n  'f1_score': 0.9194187582562747},\n 'tree grid': {'accuracy': 0.9158301158301159,\n  'precision': 0.9126478616924477,\n  'recall': 0.8915555555555555,\n  'f1_score': 0.9019784172661871},\n 'adc': {'accuracy': 0.9351351351351351,\n  'precision': 0.9215859030837005,\n  'recall': 0.9297777777777778,\n  'f1_score': 0.9256637168141593},\n 'lr': {'accuracy': 0.8158301158301158,\n  'precision': 0.7634146341463415,\n  'recall': 0.8346666666666667,\n  'f1_score': 0.7974522292993631}}"},"exec_count":40}},"pos":32.5,"start":1657726498851,"state":"done","type":"cell"}
{"end":1657726865240,"exec_count":45,"id":"a2af96","input":"scores","kernel":"ds_env","output":{"0":{"data":{"text/plain":"{'sgd': {'accuracy': 0.6791505791505792,\n  'precision': 0.5888754534461911,\n  'recall': 0.8657777777777778,\n  'f1_score': 0.7009715725080965},\n 'sgd grid': {'accuracy': 0.8555984555984556,\n  'precision': 0.8499534016775396,\n  'recall': 0.8106666666666666,\n  'f1_score': 0.8298453139217471},\n 'nb': {'accuracy': 0.9007722007722008,\n  'precision': 0.9018518518518519,\n  'recall': 0.8657777777777778,\n  'f1_score': 0.8834467120181406},\n 'rf': {'accuracy': 0.9498069498069498,\n  'precision': 0.9422222222222222,\n  'recall': 0.9422222222222222,\n  'f1_score': 0.9422222222222222},\n 'tree': {'accuracy': 0.9293436293436294,\n  'precision': 0.9109947643979057,\n  'recall': 0.928,\n  'f1_score': 0.9194187582562747},\n 'tree grid': {'accuracy': 0.9158301158301159,\n  'precision': 0.9126478616924477,\n  'recall': 0.8915555555555555,\n  'f1_score': 0.9019784172661871},\n 'adc': {'accuracy': 0.9351351351351351,\n  'precision': 0.9215859030837005,\n  'recall': 0.9297777777777778,\n  'f1_score': 0.9256637168141593},\n 'lr': {'accuracy': 0.8158301158301158,\n  'precision': 0.7634146341463415,\n  'recall': 0.8346666666666667,\n  'f1_score': 0.7974522292993631},\n 'knn': {'accuracy': 0.6683397683397684,\n  'precision': 0.6293774319066148,\n  'recall': 0.5751111111111111,\n  'f1_score': 0.6010218300046447}}"},"exec_count":45}},"pos":37.5,"start":1657726865215,"state":"done","type":"cell"}
{"end":1657726893602,"exec_count":48,"id":"d260d8","input":"fig.write_html(\"scores.html\")","kernel":"ds_env","pos":41.5,"start":1657726893575,"state":"done","type":"cell"}
{"id":0,"time":1657723963325,"type":"user"}
{"last_load":1657722129643,"type":"file"}