{"backend_state":"running","connection_file":"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/share/jupyter/runtime/kernel-9ab01ba8-4167-4236-9490-0768faeedb6e.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","collapsed":true,"end":1657291333343,"exec_count":13,"id":"cd0875","input":"Neural_model = MLPClassifier(solver='lbfgs', alpha=0.1, hidden_layer_sizes=(20, 20), random_state=1)\n\nNeural_model.fit(x_train, y_train)\n\nNeural_hat = Neural_model.predict(x_test)\n\nprecision = sklearn.metrics.precision_score(y_test, Neural_hat)\naccuracy = sklearn.metrics.accuracy_score(y_test, Neural_hat)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\n\nsns.heatmap(confusion_matrix(y_test, Neural_hat), annot=True, fmt='g')","kernel":"ds_env","output":{"0":{"name":"stdout","text":"P:  0.6248138957816377\nA:  0.6818673256622133\n"},"1":{"name":"stderr","text":"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/neural_network/_multilayer_perceptron.py:559: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\n  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n"},"2":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":13},"3":{"data":{"image/png":"84b909fd83ce81aa4c87027dc024d1a2f9ebdc13","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":12,"scrolled":false,"start":1657291312383,"state":"done","type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":81,"id":"79759a","input":"ax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test, adc_pred), annot=True, fmt='g')\nax.set_xlabel('Predicted labels')\nax.set_ylabel('True labels')\nax.set_title('Confusion Matrix');\nax.xaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied',]); ax.yaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied'])\n\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\n\n# Sebastian ","kernel":"ds_env","output":{"0":{"name":"stdout","text":"P:  0.8213937837598513\nA:  0.8456251447988261\n"},"1":{"data":{"image/png":"c8b7bf730b4bad94de368a8a131fd5e2dbea8c82","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":18,"scrolled":false,"state":"done","type":"cell"}
{"cell_type":"code","end":1657291311355,"exec_count":2,"id":"5c8242","input":"airline_df = pd.read_csv('./data/airline_data.csv')\nairline_df.dropna(inplace=True)\nairline_df.reset_index(drop=True, inplace=True)\nairline_df = pd.get_dummies(airline_df, prefix = None, prefix_sep = '_', dummy_na = False, columns = ['Gender', 'Customer Type', 'Type of Travel', 'Class'], sparse = False, drop_first = False, dtype = None)\ncolumns_drop = ['id', 'Unnamed: 0.1', 'Unnamed: 0']\nairline_df.drop(columns_drop, axis=1, inplace = True)\n","kernel":"ds_env","pos":1,"start":1657291310741,"state":"done","type":"cell"}
{"cell_type":"code","end":1657291311430,"exec_count":3,"id":"855cf6","input":"airline_df.isnull().sum()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"Age                                  0\nFlight Distance                      0\nInflight wifi service                0\nDeparture/Arrival time convenient    0\nEase of Online booking               0\nGate location                        0\nFood and drink                       0\nOnline boarding                      0\nSeat comfort                         0\nInflight entertainment               0\nOn-board service                     0\nLeg room service                     0\nBaggage handling                     0\nCheckin service                      0\nInflight service                     0\nCleanliness                          0\nDeparture Delay in Minutes           0\nArrival Delay in Minutes             0\nsatisfaction                         0\nGender_Female                        0\nGender_Male                          0\nCustomer Type_Loyal Customer         0\nCustomer Type_disloyal Customer      0\nType of Travel_Business travel       0\nType of Travel_Personal Travel       0\nClass_Business                       0\nClass_Eco                            0\nClass_Eco Plus                       0\ndtype: int64"},"exec_count":3}},"pos":2,"scrolled":true,"start":1657291311407,"state":"done","type":"cell"}
{"cell_type":"code","end":1657291311445,"exec_count":4,"id":"593e55","input":"airline_df.columns","kernel":"ds_env","output":{"0":{"data":{"text/plain":"Index(['Age', 'Flight Distance', 'Inflight wifi service',\n       'Departure/Arrival time convenient', 'Ease of Online booking',\n       'Gate location', 'Food and drink', 'Online boarding', 'Seat comfort',\n       'Inflight entertainment', 'On-board service', 'Leg room service',\n       'Baggage handling', 'Checkin service', 'Inflight service',\n       'Cleanliness', 'Departure Delay in Minutes', 'Arrival Delay in Minutes',\n       'satisfaction', 'Gender_Female', 'Gender_Male',\n       'Customer Type_Loyal Customer', 'Customer Type_disloyal Customer',\n       'Type of Travel_Business travel', 'Type of Travel_Personal Travel',\n       'Class_Business', 'Class_Eco', 'Class_Eco Plus'],\n      dtype='object')"},"exec_count":4}},"pos":3,"scrolled":true,"start":1657291311435,"state":"done","type":"cell"}
{"cell_type":"code","end":1657291311523,"exec_count":6,"id":"3e2b93","input":"dummies = pd.get_dummies(airline_df[\"satisfaction\"])\ndummies.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>neutral or dissatisfied</th>\n      <th>satisfied</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   neutral or dissatisfied  satisfied\n0                        1          0\n1                        1          0\n2                        0          1\n3                        1          0\n4                        0          1"},"exec_count":6}},"pos":5,"start":1657291311498,"state":"done","type":"cell"}
{"cell_type":"code","end":1657291311574,"exec_count":7,"id":"477eaa","input":"airline_df[\"Satisfied\"] = dummies[\"satisfied\"]\nairline_df.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Flight Distance</th>\n      <th>Inflight wifi service</th>\n      <th>Departure/Arrival time convenient</th>\n      <th>Ease of Online booking</th>\n      <th>Gate location</th>\n      <th>Food and drink</th>\n      <th>Online boarding</th>\n      <th>Seat comfort</th>\n      <th>Inflight entertainment</th>\n      <th>...</th>\n      <th>Gender_Female</th>\n      <th>Gender_Male</th>\n      <th>Customer Type_Loyal Customer</th>\n      <th>Customer Type_disloyal Customer</th>\n      <th>Type of Travel_Business travel</th>\n      <th>Type of Travel_Personal Travel</th>\n      <th>Class_Business</th>\n      <th>Class_Eco</th>\n      <th>Class_Eco Plus</th>\n      <th>Satisfied</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>13</td>\n      <td>460</td>\n      <td>3</td>\n      <td>4</td>\n      <td>3</td>\n      <td>1</td>\n      <td>5</td>\n      <td>3</td>\n      <td>5</td>\n      <td>5</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>25</td>\n      <td>235</td>\n      <td>3</td>\n      <td>2</td>\n      <td>3</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>26</td>\n      <td>1142</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>25</td>\n      <td>562</td>\n      <td>2</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>61</td>\n      <td>214</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>4</td>\n      <td>5</td>\n      <td>5</td>\n      <td>3</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 29 columns</p>\n</div>","text/plain":"   Age  Flight Distance  Inflight wifi service  \\\n0   13              460                      3   \n1   25              235                      3   \n2   26             1142                      2   \n3   25              562                      2   \n4   61              214                      3   \n\n   Departure/Arrival time convenient  Ease of Online booking  Gate location  \\\n0                                  4                       3              1   \n1                                  2                       3              3   \n2                                  2                       2              2   \n3                                  5                       5              5   \n4                                  3                       3              3   \n\n   Food and drink  Online boarding  Seat comfort  Inflight entertainment  ...  \\\n0               5                3             5                       5  ...   \n1               1                3             1                       1  ...   \n2               5                5             5                       5  ...   \n3               2                2             2                       2  ...   \n4               4                5             5                       3  ...   \n\n   Gender_Female  Gender_Male  Customer Type_Loyal Customer  \\\n0              0            1                             1   \n1              0            1                             0   \n2              1            0                             1   \n3              1            0                             1   \n4              0            1                             1   \n\n   Customer Type_disloyal Customer  Type of Travel_Business travel  \\\n0                                0                               0   \n1                                1                               1   \n2                                0                               1   \n3                                0                               1   \n4                                0                               1   \n\n   Type of Travel_Personal Travel  Class_Business  Class_Eco Class_Eco Plus  \\\n0                               1               0          0              1   \n1                               0               1          0              0   \n2                               0               1          0              0   \n3                               0               1          0              0   \n4                               0               1          0              0   \n\n   Satisfied  \n0          0  \n1          0  \n2          1  \n3          0  \n4          1  \n\n[5 rows x 29 columns]"},"exec_count":7}},"pos":6,"start":1657291311529,"state":"done","type":"cell"}
{"cell_type":"code","end":1657291311604,"exec_count":8,"id":"f0c80e","input":"columns_drop = ['satisfaction']\nairline_df.drop(columns_drop, axis=1, inplace = True)\nairline_df.head()\nairline_df.dropna(inplace=True)\nairline_df.reset_index(drop=True, inplace=True)","kernel":"ds_env","pos":7,"start":1657291311577,"state":"done","type":"cell"}
{"cell_type":"code","end":1657291311624,"exec_count":9,"id":"f2b9ac","input":"target = airline_df['Satisfied']","kernel":"ds_env","pos":8,"start":1657291311612,"state":"done","type":"cell"}
{"cell_type":"code","end":1657291311648,"exec_count":10,"id":"2a32a0","input":"input_columns = airline_df.loc[:, airline_df.columns != \"Satisfied\"]","kernel":"ds_env","pos":9,"start":1657291311628,"state":"done","type":"cell"}
{"cell_type":"code","end":1657291311699,"exec_count":11,"id":"82e15e","input":"x_train, x_test, y_train, y_test = train_test_split(input_columns, target, train_size=0.8)","kernel":"ds_env","pos":10,"start":1657291311651,"state":"done","type":"cell"}
{"cell_type":"code","end":1657291341587,"exec_count":18,"id":"e3186d","input":"adc_pred = adc_clf.predict(x_test)","kernel":"ds_env","pos":17,"start":1657291341375,"state":"done","type":"cell"}
{"cell_type":"code","end":1657291341830,"exec_count":20,"id":"428b60","input":"total_squared_error = (np.sum((y_test - adc_pred)**2))\nmean_squared_error = total_squared_error/len(y_test)\nprint(mean_squared_error)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.07498648544289134\n"}},"pos":19,"start":1657291341829,"state":"done","type":"cell"}
{"cell_type":"code","end":1657291395024,"exec_count":23,"id":"564b21","input":"tree_clf.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div>","text/plain":"DecisionTreeClassifier()"},"exec_count":23}},"pos":15,"start":1657291394041,"state":"done","type":"cell"}
{"cell_type":"code","end":1657291633374,"exec_count":34,"id":"c98af7","input":"adc_clf.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>AdaBoostClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">AdaBoostClassifier</label><div class=\"sk-toggleable__content\"><pre>AdaBoostClassifier()</pre></div></div></div></div></div>","text/plain":"AdaBoostClassifier()"},"exec_count":34}},"pos":16,"scrolled":true,"start":1657291628666,"state":"done","type":"cell"}
{"cell_type":"code","end":1657291810891,"exec_count":38,"id":"9d79ba","input":"airline_df.tail()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Flight Distance</th>\n      <th>Inflight wifi service</th>\n      <th>Departure/Arrival time convenient</th>\n      <th>Ease of Online booking</th>\n      <th>Gate location</th>\n      <th>Food and drink</th>\n      <th>Online boarding</th>\n      <th>Seat comfort</th>\n      <th>Inflight entertainment</th>\n      <th>...</th>\n      <th>Gender_Female</th>\n      <th>Gender_Male</th>\n      <th>Customer Type_Loyal Customer</th>\n      <th>Customer Type_disloyal Customer</th>\n      <th>Type of Travel_Business travel</th>\n      <th>Type of Travel_Personal Travel</th>\n      <th>Class_Business</th>\n      <th>Class_Eco</th>\n      <th>Class_Eco Plus</th>\n      <th>Satisfied</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>129482</th>\n      <td>34</td>\n      <td>526</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>1</td>\n      <td>4</td>\n      <td>3</td>\n      <td>4</td>\n      <td>4</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>129483</th>\n      <td>23</td>\n      <td>646</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>129484</th>\n      <td>17</td>\n      <td>828</td>\n      <td>2</td>\n      <td>5</td>\n      <td>1</td>\n      <td>5</td>\n      <td>2</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>129485</th>\n      <td>14</td>\n      <td>1127</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>129486</th>\n      <td>42</td>\n      <td>264</td>\n      <td>2</td>\n      <td>5</td>\n      <td>2</td>\n      <td>5</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 28 columns</p>\n</div>","text/plain":"        Age  Flight Distance  Inflight wifi service  \\\n129482   34              526                      3   \n129483   23              646                      4   \n129484   17              828                      2   \n129485   14             1127                      3   \n129486   42              264                      2   \n\n        Departure/Arrival time convenient  Ease of Online booking  \\\n129482                                  3                       3   \n129483                                  4                       4   \n129484                                  5                       1   \n129485                                  3                       3   \n129486                                  5                       2   \n\n        Gate location  Food and drink  Online boarding  Seat comfort  \\\n129482              1               4                3             4   \n129483              4               4                4             4   \n129484              5               2                1             2   \n129485              3               4                4             4   \n129486              5               4                2             2   \n\n        Inflight entertainment  ...  Gender_Female  Gender_Male  \\\n129482                       4  ...              0            1   \n129483                       4  ...              0            1   \n129484                       2  ...              1            0   \n129485                       4  ...              0            1   \n129486                       1  ...              1            0   \n\n        Customer Type_Loyal Customer  Customer Type_disloyal Customer  \\\n129482                             0                                1   \n129483                             1                                0   \n129484                             1                                0   \n129485                             1                                0   \n129486                             1                                0   \n\n        Type of Travel_Business travel  Type of Travel_Personal Travel  \\\n129482                               1                               0   \n129483                               1                               0   \n129484                               0                               1   \n129485                               1                               0   \n129486                               0                               1   \n\n        Class_Business  Class_Eco  Class_Eco Plus  Satisfied  \n129482               1          0               0          0  \n129483               1          0               0          1  \n129484               0          1               0          0  \n129485               1          0               0          1  \n129486               0          1               0          0  \n\n[5 rows x 28 columns]"},"exec_count":38}},"pos":4,"start":1657291810732,"state":"done","type":"cell"}
{"cell_type":"code","end":1657292285638,"exec_count":49,"id":"4cb411","input":"lr_clf.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"name":"stderr","text":"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n"},"1":{"data":{"text/html":"<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>","text/plain":"LogisticRegression()"},"exec_count":49}},"pos":20,"start":1657292283430,"state":"done","type":"cell"}
{"cell_type":"code","end":1657293095954,"exec_count":55,"id":"e5158c","input":"import pandas as pd\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport seaborn as sns\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport sklearn\nfrom sklearn.neighbors import KNeighborsClassifier as KNN\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import AdaBoostClassifier as ADC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.naive_bayes import CategoricalNB\nfrom sklearn.linear_model import LogisticRegression as LR\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.neighbors import BallTree","kernel":"ds_env","pos":0,"start":1657293095942,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":12,"id":"421052","input":"NB_model = CategoricalNB()\n\nNB_model.fit(x_train, y_train)\n\nNB_hat = NB_model.predict(x_test)\n\nrecall = sklearn.metrics.recall_score(y_test,NB_hat)\nprecision = sklearn.metrics.precision_score(y_test, NB_hat)\naccuracy = sklearn.metrics.accuracy_score(y_test, NB_hat)\nf_measure = sklearn.metrics.f1_score(y_test, NB_hat)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\nsns.heatmap(confusion_matrix(y_test, NB_hat), annot=True, fmt='g')\n\n# Ivan","kernel":"ds_env","output":{"0":{"name":"stdout","text":"R:  0.8761659411921471\nP:  0.8917721518987342\nA:  0.8999536643756275\nF:  0.8839001657928933\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":12},"2":{"data":{"image/png":"6ee5e0c853d4e1f3c81a4aa468c8547b6be37b2d","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":11,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":14,"id":"5fa0fe","input":"RF_model = RandomForestClassifier(n_estimators=10)\n\nRF_model.fit(x_train, y_train)\n\nRF_hat = RF_model.predict(x_test)\n\nprecision = sklearn.metrics.precision_score(y_test, RF_hat)\naccuracy = sklearn.metrics.accuracy_score(y_test, RF_hat)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\n\nsns.heatmap(confusion_matrix(y_test, RF_hat), annot=True, fmt='g')\n\n# Ivan ","kernel":"ds_env","output":{"0":{"name":"stdout","text":"P:  0.9723875046485683\nA:  0.9577187427600586\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":14},"2":{"data":{"image/png":"4415477b25610266bf6a1a3b7b15f6118cc08f41","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":13,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":21,"id":"c0911f","input":"#svc = SVC(probability=False)","kernel":"ds_env","pos":21,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":33,"id":"2101a2","input":"tree_clf = DecisionTreeClassifier()\nadc_clf = ADC()","kernel":"ds_env","pos":14,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f17d5f","input":"<u>Models to make:</u>\n\n- knn\n- decision tree\n- Random forest\n- SVC \\(DON'T DO THIS ONE YET\\)\n- Logistic regression \n- Adaboost \n- \n\nScoring me\ntrics:\n\n- f1 score\n- Recall\n- Precision \n- Accuracy\n\n","pos":22,"state":"done","type":"cell"}
{"end":1657291860126,"exec_count":41,"id":"da7765","input":"lr_pred=lr_clf.predict(x_test)","kernel":"ds_env","pos":20.5,"start":1657291860100,"state":"done","type":"cell"}
{"end":1657292278812,"exec_count":48,"id":"52103c","input":"lr_clf = LR()","kernel":"ds_env","pos":19.5,"start":1657292278802,"state":"done","type":"cell"}
{"end":1657293510570,"exec_count":76,"id":"4a2f48","input":"knn_clf = KNN(n_neighbors=3,weights='distance')","kernel":"ds_env","pos":20.9375,"start":1657293510561,"state":"done","type":"cell"}
{"end":1657293512650,"exec_count":77,"id":"1ecc3e","input":"knn_clf.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-10 {color: black;background-color: white;}#sk-container-id-10 pre{padding: 0;}#sk-container-id-10 div.sk-toggleable {background-color: white;}#sk-container-id-10 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-10 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-10 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-10 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-10 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-10 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-10 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-10 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-10 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-10 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-10 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-10 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-10 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-10 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-10 div.sk-item {position: relative;z-index: 1;}#sk-container-id-10 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-10 div.sk-item::before, #sk-container-id-10 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-10 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-10 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-10 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-10 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-10 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-10 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-10 div.sk-label-container {text-align: center;}#sk-container-id-10 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-10 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-10\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=3, weights=&#x27;distance&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" checked><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=3, weights=&#x27;distance&#x27;)</pre></div></div></div></div></div>","text/plain":"KNeighborsClassifier(n_neighbors=3, weights='distance')"},"exec_count":77}},"pos":20.96875,"start":1657293512514,"state":"done","type":"cell"}
{"end":1657293524852,"exec_count":78,"id":"46b005","input":"knn_pred = knn_clf.predict(x_test)","kernel":"ds_env","pos":20.984375,"start":1657293514905,"state":"done","type":"cell"}
{"end":1657294408466,"exec_count":83,"id":"ee49a7","input":"ax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test, lr_pred), annot=True, fmt='g')\nax.set_xlabel('Predicted labels')\nax.set_ylabel('True labels')\nax.set_title('Confusion Matrix');\nax.xaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied',]); ax.yaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied'])\n\nrecall = sklearn.metrics.recall_score(y_test, lr_pred)\nprecision = sklearn.metrics.precision_score(y_test, lr_pred)\naccuracy = sklearn.metrics.accuracy_score(y_test, lr_pred)\nf_measure = sklearn.metrics.f1_score(y_test, lr_pred)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\n# Sebastian ","kernel":"ds_env","output":{"0":{"name":"stdout","text":"R:  0.8141600781735809\nP:  0.7753807106598984\nA:  0.8167039925863001\nF:  0.7942973523421588\n"},"1":{"data":{"image/png":"1048b2f742f7111ffc75f47cc769ad523a38b933","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":20.75,"start":1657294408098,"state":"done","type":"cell"}
{"end":1657294419417,"exec_count":84,"id":"b68b06","input":"ax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test, knn_pred), annot=True, fmt='g')\nax.set_xlabel('Predicted labels')\nax.set_ylabel('True labels')\nax.set_title('Confusion Matrix');\nax.xaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied',]); ax.yaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied'])\n\nrecall = sklearn.metrics.recall_score(y_test, knn_pred)\nprecision = sklearn.metrics.precision_score(y_test, knn_pred)\naccuracy = sklearn.metrics.accuracy_score(y_test, knn_pred)\nf_measure = sklearn.metrics.f1_score(y_test, knn_pred)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\n# Sebastian ","kernel":"ds_env","output":{"0":{"name":"stdout","text":"R:  0.6812649906724705\nP:  0.7246527449683454\nA:  0.7489381419414627\nF:  0.7022893772893772\n"},"1":{"data":{"image/png":"a58c34dc37f3932f817b8f5b35bbab83e8875a81","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":20.9921875,"start":1657294419094,"state":"done","type":"cell"}
{"exec_count":23,"id":"d0e7dc","input":"#svc.fit(x_train, y_train)\n#svc_pred = svc.pred(x_test, y_test)","kernel":"ds_env","pos":21.5,"state":"done","type":"cell"}
{"exec_count":40,"id":"8df09d","input":"SGD_model = SGDClassifier(loss=\"perceptron\", penalty=\"l2\", max_iter=10000)\n\nSGD_model.fit(x_train, y_train)\n\nSGD_hat = SGD_model.predict(x_test)\n\nrecall = sklearn.metrics.recall_score(y_test, SGD_hat)\nprecision = sklearn.metrics.precision_score(y_test, SGD_hat)\naccuracy = sklearn.metrics.accuracy_score(y_test, SGD_hat)\nf_measure = sklearn.metrics.f1_score(y_test, SGD_hat)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, SGD_hat), annot=True, fmt='g')\n\n# IVan ","kernel":"ds_env","output":{"0":{"name":"stdout","text":"R:  0.8240206093985964\nP:  0.8213937837598513\nA:  0.8456251447988261\nF:  0.8227050997782706\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":40},"2":{"data":{"image/png":"396add796e43fb6d61d39c85856f7344e1c698f6","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":10.5,"state":"done","type":"cell"}
{"id":0,"time":1657299590131,"type":"user"}
{"last_load":1657286908839,"type":"file"}