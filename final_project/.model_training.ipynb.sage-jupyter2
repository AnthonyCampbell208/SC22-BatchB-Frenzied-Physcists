{"backend_state":"running","connection_file":"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/share/jupyter/runtime/kernel-24f524aa-4f40-41d1-a105-038e03db3fc6.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1657550880066,"exec_count":4,"id":"593e55","input":"airline_df.columns","kernel":"ds_env","output":{"0":{"data":{"text/plain":"Index(['Age', 'Flight Distance', 'Inflight wifi service',\n       'Departure/Arrival time convenient', 'Ease of Online booking',\n       'Gate location', 'Food and drink', 'Online boarding', 'Seat comfort',\n       'Inflight entertainment', 'On-board service', 'Leg room service',\n       'Baggage handling', 'Checkin service', 'Inflight service',\n       'Cleanliness', 'Departure Delay in Minutes', 'Arrival Delay in Minutes',\n       'satisfaction', 'Gender_Female', 'Gender_Male',\n       'Customer Type_Loyal Customer', 'Customer Type_disloyal Customer',\n       'Type of Travel_Business travel', 'Type of Travel_Personal Travel',\n       'Class_Business', 'Class_Eco', 'Class_Eco Plus'],\n      dtype='object')"},"exec_count":4}},"pos":3,"scrolled":true,"start":1657550880061,"state":"done","type":"cell"}
{"cell_type":"code","end":1657550880088,"exec_count":5,"id":"9d79ba","input":"airline_df.tail()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Flight Distance</th>\n      <th>Inflight wifi service</th>\n      <th>Departure/Arrival time convenient</th>\n      <th>Ease of Online booking</th>\n      <th>Gate location</th>\n      <th>Food and drink</th>\n      <th>Online boarding</th>\n      <th>Seat comfort</th>\n      <th>Inflight entertainment</th>\n      <th>...</th>\n      <th>satisfaction</th>\n      <th>Gender_Female</th>\n      <th>Gender_Male</th>\n      <th>Customer Type_Loyal Customer</th>\n      <th>Customer Type_disloyal Customer</th>\n      <th>Type of Travel_Business travel</th>\n      <th>Type of Travel_Personal Travel</th>\n      <th>Class_Business</th>\n      <th>Class_Eco</th>\n      <th>Class_Eco Plus</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>129482</th>\n      <td>34</td>\n      <td>526</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>1</td>\n      <td>4</td>\n      <td>3</td>\n      <td>4</td>\n      <td>4</td>\n      <td>...</td>\n      <td>neutral or dissatisfied</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>129483</th>\n      <td>23</td>\n      <td>646</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>...</td>\n      <td>satisfied</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>129484</th>\n      <td>17</td>\n      <td>828</td>\n      <td>2</td>\n      <td>5</td>\n      <td>1</td>\n      <td>5</td>\n      <td>2</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2</td>\n      <td>...</td>\n      <td>neutral or dissatisfied</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>129485</th>\n      <td>14</td>\n      <td>1127</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>...</td>\n      <td>satisfied</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>129486</th>\n      <td>42</td>\n      <td>264</td>\n      <td>2</td>\n      <td>5</td>\n      <td>2</td>\n      <td>5</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n      <td>...</td>\n      <td>neutral or dissatisfied</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 28 columns</p>\n</div>","text/plain":"        Age  Flight Distance  Inflight wifi service  \\\n129482   34              526                      3   \n129483   23              646                      4   \n129484   17              828                      2   \n129485   14             1127                      3   \n129486   42              264                      2   \n\n        Departure/Arrival time convenient  Ease of Online booking  \\\n129482                                  3                       3   \n129483                                  4                       4   \n129484                                  5                       1   \n129485                                  3                       3   \n129486                                  5                       2   \n\n        Gate location  Food and drink  Online boarding  Seat comfort  \\\n129482              1               4                3             4   \n129483              4               4                4             4   \n129484              5               2                1             2   \n129485              3               4                4             4   \n129486              5               4                2             2   \n\n        Inflight entertainment  ...             satisfaction  Gender_Female  \\\n129482                       4  ...  neutral or dissatisfied              0   \n129483                       4  ...                satisfied              0   \n129484                       2  ...  neutral or dissatisfied              1   \n129485                       4  ...                satisfied              0   \n129486                       1  ...  neutral or dissatisfied              1   \n\n        Gender_Male  Customer Type_Loyal Customer  \\\n129482            1                             0   \n129483            1                             1   \n129484            0                             1   \n129485            1                             1   \n129486            0                             1   \n\n        Customer Type_disloyal Customer  Type of Travel_Business travel  \\\n129482                                1                               1   \n129483                                0                               1   \n129484                                0                               0   \n129485                                0                               1   \n129486                                0                               0   \n\n        Type of Travel_Personal Travel  Class_Business Class_Eco  \\\n129482                               0               1         0   \n129483                               0               1         0   \n129484                               1               0         1   \n129485                               0               1         0   \n129486                               1               0         1   \n\n        Class_Eco Plus  \n129482               0  \n129483               0  \n129484               0  \n129485               0  \n129486               0  \n\n[5 rows x 28 columns]"},"exec_count":5}},"pos":4,"start":1657550880068,"state":"done","type":"cell"}
{"cell_type":"code","end":1657550880171,"exec_count":8,"id":"f0c80e","input":"columns_drop = ['satisfaction']\nairline_df.drop(columns_drop, axis=1, inplace = True)\nairline_df.head()\nairline_df.dropna(inplace=True)\nairline_df.reset_index(drop=True, inplace=True)","kernel":"ds_env","pos":7,"start":1657550880140,"state":"done","type":"cell"}
{"cell_type":"code","end":1657550880182,"exec_count":9,"id":"f2b9ac","input":"target = airline_df['Satisfied']","kernel":"ds_env","pos":8,"start":1657550880174,"state":"done","type":"cell"}
{"cell_type":"code","end":1657550880198,"exec_count":10,"id":"2a32a0","input":"input_columns = airline_df.loc[:, airline_df.columns != \"Satisfied\"]","kernel":"ds_env","pos":9,"start":1657550880187,"state":"done","type":"cell"}
{"cell_type":"code","end":1657550910516,"exec_count":16,"id":"2101a2","input":"tree_clf = DecisionTreeClassifier()\nadc_clf = ADC()","kernel":"ds_env","pos":15,"start":1657550910515,"state":"done","type":"cell"}
{"cell_type":"code","end":1657550911359,"exec_count":17,"id":"564b21","input":"tree_clf.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div>","text/plain":"DecisionTreeClassifier()"},"exec_count":17}},"pos":16,"start":1657550910527,"state":"done","type":"cell"}
{"cell_type":"code","end":1657550916064,"exec_count":18,"id":"c98af7","input":"adc_clf.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>AdaBoostClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">AdaBoostClassifier</label><div class=\"sk-toggleable__content\"><pre>AdaBoostClassifier()</pre></div></div></div></div></div>","text/plain":"AdaBoostClassifier()"},"exec_count":18}},"pos":17,"scrolled":true,"start":1657550911376,"state":"done","type":"cell"}
{"cell_type":"code","end":1657550916266,"exec_count":19,"id":"e3186d","input":"adc_pred = adc_clf.predict(x_test)","kernel":"ds_env","pos":18,"start":1657550916067,"state":"done","type":"cell"}
{"cell_type":"code","end":1657550916549,"exec_count":20,"id":"79759a","input":"ax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test, adc_pred), annot=True, fmt='g')\nax.set_xlabel('Predicted labels')\nax.set_ylabel('True labels')\nax.set_title('Confusion Matrix');\nax.xaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied',]); ax.yaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied'])\n\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\n\n# Sebastian ","kernel":"ds_env","output":{"0":{"name":"stdout","text":"P:  0.971309578898658\nA:  0.9582979380647154\n"},"1":{"data":{"image/png":"8bcf143c730c33c47c98a40dbf14afdaa5299abb","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":19,"start":1657550916281,"state":"done","type":"cell"}
{"cell_type":"code","end":1657550916561,"exec_count":21,"id":"428b60","input":"total_squared_error = (np.sum((y_test - adc_pred)**2))\nmean_squared_error = total_squared_error/len(y_test)\nprint(mean_squared_error)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.07375086879295699\n"}},"pos":20,"start":1657550916557,"state":"done","type":"cell"}
{"cell_type":"code","end":1657550916569,"exec_count":22,"id":"52103c","input":"lr_clf = LR()","kernel":"ds_env","pos":21,"start":1657550916564,"state":"done","type":"cell"}
{"cell_type":"code","end":1657550917830,"exec_count":23,"id":"4cb411","input":"lr_clf.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"name":"stderr","text":"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n"},"1":{"data":{"text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>","text/plain":"LogisticRegression()"},"exec_count":23}},"pos":22,"start":1657550916572,"state":"done","type":"cell"}
{"cell_type":"code","end":1657550917855,"exec_count":24,"id":"da7765","input":"lr_pred=lr_clf.predict(x_test)","kernel":"ds_env","pos":23,"start":1657550917844,"state":"done","type":"cell"}
{"cell_type":"code","end":1657550918062,"exec_count":25,"id":"ee49a7","input":"ax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test, lr_pred), annot=True, fmt='g')\nax.set_xlabel('Predicted labels')\nax.set_ylabel('True labels')\nax.set_title('Confusion Matrix');\nax.xaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied',]); ax.yaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied'])\n\nrecall = sklearn.metrics.recall_score(y_test, lr_pred)\nprecision = sklearn.metrics.precision_score(y_test, lr_pred)\naccuracy = sklearn.metrics.accuracy_score(y_test, lr_pred)\nf_measure = sklearn.metrics.f1_score(y_test, lr_pred)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\n# Sebastian ","kernel":"ds_env","output":{"0":{"name":"stdout","text":"R:  0.7779849090102086\nP:  0.7825\nA:  0.8093675187273148\nF:  0.7802359225461828\n"},"1":{"data":{"image/png":"15d219bc348fda79f1a905150802ffe490edb64e","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":24,"start":1657550917859,"state":"done","type":"cell"}
{"cell_type":"code","end":1657550928080,"exec_count":29,"id":"b68b06","input":"ax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test, knn_pred), annot=True, fmt='g')\nax.set_xlabel('Predicted labels')\nax.set_ylabel('True labels')\nax.set_title('Confusion Matrix');\nax.xaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied',]); ax.yaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied'])\n\nrecall = sklearn.metrics.recall_score(y_test, knn_pred)\nprecision = sklearn.metrics.precision_score(y_test, knn_pred)\naccuracy = sklearn.metrics.accuracy_score(y_test, knn_pred)\nf_measure = sklearn.metrics.f1_score(y_test, knn_pred)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\n# Sebastian ","kernel":"ds_env","output":{"0":{"name":"stdout","text":"R:  0.6907234798047048\nP:  0.7256364823277068\nA:  0.7518727314850567\nF:  0.7077496816445334\n"},"1":{"data":{"image/png":"a56fd4eaff40c235d17a28d97569316cfab71596","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":28,"start":1657550927818,"state":"done","type":"cell"}
{"cell_type":"code","end":1657550928092,"exec_count":30,"id":"c0911f","input":"#svc = SVC(probability=False)","kernel":"ds_env","pos":29,"start":1657550928086,"state":"done","type":"cell"}
{"cell_type":"code","end":1657550928104,"exec_count":31,"id":"d0e7dc","input":"#svc.fit(x_train, y_train)\n#svc_pred = svc.pred(x_test, y_test)","kernel":"ds_env","pos":30,"start":1657550928100,"state":"done","type":"cell"}
{"cell_type":"code","end":1657550964813,"exec_count":35,"id":"cd0875","input":"#Neural_model = MLPClassifier(solver='lbfgs', alpha=0.1, hidden_layer_sizes=(20, 20), random_state=1)\n\n#Neural_model.fit(x_train, y_train)\n\n#Neural_hat = Neural_model.predict(x_test)\n\n#precision = sklearn.metrics.precision_score(y_test, Neural_hat)\n#accuracy = sklearn.metrics.accuracy_score(y_test, Neural_hat)\n#print(\"P: \", precision)\n#print(\"A: \", accuracy)\n\n#sns.heatmap(confusion_matrix(y_test, Neural_hat), annot=True, fmt='g')","kernel":"ds_env","pos":13,"start":1657550964803,"state":"done","type":"cell"}
{"cell_type":"code","end":1657551088470,"exec_count":45,"id":"82e15e","input":"x_train, x_test, y_train, y_test = train_test_split(input_columns, target, stratify=target, train_size=0.8)","kernel":"ds_env","pos":10,"start":1657551088389,"state":"done","type":"cell"}
{"cell_type":"code","end":1657551683478,"exec_count":56,"id":"5c8242","input":"airline_df = pd.read_csv('./data/airline_data.csv')\nairline_df.dropna(inplace=True)\nairline_df.reset_index(drop=True, inplace=True)\nairline_df = pd.get_dummies(airline_df, prefix = None, prefix_sep = '_', dummy_na = False, columns = ['Gender', 'Customer Type', 'Type of Travel', 'Class'], sparse = False, drop_first = False, dtype = None)\ncolumns_drop = ['id', 'Unnamed: 0.1', 'Unnamed: 0']\nairline_df.drop(columns_drop, axis=1, inplace = True)\n","kernel":"ds_env","pos":1,"start":1657551682962,"state":"done","type":"cell"}
{"cell_type":"code","end":1657551686278,"exec_count":58,"id":"855cf6","input":"airline_df.isnull().sum()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"Age                                  0\nFlight Distance                      0\nInflight wifi service                0\nDeparture/Arrival time convenient    0\nEase of Online booking               0\nGate location                        0\nFood and drink                       0\nOnline boarding                      0\nSeat comfort                         0\nInflight entertainment               0\nOn-board service                     0\nLeg room service                     0\nBaggage handling                     0\nCheckin service                      0\nInflight service                     0\nCleanliness                          0\nDeparture Delay in Minutes           0\nArrival Delay in Minutes             0\nsatisfaction                         0\nGender_Female                        0\nGender_Male                          0\nCustomer Type_Loyal Customer         0\nCustomer Type_disloyal Customer      0\nType of Travel_Business travel       0\nType of Travel_Personal Travel       0\nClass_Business                       0\nClass_Eco                            0\nClass_Eco Plus                       0\ndtype: int64"},"exec_count":58}},"pos":2,"scrolled":true,"start":1657551686245,"state":"done","type":"cell"}
{"cell_type":"code","end":1657551700848,"exec_count":59,"id":"3e2b93","input":"dummies = pd.get_dummies(airline_df[\"satisfaction\"])\ndummies.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>neutral or dissatisfied</th>\n      <th>satisfied</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   neutral or dissatisfied  satisfied\n0                        1          0\n1                        1          0\n2                        0          1\n3                        1          0\n4                        0          1"},"exec_count":59}},"pos":5,"start":1657551700736,"state":"done","type":"cell"}
{"cell_type":"code","end":1657551706089,"exec_count":60,"id":"477eaa","input":"airline_df[\"Satisfied\"] = dummies[\"satisfied\"]\nairline_df.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Flight Distance</th>\n      <th>Inflight wifi service</th>\n      <th>Departure/Arrival time convenient</th>\n      <th>Ease of Online booking</th>\n      <th>Gate location</th>\n      <th>Food and drink</th>\n      <th>Online boarding</th>\n      <th>Seat comfort</th>\n      <th>Inflight entertainment</th>\n      <th>...</th>\n      <th>Gender_Female</th>\n      <th>Gender_Male</th>\n      <th>Customer Type_Loyal Customer</th>\n      <th>Customer Type_disloyal Customer</th>\n      <th>Type of Travel_Business travel</th>\n      <th>Type of Travel_Personal Travel</th>\n      <th>Class_Business</th>\n      <th>Class_Eco</th>\n      <th>Class_Eco Plus</th>\n      <th>Satisfied</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>13</td>\n      <td>460</td>\n      <td>3</td>\n      <td>4</td>\n      <td>3</td>\n      <td>1</td>\n      <td>5</td>\n      <td>3</td>\n      <td>5</td>\n      <td>5</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>25</td>\n      <td>235</td>\n      <td>3</td>\n      <td>2</td>\n      <td>3</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>26</td>\n      <td>1142</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>25</td>\n      <td>562</td>\n      <td>2</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>61</td>\n      <td>214</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>4</td>\n      <td>5</td>\n      <td>5</td>\n      <td>3</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 29 columns</p>\n</div>","text/plain":"   Age  Flight Distance  Inflight wifi service  \\\n0   13              460                      3   \n1   25              235                      3   \n2   26             1142                      2   \n3   25              562                      2   \n4   61              214                      3   \n\n   Departure/Arrival time convenient  Ease of Online booking  Gate location  \\\n0                                  4                       3              1   \n1                                  2                       3              3   \n2                                  2                       2              2   \n3                                  5                       5              5   \n4                                  3                       3              3   \n\n   Food and drink  Online boarding  Seat comfort  Inflight entertainment  ...  \\\n0               5                3             5                       5  ...   \n1               1                3             1                       1  ...   \n2               5                5             5                       5  ...   \n3               2                2             2                       2  ...   \n4               4                5             5                       3  ...   \n\n   Gender_Female  Gender_Male  Customer Type_Loyal Customer  \\\n0              0            1                             1   \n1              0            1                             0   \n2              1            0                             1   \n3              1            0                             1   \n4              0            1                             1   \n\n   Customer Type_disloyal Customer  Type of Travel_Business travel  \\\n0                                0                               0   \n1                                1                               1   \n2                                0                               1   \n3                                0                               1   \n4                                0                               1   \n\n   Type of Travel_Personal Travel  Class_Business  Class_Eco Class_Eco Plus  \\\n0                               1               0          0              1   \n1                               0               1          0              0   \n2                               0               1          0              0   \n3                               0               1          0              0   \n4                               0               1          0              0   \n\n   Satisfied  \n0          0  \n1          0  \n2          1  \n3          0  \n4          1  \n\n[5 rows x 29 columns]"},"exec_count":60}},"pos":6,"start":1657551706046,"state":"done","type":"cell"}
{"cell_type":"code","end":1657554638567,"exec_count":106,"id":"e5158c","input":"import pandas as pd\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport seaborn as sns\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport sklearn\nfrom sklearn import tree\nfrom matplotlib import pyplot as plt\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.neighbors import KNeighborsClassifier as KNN\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import AdaBoostClassifier as ADC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.naive_bayes import CategoricalNB\nfrom sklearn.linear_model import LogisticRegression as LR\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.neighbors import BallTree\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.model_selection import GridSearchCV as GSearch\n\nfrom random import sample","kernel":"ds_env","pos":0,"start":1657554638555,"state":"done","type":"cell"}
{"cell_type":"code","end":1657560225648,"exec_count":117,"id":"5fa0fe","input":"RF_model = RandomForestClassifier(n_estimators=30, criterion=\"entropy\")\n\nRF_model.fit(x_train, y_train)\n\nRF_hat = RF_model.predict(x_test)\n\nrecall = sklearn.metrics.recall_score(y_test, RF_hat)\nprecision = sklearn.metrics.precision_score(y_test, RF_hat)\naccuracy = sklearn.metrics.accuracy_score(y_test, RF_hat)\nf_measure = sklearn.metrics.f1_score(y_test, RF_hat)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\nsns.heatmap(confusion_matrix(y_test, RF_hat), annot=True, fmt='g')","kernel":"ds_env","output":{"0":{"name":"stdout","text":"R:  0.9399271305429663\nP:  0.9727766025935805\nA:  0.9624681442582439\nF:  0.9560697821567388\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":117},"2":{"data":{"image/png":"b030d0907bdc9c59dbc37a698145da5ca349fdfe","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":14,"start":1657560221292,"state":"done","type":"cell"}
{"cell_type":"code","end":1657560699464,"exec_count":120,"id":"421052","input":"NB_model = CategoricalNB(alpha = 3)\n\nNB_model.fit(x_train, y_train)\n\nNB_hat = NB_model.predict(x_test)\n\nrecall = sklearn.metrics.recall_score(y_test,NB_hat)\nprecision = sklearn.metrics.precision_score(y_test, NB_hat)\naccuracy = sklearn.metrics.accuracy_score(y_test, NB_hat)\nf_measure = sklearn.metrics.f1_score(y_test, NB_hat)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\nsns.heatmap(confusion_matrix(y_test, NB_hat), annot=True, fmt='g')\n\n# Ivan","kernel":"ds_env","output":{"0":{"name":"stdout","text":"R:  0.8787878787878788\nP:  0.8925090252707581\nA:  0.9013437331068036\nF:  0.8855953073926477\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":120},"2":{"data":{"image/png":"808bc85b7da923fcd1a00e4a200c1aeef59ecce6","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":12,"start":1657560698800,"state":"done","type":"cell"}
{"cell_type":"code","end":1657561744257,"exec_count":121,"id":"8df09d","input":"SGD_model = SGDClassifier(alpha = 0.001, loss = 'log_loss', max_iter = 10000, penalty = 'elasticnet')\n\nSGD_model.fit(x_train, y_train)\n\nSGD_hat = SGD_model.predict(x_test)\n\nrecall = sklearn.metrics.recall_score(y_test, SGD_hat)\nprecision = sklearn.metrics.precision_score(y_test, SGD_hat)\naccuracy = sklearn.metrics.accuracy_score(y_test, SGD_hat)\nf_measure = sklearn.metrics.f1_score(y_test, SGD_hat)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, SGD_hat), annot=True, fmt='g')\n\n# Ivan ","kernel":"ds_env","output":{"0":{"name":"stdout","text":"R:  0.7326935039545011\nP:  0.898539668700959\nA:  0.8479033129971426\nF:  0.8071858632336385\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":121},"2":{"data":{"image/png":"7db8f815a1185fa993cc5ec1afae2047da751c63","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":11,"start":1657561738957,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":26,"id":"4a2f48","input":"knn_clf = KNN(n_neighbors=3,weights='distance')\nknn_clf.fit(x_train, y_train)\nknn_pred = knn_clf.predict(x_test)","kernel":"ds_env","pos":25,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"093004","input":"a Decision Tree Classifier makes various questions to help determine what group a variable falls into. it goes from the top, and depending on how a question is answered it goes down a path to a different leaf in the tree. It goes all the way down and at the end it puts that variable into a group\n\n- What is a splitting criteron\n- What are the pros and cons?\n- \n\n","pos":14.875,"type":"cell"}
{"cell_type":"markdown","id":"247b54","input":"<u>What is a KNN:</u>\n\nA KNN is a classification model and can be used for both supervised and unsupervised machine learning. KNN works by finding the distance between a query and all the examples in the data. K is then used to select the number of examples closest to the query. the KNN then votes for the most frequent label. \n\n- - [https://towardsdatascience.com/machine\\-learning\\-basics\\-with\\-the\\-k\\-nearest\\-neighbors\\-algorithm\\-6a6e71d01761](https://towardsdatascience.com/machine-learning-basics-with-the-k-nearest-neighbors-algorithm-6a6e71d01761)\n- What does the K mean?\n  - [https://towardsdatascience.com/a\\-simple\\-introduction\\-to\\-k\\-nearest\\-neighbors\\-algorithm\\-b3519ed98e](https://towardsdatascience.com/a-simple-introduction-to-k-nearest-neighbors-algorithm-b3519ed98e)\n  - K means a parameter that shows the number of nearest neighbors. This is necessary for the voting process.\n\nGrid search:\n\n[https://scikit\\-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html](https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html)\n\n[https://medium.com/@erikgreenj/k\\-neighbors\\-classifier\\-with\\-gridsearchcv\\-basics\\-3c445ddeb657](https://medium.com/@erikgreenj/k-neighbors-classifier-with-gridsearchcv-basics-3c445ddeb657)\n\n","pos":24.5,"type":"cell"}
{"cell_type":"markdown","id":"86feac","input":"**Categorical Naive Bayes**\n\nThe categorical Naive Bayes model works using the Bayes Theorem, which assumes that individual features are independent on each other, which works well with our dataset, as we can see through our correlation matrix that none of our features are very correlated. Applying the Bayes Theorem assigns a probability to each feature in the dataset, then uses those probabilities to predict a whole outcome. The categorical Native Bayes model works best for categorical data, which works well with our dataset, as we have a lot of categorical data in the form of 1\\-5 ratings for the airline's performance.  An alpha value of 3 seemed to slightly improve the model, but \nfurther increases to alpha didn't do much.\n\n","pos":12.5,"type":"cell"}
{"cell_type":"markdown","id":"875a80","input":"**Decision Tree:**\n\nA decision tree is a graph that classifies items and whether it is true or false to the question in the box. In this example, we use satisfied for true and false for dissatisfied.\n\n","pos":14.625,"type":"cell"}
{"cell_type":"markdown","id":"88218d","input":"**Random Forest**\n\nA random forest is a model that makes a given number of randomized decision trees and uses them to make predictions on the data by using averaging functions to combine its results from several decision trees, making a more accurate/realistic prediction. Randomizing decision trees allows the model to individually look for correlations between sections of the dataset, making predictions more intuitive, compared to looking at the entire dataset through one decision tree, where it is harder to find patterns when there are so many variables to consider. It then takes the accuracy of the models it makes and displays them on the heatmap so that we can see how accurate/precise the model is. \n\nThrough some light hyperparameter tuning, we found that at around 20 decision trees, there was no more improvement in the performance of the model and subsequent additions to the amount of decision trees would just increase the processing time. There were also no differences in accuracy/precision when we tried different criterion such as \"entropy\" and \"log\\_loss\", so we decided that \"gini\", the default criterion, was good enough for the model.\n\nUsing GridSearchCV, we saw a slight increase in performance for higher amounts of decision trees like 30, and it looked like \"entropy\" had slightly better results than \"gini\", so we switched to those hyperparameters.\n\n- What are the pros and cons of the random forest\n- [https://towardsdatascience.com/hyperparameter\\-tuning\\-the\\-random\\-forest\\-in\\-python\\-using\\-scikit\\-learn\\-28d2aa77dd74](https://towardsdatascience.com/hyperparameter-tuning-the-random-forest-in-python-using-scikit-learn-28d2aa77dd74)\n\n","pos":14.25,"type":"cell"}
{"cell_type":"markdown","id":"f17d5f","input":"<u>Models to make:</u>\n\n- knn\n- decision tree\n- Random forest\n- SVC \\(DON'T DO THIS ONE YET\\)\n- Logistic regression \n- Adaboost \n- \n\nScoring me\ntrics:\n\n- f1 score\n- Recall\n- Precision \n- Accuracy\n\n","pos":31,"type":"cell"}
{"end":1657554470994,"exec_count":105,"id":"7c4c11","input":"target.value_counts()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0    73225\n1    56262\nName: Satisfied, dtype: int64"},"exec_count":105}},"pos":10.5,"start":1657554470990,"state":"done","type":"cell"}
{"end":1657555002872,"exec_count":113,"id":"89194e","input":"tree_gsearch.best_params_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"{'max_leaf_nodes': 4,\n 'min_samples_leaf': 1,\n 'min_samples_split': 2,\n 'min_weight_fraction_leaf': 0.0}"},"exec_count":113}},"pos":14.5625,"start":1657555002850,"state":"done","type":"cell"}
{"end":1657555164626,"exec_count":115,"id":"76d26b","input":"tree_clf = DecisionTreeClassifier(max_depth=5, max_leaf_nodes=4, min_samples_leaf=1, min_samples_split=2, min_weight_fraction_leaf=0.0)\ntree_clf = tree_clf.fit(x_train, y_train)\ny_pred_tree = tree_clf.predict(x_test)\nparams = {'min_samples_split': [1,2,3,4], 'min_samples_leaf': [1,2,3,4], 'min_weight_fraction_leaf': [-1.0,0.0,1.0], 'max_leaf_nodes': list(range(1,5))}\ntree_gsearch = GSearch(DecisionTreeClassifier(max_depth=7), params)\ntree_gsearch.fit(x_train, y_train)\nfig = plt.figure(figsize=(25,20))\n_ = tree.plot_tree(tree_clf,\n                   feature_names=input_columns.columns,  \n                   class_names=['Not Satisfied','Satisfied'],\n                   filled=True, fontsize=10)\n\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred_tree))\nprint(\"Precision:\", precision_score(y_test, y_pred_tree))\nprint(\"Recall:\", recall_score(y_test, y_pred_tree))\nprint(\"F1 Score:\", f1_score(y_test, y_pred_tree))","kernel":"ds_env","output":{"0":{"name":"stderr","text":"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:378: FitFailedWarning: \n780 fits failed out of a total of 960.\nThe score on these train-test partitions for these parameters will be set to nan.\nIf these failures are not expected, you can try to debug them by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n240 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 969, in fit\n    super().fit(\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 265, in fit\n    check_scalar(\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/utils/validation.py\", line 1480, in check_scalar\n    raise ValueError(\nValueError: min_samples_split == 1, must be >= 2.\n\n--------------------------------------------------------------------------------\n240 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 969, in fit\n    super().fit(\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 286, in fit\n    check_scalar(\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/utils/validation.py\", line 1480, in check_scalar\n    raise ValueError(\nValueError: min_weight_fraction_leaf == -1.0, must be >= 0.0.\n\n--------------------------------------------------------------------------------\n60 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 969, in fit\n    super().fit(\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 350, in fit\n    check_scalar(\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/utils/validation.py\", line 1480, in check_scalar\n    raise ValueError(\nValueError: max_leaf_nodes == 1, must be >= 2.\n\n--------------------------------------------------------------------------------\n240 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 969, in fit\n    super().fit(\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 286, in fit\n    check_scalar(\n  File \"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/utils/validation.py\", line 1489, in check_scalar\n    raise ValueError(\nValueError: min_weight_fraction_leaf == 1.0, must be <= 0.5.\n\n  warnings.warn(some_fits_failed_message, FitFailedWarning)\n/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_search.py:953: UserWarning: One or more of the test scores are non-finite: [       nan        nan        nan        nan        nan        nan\n        nan        nan        nan        nan        nan        nan\n        nan        nan        nan        nan        nan        nan\n        nan        nan        nan        nan        nan        nan\n        nan        nan        nan        nan        nan        nan\n        nan        nan        nan        nan        nan        nan\n        nan        nan        nan        nan        nan        nan\n        nan        nan        nan        nan        nan        nan\n        nan        nan        nan        nan 0.78701404        nan\n        nan 0.78701404        nan        nan 0.78701404        nan\n        nan        nan        nan        nan 0.78701404        nan\n        nan 0.78701404        nan        nan 0.78701404        nan\n        nan        nan        nan        nan 0.78701404        nan\n        nan 0.78701404        nan        nan 0.78701404        nan\n        nan        nan        nan        nan 0.78701404        nan\n        nan 0.78701404        nan        nan 0.78701404        nan\n        nan        nan        nan        nan 0.84332314        nan\n        nan 0.84332314        nan        nan 0.84332314        nan\n        nan        nan        nan        nan 0.84332314        nan\n        nan 0.84332314        nan        nan 0.84332314        nan\n        nan        nan        nan        nan 0.84332314        nan\n        nan 0.84332314        nan        nan 0.84332314        nan\n        nan        nan        nan        nan 0.84332314        nan\n        nan 0.84332314        nan        nan 0.84332314        nan\n        nan        nan        nan        nan 0.86081534        nan\n        nan 0.86081534        nan        nan 0.86081534        nan\n        nan        nan        nan        nan 0.86081534        nan\n        nan 0.86081534        nan        nan 0.86081534        nan\n        nan        nan        nan        nan 0.86081534        nan\n        nan 0.86081534        nan        nan 0.86081534        nan\n        nan        nan        nan        nan 0.86081534        nan\n        nan 0.86081534        nan        nan 0.86081534        nan]\n  warnings.warn(\n"},"1":{"name":"stdout","text":"Accuracy: 0.8584832805622056\nPrecision: 0.8522094318603788\nRecall: 0.815782458011197\nF1 Score: 0.8335981838819524\n"},"2":{"data":{"image/png":"7133c2bb365907555889789b07929ab5539f3c15","text/plain":"<Figure size 1800x1440 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":14.5,"scrolled":true,"start":1657555120690,"state":"done","type":"cell"}
{"exec_count":83,"id":"319420","input":"ax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test, y_pred_tree), annot=True, fmt='g')\nax.set_xlabel('Predicted labels')\nax.set_ylabel('True labels')\nax.set_title('Confusion Matrix');\nax.xaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied',]); ax.yaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied'])\n\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"P:  0.7256364823277068\nA:  0.7518727314850567\n"},"1":{"data":{"image/png":"cc46830565446b994f48c527f4d19f12cc64fb7a","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":14.75,"state":"done","type":"cell"}
{"id":"172427","input":"sample.","pos":0.5,"type":"cell"}
{"id":"3e87a5","input":"grid_params = {'n_neighbors':[1,2,3], 'weights':[]}\n\ngs = GSearch(KNN(), grid_params)\ngs.fit(x_train, y_train)","pos":28.5,"type":"cell"}
{"id":"a24349","input":"","pos":30.5,"type":"cell"}
{"id":0,"time":1657563590834,"type":"user"}
{"last_load":1657550812880,"type":"file"}