{"backend_state":"init","connection_file":"/projects/72aec78b-4035-4aa5-8faa-4d7af1533e7b/.local/share/jupyter/runtime/kernel-23de1683-45e2-4528-88eb-29f0224050cc.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"056d9b","input":"","pos":40,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"182d66","input":"sklearn.neighbors.KNeighborsClassifier(n_neighbors=5, *, weights='uniform', algorithm='auto', leaf_size=30, p=2, metric='minkowski', metric_params=None, n_jobs=None)","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1aa056","input":"svc = SVC()","pos":38,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1cca2c","input":"adc_clf.fit(x_train, y_train)","pos":26,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"39ecba","input":"ax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test, lr_pred), annot=True, fmt='g')\nax.set_xlabel('Predicted labels')\nax.set_ylabel('True labels')\nax.set_title('Confusion Matrix');\nax.xaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied',]); ax.yaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied'])\n\nrecall = sklearn.metrics.recall_score(y_test, lr_pred)\nprecision = sklearn.metrics.precision_score(y_test, lr_pred)\naccuracy = sklearn.metrics.accuracy_score(y_test, lr_pred)\nf_measure = sklearn.metrics.f1_score(y_test, lr_pred)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\n# Sebastian ","pos":33,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4d57b7","input":"ax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test, adc_pred), annot=True, fmt='g')\nax.set_xlabel('Predicted labels')\nax.set_ylabel('True labels')\nax.set_title('Confusion Matrix');\nax.xaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied',]); ax.yaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied'])\n\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\n\n# Sebastian ","pos":28,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4f27d7","input":"adc_pred = adc_clf.predict(x_test)","pos":27,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5d5d9c","input":"lr_pred=lr_clf.predict(x_test)","pos":32,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"68e03b","input":"total_squared_error = (np.sum((y_test - adc_pred)**2))\nmean_squared_error = total_squared_error/len(y_test)\nprint(mean_squared_error)","pos":29,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"73b016","input":"lr_clf = LR()","pos":30,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"acf580","input":"","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b47020","input":"ax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test, y_pred_tree), annot=True, fmt='g')\nax.set_xlabel('Predicted labels')\nax.set_ylabel('True labels')\nax.set_title('Confusion Matrix');\nax.xaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied',]); ax.yaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied'])\n\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b6d73f","input":"svc.fit(x_train, y_train)\nsvc_pred = svc.pred(x_test, y_test)","pos":39,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ca7434","input":"lr_clf.fit(x_train, y_train)","pos":31,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ce5416","input":"tree_clf.fit(x_train, y_train)","pos":25,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d48789","input":"tree_clf = DecisionTreeClassifier()\nadc_clf = ADC()","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fe0516","input":"tree_gsearch.best_params_","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"253c99","input":"reduced_df = airline_df.sample(frac=0.10, random_state=42)\nreduced_df.shape","output":{"0":{"data":{"text/plain":"(12949, 28)"},"exec_count":10,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"c47397","input":"reduced_df.satisfaction_satisfied.value_counts()","output":{"0":{"data":{"text/plain":"0    7323\n1    5626\nName: satisfaction_satisfied, dtype: int64"},"exec_count":11,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"12bf87","input":"target = reduced_df['satisfaction_satisfied']","pos":9,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"9bbc72","input":"input_columns = reduced_df.loc[:, airline_df.columns != \"satisfaction_satisfied\"]","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"f7d79b","input":"input_columns.shape","output":{"0":{"data":{"text/plain":"(12949, 27)"},"exec_count":14,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"b5b66f","input":"x_train, x_test, y_train, y_test = train_test_split(input_columns, target, stratify=target, train_size=0.8)","pos":12,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"c90f78","input":"SGD_model = SGDClassifier(loss=\"perceptron\", penalty=\"l2\", max_iter=10000)\n\nSGD_model.fit(x_train, y_train)\n\nSGD_hat = SGD_model.predict(x_test)\n\nrecall = sklearn.metrics.recall_score(y_test, SGD_hat)\nprecision = sklearn.metrics.precision_score(y_test, SGD_hat)\naccuracy = sklearn.metrics.accuracy_score(y_test, SGD_hat)\nf_measure = sklearn.metrics.f1_score(y_test, SGD_hat)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, SGD_hat), annot=True, fmt='g')\n\n# Ivan ","output":{"0":{"name":"stdout","output_type":"stream","text":"R:  0.9395555555555556\nP:  0.5040534096328088\nA:  0.5722007722007721\nF:  0.6561142147734327\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":16,"output_type":"execute_result"},"2":{"data":{"image/png":"6856f15d24cab0f28142d2d3dd58d74b83b86b58","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":16,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"56274e","input":"NB_model = CategoricalNB(alpha = 3)\n\nNB_model.fit(x_train, y_train)\n\nNB_hat = NB_model.predict(x_test)\n\nrecall = sklearn.metrics.recall_score(y_test,NB_hat)\nprecision = sklearn.metrics.precision_score(y_test, NB_hat)\naccuracy = sklearn.metrics.accuracy_score(y_test, NB_hat)\nf_measure = sklearn.metrics.f1_score(y_test, NB_hat)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\nsns.heatmap(confusion_matrix(y_test, NB_hat), annot=True, fmt='g')\n\n# Ivan","output":{"0":{"name":"stdout","output_type":"stream","text":"R:  0.8773333333333333\nP:  0.896457765667575\nA:  0.9027027027027027\nF:  0.8867924528301886\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":17,"output_type":"execute_result"},"2":{"data":{"image/png":"e082d62b69d515ad7b57f8cf1b29ce855332db82","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":17,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"0268df","input":"#Neural_model = MLPClassifier(solver='lbfgs', alpha=0.1, hidden_layer_sizes=(20, 20), random_state=1)\n\n#Neural_model.fit(x_train, y_train)\n\n#Neural_hat = Neural_model.predict(x_test)\n\n#precision = sklearn.metrics.precision_score(y_test, Neural_hat)\n#accuracy = sklearn.metrics.accuracy_score(y_test, Neural_hat)\n#print(\"P: \", precision)\n#print(\"A: \", accuracy)\n\n#sns.heatmap(confusion_matrix(y_test, Neural_hat), annot=True, fmt='g')","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"5a7989","input":"RF_model = RandomForestClassifier(n_estimators=20)\n\nRF_model.fit(x_train, y_train)\n\nRF_hat = RF_model.predict(x_test)\n\nrecall = sklearn.metrics.recall_score(y_test, RF_hat)\nprecision = sklearn.metrics.precision_score(y_test, RF_hat)\naccuracy = sklearn.metrics.accuracy_score(y_test, RF_hat)\nf_measure = sklearn.metrics.f1_score(y_test, RF_hat)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\nsns.heatmap(confusion_matrix(y_test, RF_hat), annot=True, fmt='g')","output":{"0":{"name":"stdout","output_type":"stream","text":"R:  0.9173333333333333\nP:  0.9467889908256881\nA:  0.9416988416988417\nF:  0.9318284424379233\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":19,"output_type":"execute_result"},"2":{"data":{"image/png":"7f46a6ac5e7f1f58c5d873224898ad8ce528c649","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":19,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"abaefb","input":"tree_clf = DecisionTreeClassifier(max_depth=4)\ntree_clf = tree_clf.fit(x_train, y_train)\ny_pred_tree = tree_clf.predict(x_test)\n# params = {'min_samples_split': [1,2,3,4], 'min_samples_leaf': [1,2,3,4], 'min_weight_fraction_leaf': [-1.0,0.0,1.0], 'max_leaf_nodes': list(range(1,5))}\n# tree_gsearch = GSearch(DecisionTreeClassifier(max_depth=7), params)\n# tree_gsearch.fit(x_train, y_train)\nfig = plt.figure(figsize=(25,20))\n_ = tree.plot_tree(tree_clf,\n                   feature_names=input_columns.columns,  \n                   class_names=['Not Satisfied','Satisfied'],\n                   filled=True, fontsize=10)\n\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred_tree))\nprint(\"Precision:\", precision_score(y_test, y_pred_tree))\nprint(\"Recall:\", recall_score(y_test, y_pred_tree))\nprint(\"F1 Score:\", f1_score(y_test, y_pred_tree))","output":{"0":{"name":"stdout","output_type":"stream","text":"Accuracy: 0.8857142857142857\nPrecision: 0.9132602193419741\nRecall: 0.8142222222222222\nF1 Score: 0.8609022556390977\n"},"1":{"data":{"image/png":"2dd4dfbe62afae32f4fc423e10343c0140c5e056","text/plain":"<Figure size 1800x1440 with 1 Axes>"},"exec_count":26,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"6d8736","input":"knn_clf = KNN(n_neighbors=101,weights='distance')\nknn_clf.fit(x_train, y_train)\nknn_pred = knn_clf.predict(x_test)\nax= plt.subplot()\nsns.heatmap(confusion_matrix(y_test, knn_pred), annot=True, fmt='g')\nax.set_xlabel('Predicted labels')\nax.set_ylabel('True labels')\nax.set_title('Confusion Matrix');\nax.xaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied',]); ax.yaxis.set_ticklabels(['0: Not Satisfied', '1: Satisfied'])\n\nrecall = sklearn.metrics.recall_score(y_test, knn_pred)\nprecision = sklearn.metrics.precision_score(y_test, knn_pred)\naccuracy = sklearn.metrics.accuracy_score(y_test, knn_pred)\nf_measure = sklearn.metrics.f1_score(y_test, knn_pred)\nprint(\"R: \", recall)\nprint(\"P: \", precision)\nprint(\"A: \", accuracy)\nprint(\"F: \", f_measure)\n\n# Sebastian ","output":{"0":{"name":"stdout","output_type":"stream","text":"R:  0.49244444444444446\nP:  0.6682750301568154\nA:  0.6733590733590734\nF:  0.5670419651995906\n"},"1":{"data":{"image/png":"9ec90b0952b49a0af5daec93939165a4627d9c9b","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":35,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":35,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"9d1aa6","input":"import pandas as pd\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport seaborn as sns\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport sklearn\nfrom sklearn import tree\nfrom matplotlib import pyplot as plt\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.neighbors import KNeighborsClassifier as KNN\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import AdaBoostClassifier as ADC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.naive_bayes import CategoricalNB\nfrom sklearn.linear_model import LogisticRegression as LR\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.neighbors import BallTree\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.model_selection import GridSearchCV as GSearch\n\nfrom imblearn.under_sampling import RandomUnderSampler ","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":47,"id":"d6fde9","input":"grid_params = {'n_neighbors':[1,2,3,4,5,6,7], 'leaf_size':[45] , 'p' :[4] }\n\ngs = GSearch(KNN(), grid_params)\ngs.fit(x_train, y_train)\nprint(gs.best_params_)\n#Angela and ishani","output":{"0":{"name":"stdout","output_type":"stream","text":"{'leaf_size': 45, 'n_neighbors': 7, 'p': 4}\n"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"24d955","input":"airline_df = pd.read_csv('./data/airline_data.csv')\nairline_df.dropna(inplace=True)\nairline_df.reset_index(drop=True, inplace=True)\nairline_df = pd.get_dummies(airline_df, prefix = None, prefix_sep = '_', dummy_na = False, columns = ['satisfaction','Gender', 'Customer Type', 'Type of Travel', 'Class'], sparse = False, drop_first = False, dtype = None)\ncolumns_drop = ['id', 'Unnamed: 0.1', 'Unnamed: 0', 'satisfaction_neutral or dissatisfied']\nairline_df.drop(columns_drop, axis=1, inplace = True)\n","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"d0a5cd","input":"airline_df.isnull().sum()","output":{"0":{"data":{"text/plain":"Age                                  0\nFlight Distance                      0\nInflight wifi service                0\nDeparture/Arrival time convenient    0\nEase of Online booking               0\nGate location                        0\nFood and drink                       0\nOnline boarding                      0\nSeat comfort                         0\nInflight entertainment               0\nOn-board service                     0\nLeg room service                     0\nBaggage handling                     0\nCheckin service                      0\nInflight service                     0\nCleanliness                          0\nDeparture Delay in Minutes           0\nArrival Delay in Minutes             0\nsatisfaction_satisfied               0\nGender_Female                        0\nGender_Male                          0\nCustomer Type_Loyal Customer         0\nCustomer Type_disloyal Customer      0\nType of Travel_Business travel       0\nType of Travel_Personal Travel       0\nClass_Business                       0\nClass_Eco                            0\nClass_Eco Plus                       0\ndtype: int64"},"exec_count":6,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"3cb126","input":"airline_df.columns","output":{"0":{"data":{"text/plain":"Index(['Age', 'Flight Distance', 'Inflight wifi service',\n       'Departure/Arrival time convenient', 'Ease of Online booking',\n       'Gate location', 'Food and drink', 'Online boarding', 'Seat comfort',\n       'Inflight entertainment', 'On-board service', 'Leg room service',\n       'Baggage handling', 'Checkin service', 'Inflight service',\n       'Cleanliness', 'Departure Delay in Minutes', 'Arrival Delay in Minutes',\n       'satisfaction_satisfied', 'Gender_Female', 'Gender_Male',\n       'Customer Type_Loyal Customer', 'Customer Type_disloyal Customer',\n       'Type of Travel_Business travel', 'Type of Travel_Personal Travel',\n       'Class_Business', 'Class_Eco', 'Class_Eco Plus'],\n      dtype='object')"},"exec_count":7,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"92ff8d","input":"airline_df.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Flight Distance</th>\n      <th>Inflight wifi service</th>\n      <th>Departure/Arrival time convenient</th>\n      <th>Ease of Online booking</th>\n      <th>Gate location</th>\n      <th>Food and drink</th>\n      <th>Online boarding</th>\n      <th>Seat comfort</th>\n      <th>Inflight entertainment</th>\n      <th>...</th>\n      <th>satisfaction_satisfied</th>\n      <th>Gender_Female</th>\n      <th>Gender_Male</th>\n      <th>Customer Type_Loyal Customer</th>\n      <th>Customer Type_disloyal Customer</th>\n      <th>Type of Travel_Business travel</th>\n      <th>Type of Travel_Personal Travel</th>\n      <th>Class_Business</th>\n      <th>Class_Eco</th>\n      <th>Class_Eco Plus</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>13</td>\n      <td>460</td>\n      <td>3</td>\n      <td>4</td>\n      <td>3</td>\n      <td>1</td>\n      <td>5</td>\n      <td>3</td>\n      <td>5</td>\n      <td>5</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>25</td>\n      <td>235</td>\n      <td>3</td>\n      <td>2</td>\n      <td>3</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>26</td>\n      <td>1142</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>...</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>25</td>\n      <td>562</td>\n      <td>2</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>61</td>\n      <td>214</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>4</td>\n      <td>5</td>\n      <td>5</td>\n      <td>3</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 28 columns</p>\n</div>","text/plain":"   Age  Flight Distance  Inflight wifi service  \\\n0   13              460                      3   \n1   25              235                      3   \n2   26             1142                      2   \n3   25              562                      2   \n4   61              214                      3   \n\n   Departure/Arrival time convenient  Ease of Online booking  Gate location  \\\n0                                  4                       3              1   \n1                                  2                       3              3   \n2                                  2                       2              2   \n3                                  5                       5              5   \n4                                  3                       3              3   \n\n   Food and drink  Online boarding  Seat comfort  Inflight entertainment  ...  \\\n0               5                3             5                       5  ...   \n1               1                3             1                       1  ...   \n2               5                5             5                       5  ...   \n3               2                2             2                       2  ...   \n4               4                5             5                       3  ...   \n\n   satisfaction_satisfied  Gender_Female  Gender_Male  \\\n0                       0              0            1   \n1                       0              0            1   \n2                       1              1            0   \n3                       0              1            0   \n4                       1              0            1   \n\n   Customer Type_Loyal Customer  Customer Type_disloyal Customer  \\\n0                             1                                0   \n1                             0                                1   \n2                             1                                0   \n3                             1                                0   \n4                             1                                0   \n\n   Type of Travel_Business travel  Type of Travel_Personal Travel  \\\n0                               0                               1   \n1                               1                               0   \n2                               1                               0   \n3                               1                               0   \n4                               1                               0   \n\n   Class_Business  Class_Eco  Class_Eco Plus  \n0               0          0               1  \n1               1          0               0  \n2               1          0               0  \n3               1          0               0  \n4               1          0               0  \n\n[5 rows x 28 columns]"},"exec_count":8,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"32d960","input":"\nairline_df.dropna(inplace=True)\nairline_df.reset_index(drop=True, inplace=True)","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"4051e8","input":"<u>Models to make:</u>\n\n- knn\n- decision tree\n- Random forest\n- SVC \\(DON'T DO THIS ONE YET\\)\n- Logistic regression \n- Adaboost \n- \n\nScoring me\ntrics:\n\n- f1 score\n- Recall\n- Precision \n- Accuracy\n\n","pos":41,"type":"cell"}
{"cell_type":"markdown","id":"543127","input":"**Categorical Naive Bayes**\n\nThe categorical Naive Bayes model works using the Bayes Theorem, which assumes that individual features are independent on each other, which works well with our dataset, as we can see through our correlation matrix that none of our features are very correlated. Applying the Bayes Theorem assigns a probability to each feature in the dataset, then uses those probabilities to predict a whole outcome. The categorical Native Bayes model works best for categorical data, which works well with our dataset, as we have a lot of categorical data in the form of 1\\-5 ratings for the airline's performance.\n\n","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"5daf85","input":"**Decision Tree:**\n\nA decision tree is a graph that classifies items and whether it is true or false to the question in the box. In this example, we use satisfied for true and false for dissatisfied.\n\n","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"66b267","input":"**Random Forest**\n\nA random forest is a model that makes a given number of randomized decision trees and uses them to make predictions on the data by using averaging functions to combine its results from several decision trees, making a more accurate/realistic prediction. Randomizing decision trees allows the model to individually look for correlations between sections of the dataset, making predictions more intuitive, compared to looking at the entire dataset through one decision tree, where it is harder to find patterns when there are so many variables to consider. It then takes the accuracy of the models it makes and displays them on the heatmap so that we can see how accurate/precise the model is. Through some light hyperparameter tuning, we found that at around 20 decision trees, there was no more improvement in the performance of the model and subsequent additions to the amount of decision trees would just increase the processing time. There were also no differences in accuracy/precision when we tried different criterion such as \"entropy\" and \"log\\_loss\", so we decided that \"gini\", the default criterion, was good enough for the model.\n\n- What are the pros and cons of the random forest\n- [https://towardsdatascience.com/hyperparameter\\-tuning\\-the\\-random\\-forest\\-in\\-python\\-using\\-scikit\\-learn\\-28d2aa77dd74](https://towardsdatascience.com/hyperparameter-tuning-the-random-forest-in-python-using-scikit-learn-28d2aa77dd74)\n\n","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"a005d0","input":"a Decision Tree Classifier makes various questions to help determine what group a variable falls into. it goes from the top, and depending on how a question is answered it goes down a path to a different leaf in the tree. It goes all the way down and at the end it puts that variable into a group\n\n- What is a splitting criteron\n- What are the pros and cons?\n- \n\n","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"a36530","input":"<u>What is a KNN:</u>\n\nA KNN is a classification model and can be used for both supervised and unsupervised machine learning. KNN works by finding the distance between a query and all the examples in the data. K is then used to select the number of examples closest to the query. the KNN then votes for the most frequent label. \n\n- - [https://towardsdatascience.com/machine\\-learning\\-basics\\-with\\-the\\-k\\-nearest\\-neighbors\\-algorithm\\-6a6e71d01761](https://towardsdatascience.com/machine-learning-basics-with-the-k-nearest-neighbors-algorithm-6a6e71d01761)\n- What does the K mean?\n  - [https://towardsdatascience.com/a\\-simple\\-introduction\\-to\\-k\\-nearest\\-neighbors\\-algorithm\\-b3519ed98e](https://towardsdatascience.com/a-simple-introduction-to-k-nearest-neighbors-algorithm-b3519ed98e)\n  - K means a parameter that shows the number of nearest neighbors. This is necessary for the voting process.\n\nGrid search:\n\n[https://scikit\\-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html](https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html)\n\n[https://medium.com/@erikgreenj/k\\-neighbors\\-classifier\\-with\\-gridsearchcv\\-basics\\-3c445ddeb657](https://medium.com/@erikgreenj/k-neighbors-classifier-with-gridsearchcv-basics-3c445ddeb657)\n\n[https://scikit\\-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html](https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html)\n\n","pos":34,"type":"cell"}
{"id":0,"time":1657645921207,"type":"user"}
{"last_load":1657645921366,"type":"file"}